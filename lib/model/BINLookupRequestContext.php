<?php
/**
 * BINLookupRequestContext
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * BINLookupRequestContext Class Doc Comment
 *
 * @category Class
 * @description BIN lookup request context.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BINLookupRequestContext implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BINLookupRequest_context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response' => 'string',
        'response_status_code' => 'int',
        'success' => 'bool',
        'bin' => 'string',
        'type' => 'string',
        'scheme' => 'string',
        'additional_schemes' => 'string[]',
        'country_code' => 'string',
        'account_updater' => 'bool',
        'issuer_tokenization' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'response' => null,
        'response_status_code' => null,
        'success' => null,
        'bin' => null,
        'type' => null,
        'scheme' => null,
        'additional_schemes' => null,
        'country_code' => null,
        'account_updater' => null,
        'issuer_tokenization' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response' => 'response',
        'response_status_code' => 'response_status_code',
        'success' => 'success',
        'bin' => 'bin',
        'type' => 'type',
        'scheme' => 'scheme',
        'additional_schemes' => 'additional_schemes',
        'country_code' => 'country_code',
        'account_updater' => 'account_updater',
        'issuer_tokenization' => 'issuer_tokenization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response' => 'setResponse',
        'response_status_code' => 'setResponseStatusCode',
        'success' => 'setSuccess',
        'bin' => 'setBin',
        'type' => 'setType',
        'scheme' => 'setScheme',
        'additional_schemes' => 'setAdditionalSchemes',
        'country_code' => 'setCountryCode',
        'account_updater' => 'setAccountUpdater',
        'issuer_tokenization' => 'setIssuerTokenization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response' => 'getResponse',
        'response_status_code' => 'getResponseStatusCode',
        'success' => 'getSuccess',
        'bin' => 'getBin',
        'type' => 'getType',
        'scheme' => 'getScheme',
        'additional_schemes' => 'getAdditionalSchemes',
        'country_code' => 'getCountryCode',
        'account_updater' => 'getAccountUpdater',
        'issuer_tokenization' => 'getIssuerTokenization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SCHEME_ACCEL = 'accel';
    public const SCHEME_AMEX = 'amex';
    public const SCHEME_BANCONTACT = 'bancontact';
    public const SCHEME_CARTE_BANCAIRE = 'carte-bancaire';
    public const SCHEME_CIRRUS = 'cirrus';
    public const SCHEME_CULIANCE = 'culiance';
    public const SCHEME_DANKORT = 'dankort';
    public const SCHEME_DINERS_CLUB = 'diners-club';
    public const SCHEME_DISCOVER = 'discover';
    public const SCHEME_EFTPOS_AUSTRALIA = 'eftpos-australia';
    public const SCHEME_ELO = 'elo';
    public const SCHEME_HIPERCARD = 'hipercard';
    public const SCHEME_JCB = 'jcb';
    public const SCHEME_MAESTRO = 'maestro';
    public const SCHEME_MASTERCARD = 'mastercard';
    public const SCHEME_NYCE = 'nyce';
    public const SCHEME_OTHER = 'other';
    public const SCHEME_PULSE = 'pulse';
    public const SCHEME_RUPAY = 'rupay';
    public const SCHEME_STAR = 'star';
    public const SCHEME_UNIONPAY = 'unionpay';
    public const SCHEME_VISA = 'visa';
    public const ADDITIONAL_SCHEMES_ACCEL = 'accel';
    public const ADDITIONAL_SCHEMES_AMEX = 'amex';
    public const ADDITIONAL_SCHEMES_BANCONTACT = 'bancontact';
    public const ADDITIONAL_SCHEMES_CARTE_BANCAIRE = 'carte-bancaire';
    public const ADDITIONAL_SCHEMES_CIRRUS = 'cirrus';
    public const ADDITIONAL_SCHEMES_CULIANCE = 'culiance';
    public const ADDITIONAL_SCHEMES_DANKORT = 'dankort';
    public const ADDITIONAL_SCHEMES_DINERS_CLUB = 'diners-club';
    public const ADDITIONAL_SCHEMES_DISCOVER = 'discover';
    public const ADDITIONAL_SCHEMES_EFTPOS_AUSTRALIA = 'eftpos-australia';
    public const ADDITIONAL_SCHEMES_ELO = 'elo';
    public const ADDITIONAL_SCHEMES_HIPERCARD = 'hipercard';
    public const ADDITIONAL_SCHEMES_JCB = 'jcb';
    public const ADDITIONAL_SCHEMES_MAESTRO = 'maestro';
    public const ADDITIONAL_SCHEMES_MASTERCARD = 'mastercard';
    public const ADDITIONAL_SCHEMES_NYCE = 'nyce';
    public const ADDITIONAL_SCHEMES_OTHER = 'other';
    public const ADDITIONAL_SCHEMES_PULSE = 'pulse';
    public const ADDITIONAL_SCHEMES_RUPAY = 'rupay';
    public const ADDITIONAL_SCHEMES_STAR = 'star';
    public const ADDITIONAL_SCHEMES_UNIONPAY = 'unionpay';
    public const ADDITIONAL_SCHEMES_VISA = 'visa';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchemeAllowableValues()
    {
        return [
            self::SCHEME_ACCEL,
            self::SCHEME_AMEX,
            self::SCHEME_BANCONTACT,
            self::SCHEME_CARTE_BANCAIRE,
            self::SCHEME_CIRRUS,
            self::SCHEME_CULIANCE,
            self::SCHEME_DANKORT,
            self::SCHEME_DINERS_CLUB,
            self::SCHEME_DISCOVER,
            self::SCHEME_EFTPOS_AUSTRALIA,
            self::SCHEME_ELO,
            self::SCHEME_HIPERCARD,
            self::SCHEME_JCB,
            self::SCHEME_MAESTRO,
            self::SCHEME_MASTERCARD,
            self::SCHEME_NYCE,
            self::SCHEME_OTHER,
            self::SCHEME_PULSE,
            self::SCHEME_RUPAY,
            self::SCHEME_STAR,
            self::SCHEME_UNIONPAY,
            self::SCHEME_VISA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalSchemesAllowableValues()
    {
        return [
            self::ADDITIONAL_SCHEMES_ACCEL,
            self::ADDITIONAL_SCHEMES_AMEX,
            self::ADDITIONAL_SCHEMES_BANCONTACT,
            self::ADDITIONAL_SCHEMES_CARTE_BANCAIRE,
            self::ADDITIONAL_SCHEMES_CIRRUS,
            self::ADDITIONAL_SCHEMES_CULIANCE,
            self::ADDITIONAL_SCHEMES_DANKORT,
            self::ADDITIONAL_SCHEMES_DINERS_CLUB,
            self::ADDITIONAL_SCHEMES_DISCOVER,
            self::ADDITIONAL_SCHEMES_EFTPOS_AUSTRALIA,
            self::ADDITIONAL_SCHEMES_ELO,
            self::ADDITIONAL_SCHEMES_HIPERCARD,
            self::ADDITIONAL_SCHEMES_JCB,
            self::ADDITIONAL_SCHEMES_MAESTRO,
            self::ADDITIONAL_SCHEMES_MASTERCARD,
            self::ADDITIONAL_SCHEMES_NYCE,
            self::ADDITIONAL_SCHEMES_OTHER,
            self::ADDITIONAL_SCHEMES_PULSE,
            self::ADDITIONAL_SCHEMES_RUPAY,
            self::ADDITIONAL_SCHEMES_STAR,
            self::ADDITIONAL_SCHEMES_UNIONPAY,
            self::ADDITIONAL_SCHEMES_VISA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response'] = $data['response'] ?? null;
        $this->container['response_status_code'] = $data['response_status_code'] ?? null;
        $this->container['success'] = $data['success'] ?? null;
        $this->container['bin'] = $data['bin'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['scheme'] = $data['scheme'] ?? null;
        $this->container['additional_schemes'] = $data['additional_schemes'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['account_updater'] = $data['account_updater'] ?? null;
        $this->container['issuer_tokenization'] = $data['issuer_tokenization'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSchemeAllowableValues();
        if (!is_null($this->container['scheme']) && !in_array($this->container['scheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scheme', must be one of '%s'",
                $this->container['scheme'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response
     *
     * @return string|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string|null $response The response body received from the `url`.
     *
     * @return self
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets response_status_code
     *
     * @return int|null
     */
    public function getResponseStatusCode()
    {
        return $this->container['response_status_code'];
    }

    /**
     * Sets response_status_code
     *
     * @param int|null $response_status_code The response status code received from the `url`.
     *
     * @return self
     */
    public function setResponseStatusCode($response_status_code)
    {
        $this->container['response_status_code'] = $response_status_code;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success Whether the BIN lookup was successful or not.
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin The value used to lookup BIN details.
     *
     * @return self
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of card, i.e. credit or debit, from the lookup response.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string|null
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string|null $scheme The card scheme result from the lookup response.
     *
     * @return self
     */
    public function setScheme($scheme)
    {
        $allowedValues = $this->getSchemeAllowableValues();
        if (!is_null($scheme) && !in_array($scheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scheme', must be one of '%s'",
                    $scheme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets additional_schemes
     *
     * @return string[]|null
     */
    public function getAdditionalSchemes()
    {
        return $this->container['additional_schemes'];
    }

    /**
     * Sets additional_schemes
     *
     * @param string[]|null $additional_schemes The card additional schemes from the lookup response.
     *
     * @return self
     */
    public function setAdditionalSchemes($additional_schemes)
    {
        $allowedValues = $this->getAdditionalSchemesAllowableValues();
        if (!is_null($additional_schemes) && array_diff($additional_schemes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'additional_schemes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_schemes'] = $additional_schemes;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The card country code result from the lookup response.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets account_updater
     *
     * @return bool|null
     */
    public function getAccountUpdater()
    {
        return $this->container['account_updater'];
    }

    /**
     * Sets account_updater
     *
     * @param bool|null $account_updater Whether Account Updater is enabled for this card.
     *
     * @return self
     */
    public function setAccountUpdater($account_updater)
    {
        $this->container['account_updater'] = $account_updater;

        return $this;
    }

    /**
     * Gets issuer_tokenization
     *
     * @return bool|null
     */
    public function getIssuerTokenization()
    {
        return $this->container['issuer_tokenization'];
    }

    /**
     * Sets issuer_tokenization
     *
     * @param bool|null $issuer_tokenization Whether the issuing bank supports network tokenization for this card.
     *
     * @return self
     */
    public function setIssuerTokenization($issuer_tokenization)
    {
        $this->container['issuer_tokenization'] = $issuer_tokenization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


