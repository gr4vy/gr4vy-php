<?php
/**
 * CartItem
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * CartItem Class Doc Comment
 *
 * @category Class
 * @description A cart item that represents a single cart line item for a transaction. Note that some optional properties are required for certain payment service providers. If no value is set for these properties, we will use their default value.  If the total due to be paid for the item is required by the payment service provider, generally referred to as the \&quot;total amount\&quot;, the formula below will usually be used to calculate this amount:  &#x60;(unit_amount * quantity) - discount_amount + tax_amount&#x60;  It&#39;s highly recommended that the total amount to pay for all items should match the transaction&#39;s amount to reduce the risk of the transaction being declined by the payment service provider.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CartItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'quantity' => 'int',
        'unit_amount' => 'int',
        'discount_amount' => 'int',
        'tax_amount' => 'int',
        'external_identifier' => 'string',
        'sku' => 'string',
        'product_url' => 'string',
        'image_url' => 'string',
        'categories' => 'string[]',
        'product_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'quantity' => null,
        'unit_amount' => null,
        'discount_amount' => null,
        'tax_amount' => null,
        'external_identifier' => null,
        'sku' => null,
        'product_url' => 'url',
        'image_url' => 'url',
        'categories' => null,
        'product_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'quantity' => 'quantity',
        'unit_amount' => 'unit_amount',
        'discount_amount' => 'discount_amount',
        'tax_amount' => 'tax_amount',
        'external_identifier' => 'external_identifier',
        'sku' => 'sku',
        'product_url' => 'product_url',
        'image_url' => 'image_url',
        'categories' => 'categories',
        'product_type' => 'product_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'quantity' => 'setQuantity',
        'unit_amount' => 'setUnitAmount',
        'discount_amount' => 'setDiscountAmount',
        'tax_amount' => 'setTaxAmount',
        'external_identifier' => 'setExternalIdentifier',
        'sku' => 'setSku',
        'product_url' => 'setProductUrl',
        'image_url' => 'setImageUrl',
        'categories' => 'setCategories',
        'product_type' => 'setProductType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'quantity' => 'getQuantity',
        'unit_amount' => 'getUnitAmount',
        'discount_amount' => 'getDiscountAmount',
        'tax_amount' => 'getTaxAmount',
        'external_identifier' => 'getExternalIdentifier',
        'sku' => 'getSku',
        'product_url' => 'getProductUrl',
        'image_url' => 'getImageUrl',
        'categories' => 'getCategories',
        'product_type' => 'getProductType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PRODUCT_TYPE_PHYSICAL = 'physical';
    const PRODUCT_TYPE_DISCOUNT = 'discount';
    const PRODUCT_TYPE_SHIPPING_FEE = 'shipping_fee';
    const PRODUCT_TYPE_SALES_TAX = 'sales_tax';
    const PRODUCT_TYPE_DIGITAL = 'digital';
    const PRODUCT_TYPE_GIFT_CARD = 'gift_card';
    const PRODUCT_TYPE_STORE_CREDIT = 'store_credit';
    const PRODUCT_TYPE_SURCHARGE = 'surcharge';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_PHYSICAL,
            self::PRODUCT_TYPE_DISCOUNT,
            self::PRODUCT_TYPE_SHIPPING_FEE,
            self::PRODUCT_TYPE_SALES_TAX,
            self::PRODUCT_TYPE_DIGITAL,
            self::PRODUCT_TYPE_GIFT_CARD,
            self::PRODUCT_TYPE_STORE_CREDIT,
            self::PRODUCT_TYPE_SURCHARGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['unit_amount'] = $data['unit_amount'] ?? null;
        $this->container['discount_amount'] = $data['discount_amount'] ?? 0;
        $this->container['tax_amount'] = $data['tax_amount'] ?? 0;
        $this->container['external_identifier'] = $data['external_identifier'] ?? null;
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['product_url'] = $data['product_url'] ?? null;
        $this->container['image_url'] = $data['image_url'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['product_type'] = $data['product_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 99999999.";
        }

        if (($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if ($this->container['unit_amount'] === null) {
            $invalidProperties[] = "'unit_amount' can't be null";
        }
        if (($this->container['unit_amount'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'unit_amount', must be smaller than or equal to 99999999.";
        }

        if (($this->container['unit_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['discount_amount']) && ($this->container['discount_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['tax_amount']) && ($this->container['tax_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['external_identifier']) && (mb_strlen($this->container['external_identifier']) > 200)) {
            $invalidProperties[] = "invalid value for 'external_identifier', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['sku']) && (mb_strlen($this->container['sku']) > 200)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['product_url']) && (mb_strlen($this->container['product_url']) > 2083)) {
            $invalidProperties[] = "invalid value for 'product_url', the character length must be smaller than or equal to 2083.";
        }

        if (!is_null($this->container['image_url']) && (mb_strlen($this->container['image_url']) > 2083)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 2083.";
        }

        if (!is_null($this->container['categories']) && (count($this->container['categories']) > 100)) {
            $invalidProperties[] = "invalid value for 'categories', number of items must be less than or equal to 100.";
        }

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_type', must be one of '%s'",
                $this->container['product_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CartItem., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of this item in the cart. This value cannot be negative or zero.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if (($quantity > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling CartItem., must be smaller than or equal to 99999999.');
        }
        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling CartItem., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_amount
     *
     * @return int
     */
    public function getUnitAmount()
    {
        return $this->container['unit_amount'];
    }

    /**
     * Sets unit_amount
     *
     * @param int $unit_amount The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     *
     * @return self
     */
    public function setUnitAmount($unit_amount)
    {

        if (($unit_amount > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $unit_amount when calling CartItem., must be smaller than or equal to 99999999.');
        }
        if (($unit_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_amount when calling CartItem., must be bigger than or equal to 0.');
        }

        $this->container['unit_amount'] = $unit_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int|null $discount_amount The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.  Please note that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total discount amount for 5 of the cart item.  You might see unexpected failed transactions if the `discount_amount` can not be equally divided by the `quantity` value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific discount.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {

        if (!is_null($discount_amount) && ($discount_amount > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling CartItem., must be smaller than or equal to 99999999.');
        }
        if (!is_null($discount_amount) && ($discount_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling CartItem., must be bigger than or equal to 0.');
        }

        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return int|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param int|null $tax_amount The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.  Please not that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total tax amount for 5 of the cart item.  You might see unexpected failed transactions if the `tax_amount` can not be equally divided by the `quantity` value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific tax amount.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {

        if (!is_null($tax_amount) && ($tax_amount > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling CartItem., must be smaller than or equal to 99999999.');
        }
        if (!is_null($tax_amount) && ($tax_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_amount when calling CartItem., must be bigger than or equal to 0.');
        }

        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets external_identifier
     *
     * @return string|null
     */
    public function getExternalIdentifier()
    {
        return $this->container['external_identifier'];
    }

    /**
     * Sets external_identifier
     *
     * @param string|null $external_identifier An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     *
     * @return self
     */
    public function setExternalIdentifier($external_identifier)
    {
        if (!is_null($external_identifier) && (mb_strlen($external_identifier) > 200)) {
            throw new \InvalidArgumentException('invalid length for $external_identifier when calling CartItem., must be smaller than or equal to 200.');
        }

        $this->container['external_identifier'] = $external_identifier;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku The SKU for the item.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (!is_null($sku) && (mb_strlen($sku) > 200)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling CartItem., must be smaller than or equal to 200.');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets product_url
     *
     * @return string|null
     */
    public function getProductUrl()
    {
        return $this->container['product_url'];
    }

    /**
     * Sets product_url
     *
     * @param string|null $product_url The product URL for the item.
     *
     * @return self
     */
    public function setProductUrl($product_url)
    {
        if (!is_null($product_url) && (mb_strlen($product_url) > 2083)) {
            throw new \InvalidArgumentException('invalid length for $product_url when calling CartItem., must be smaller than or equal to 2083.');
        }

        $this->container['product_url'] = $product_url;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url The URL for the image of the item.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (!is_null($image_url) && (mb_strlen($image_url) > 2083)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling CartItem., must be smaller than or equal to 2083.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories A list of strings containing product categories for the item. Max length per item: 50.
     *
     * @return self
     */
    public function setCategories($categories)
    {

        if (!is_null($categories) && (count($categories) > 100)) {
            throw new \InvalidArgumentException('invalid value for $categories when calling CartItem., number of items must be less than or equal to 100.');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type The product type of the cart item.
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($product_type) && !in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_type', must be one of '%s'",
                    $product_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


