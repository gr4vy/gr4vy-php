<?php
/**
 * ConnectionOptionsForterAntiFraudCartItemsInnerBeneficiariesInnerComments
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * ConnectionOptionsForterAntiFraudCartItemsInnerBeneficiariesInnerComments Class Doc Comment
 *
 * @category Class
 * @description Comments to merchant or beneficiary written by customer.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ConnectionOptionsForterAntiFraudCartItemsInnerBeneficiariesInnerComments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnectionOptions_forter_anti_fraud_cart_items_inner_beneficiaries_inner_comments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_comments_to_merchant' => 'string',
        'message_to_beneficiary' => 'string',
        'merchant_comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_comments_to_merchant' => null,
        'message_to_beneficiary' => null,
        'merchant_comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_comments_to_merchant' => 'user_comments_to_merchant',
        'message_to_beneficiary' => 'message_to_beneficiary',
        'merchant_comments' => 'merchant_comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_comments_to_merchant' => 'setUserCommentsToMerchant',
        'message_to_beneficiary' => 'setMessageToBeneficiary',
        'merchant_comments' => 'setMerchantComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_comments_to_merchant' => 'getUserCommentsToMerchant',
        'message_to_beneficiary' => 'getMessageToBeneficiary',
        'merchant_comments' => 'getMerchantComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_comments_to_merchant'] = $data['user_comments_to_merchant'] ?? null;
        $this->container['message_to_beneficiary'] = $data['message_to_beneficiary'] ?? null;
        $this->container['merchant_comments'] = $data['merchant_comments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['user_comments_to_merchant']) && (mb_strlen($this->container['user_comments_to_merchant']) > 600)) {
            $invalidProperties[] = "invalid value for 'user_comments_to_merchant', the character length must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['message_to_beneficiary']) && (mb_strlen($this->container['message_to_beneficiary']) > 600)) {
            $invalidProperties[] = "invalid value for 'message_to_beneficiary', the character length must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['merchant_comments']) && (mb_strlen($this->container['merchant_comments']) > 600)) {
            $invalidProperties[] = "invalid value for 'merchant_comments', the character length must be smaller than or equal to 600.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_comments_to_merchant
     *
     * @return string|null
     */
    public function getUserCommentsToMerchant()
    {
        return $this->container['user_comments_to_merchant'];
    }

    /**
     * Sets user_comments_to_merchant
     *
     * @param string|null $user_comments_to_merchant Comments the customer left to the merchant.
     *
     * @return self
     */
    public function setUserCommentsToMerchant($user_comments_to_merchant)
    {
        if (!is_null($user_comments_to_merchant) && (mb_strlen($user_comments_to_merchant) > 600)) {
            throw new \InvalidArgumentException('invalid length for $user_comments_to_merchant when calling ConnectionOptionsForterAntiFraudCartItemsInnerBeneficiariesInnerComments., must be smaller than or equal to 600.');
        }

        $this->container['user_comments_to_merchant'] = $user_comments_to_merchant;

        return $this;
    }

    /**
     * Gets message_to_beneficiary
     *
     * @return string|null
     */
    public function getMessageToBeneficiary()
    {
        return $this->container['message_to_beneficiary'];
    }

    /**
     * Sets message_to_beneficiary
     *
     * @param string|null $message_to_beneficiary Comments the customer left to the beneficiary of the purchase made.
     *
     * @return self
     */
    public function setMessageToBeneficiary($message_to_beneficiary)
    {
        if (!is_null($message_to_beneficiary) && (mb_strlen($message_to_beneficiary) > 600)) {
            throw new \InvalidArgumentException('invalid length for $message_to_beneficiary when calling ConnectionOptionsForterAntiFraudCartItemsInnerBeneficiariesInnerComments., must be smaller than or equal to 600.');
        }

        $this->container['message_to_beneficiary'] = $message_to_beneficiary;

        return $this;
    }

    /**
     * Gets merchant_comments
     *
     * @return string|null
     */
    public function getMerchantComments()
    {
        return $this->container['merchant_comments'];
    }

    /**
     * Sets merchant_comments
     *
     * @param string|null $merchant_comments Comments by the merchant.
     *
     * @return self
     */
    public function setMerchantComments($merchant_comments)
    {
        if (!is_null($merchant_comments) && (mb_strlen($merchant_comments) > 600)) {
            throw new \InvalidArgumentException('invalid length for $merchant_comments when calling ConnectionOptionsForterAntiFraudCartItemsInnerBeneficiariesInnerComments., must be smaller than or equal to 600.');
        }

        $this->container['merchant_comments'] = $merchant_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


