<?php
/**
 * ConnectionOptionsForterAntiFraudTotalDiscount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * ConnectionOptionsForterAntiFraudTotalDiscount Class Doc Comment
 *
 * @category Class
 * @description The &#x60;totalDiscount&#x60; object that&#39;s sent to Forter&#39;s validation API. It represents the discount that was given to the customer.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ConnectionOptionsForterAntiFraudTotalDiscount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnectionOptions_forter_anti_fraud_total_discount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coupon_code_used' => 'string',
        'discount_type' => 'string',
        'coupon_discount_amount' => '\Gr4vy\model\ConnectionOptionsForterAntiFraudTotalDiscountCouponDiscountAmount',
        'coupon_discount_percent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'coupon_code_used' => null,
        'discount_type' => null,
        'coupon_discount_amount' => null,
        'coupon_discount_percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coupon_code_used' => 'coupon_code_used',
        'discount_type' => 'discount_type',
        'coupon_discount_amount' => 'coupon_discount_amount',
        'coupon_discount_percent' => 'coupon_discount_percent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coupon_code_used' => 'setCouponCodeUsed',
        'discount_type' => 'setDiscountType',
        'coupon_discount_amount' => 'setCouponDiscountAmount',
        'coupon_discount_percent' => 'setCouponDiscountPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coupon_code_used' => 'getCouponCodeUsed',
        'discount_type' => 'getDiscountType',
        'coupon_discount_amount' => 'getCouponDiscountAmount',
        'coupon_discount_percent' => 'getCouponDiscountPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coupon_code_used'] = $data['coupon_code_used'] ?? null;
        $this->container['discount_type'] = $data['discount_type'] ?? null;
        $this->container['coupon_discount_amount'] = $data['coupon_discount_amount'] ?? null;
        $this->container['coupon_discount_percent'] = $data['coupon_discount_percent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['coupon_code_used']) && (mb_strlen($this->container['coupon_code_used']) > 150)) {
            $invalidProperties[] = "invalid value for 'coupon_code_used', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['discount_type'] === null) {
            $invalidProperties[] = "'discount_type' can't be null";
        }
        if ((mb_strlen($this->container['discount_type']) > 250)) {
            $invalidProperties[] = "invalid value for 'discount_type', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coupon_code_used
     *
     * @return string|null
     */
    public function getCouponCodeUsed()
    {
        return $this->container['coupon_code_used'];
    }

    /**
     * Sets coupon_code_used
     *
     * @param string|null $coupon_code_used The coupon code used.
     *
     * @return self
     */
    public function setCouponCodeUsed($coupon_code_used)
    {
        if (!is_null($coupon_code_used) && (mb_strlen($coupon_code_used) > 150)) {
            throw new \InvalidArgumentException('invalid length for $coupon_code_used when calling ConnectionOptionsForterAntiFraudTotalDiscount., must be smaller than or equal to 150.');
        }

        $this->container['coupon_code_used'] = $coupon_code_used;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string $discount_type The discount type.
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        if ((mb_strlen($discount_type) > 250)) {
            throw new \InvalidArgumentException('invalid length for $discount_type when calling ConnectionOptionsForterAntiFraudTotalDiscount., must be smaller than or equal to 250.');
        }

        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets coupon_discount_amount
     *
     * @return \Gr4vy\model\ConnectionOptionsForterAntiFraudTotalDiscountCouponDiscountAmount|null
     */
    public function getCouponDiscountAmount()
    {
        return $this->container['coupon_discount_amount'];
    }

    /**
     * Sets coupon_discount_amount
     *
     * @param \Gr4vy\model\ConnectionOptionsForterAntiFraudTotalDiscountCouponDiscountAmount|null $coupon_discount_amount coupon_discount_amount
     *
     * @return self
     */
    public function setCouponDiscountAmount($coupon_discount_amount)
    {
        $this->container['coupon_discount_amount'] = $coupon_discount_amount;

        return $this;
    }

    /**
     * Gets coupon_discount_percent
     *
     * @return string|null
     */
    public function getCouponDiscountPercent()
    {
        return $this->container['coupon_discount_percent'];
    }

    /**
     * Sets coupon_discount_percent
     *
     * @param string|null $coupon_discount_percent Coupon discount percentage.
     *
     * @return self
     */
    public function setCouponDiscountPercent($coupon_discount_percent)
    {
        $this->container['coupon_discount_percent'] = $coupon_discount_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


