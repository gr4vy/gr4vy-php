<?php
/**
 * DigitalWallet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * DigitalWallet Class Doc Comment
 *
 * @category Class
 * @description A digital wallet (e.g. Apple Pay) that has been registered.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DigitalWallet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DigitalWallet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'merchant_account_id' => 'string',
        'provider' => 'string',
        'merchant_name' => 'string',
        'merchant_url' => 'string',
        'merchant_display_name' => 'string',
        'merchant_country_code' => 'string',
        'domain_names' => 'string[]',
        'fields' => '\Gr4vy\model\DigitalWalletClickToPayFields',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'active_certificate_count' => 'int',
        'pending_certificate_count' => 'int',
        'expired_certificate_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'uuid',
        'merchant_account_id' => null,
        'provider' => null,
        'merchant_name' => null,
        'merchant_url' => 'url',
        'merchant_display_name' => null,
        'merchant_country_code' => null,
        'domain_names' => null,
        'fields' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'active_certificate_count' => null,
        'pending_certificate_count' => null,
        'expired_certificate_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'merchant_account_id' => 'merchant_account_id',
        'provider' => 'provider',
        'merchant_name' => 'merchant_name',
        'merchant_url' => 'merchant_url',
        'merchant_display_name' => 'merchant_display_name',
        'merchant_country_code' => 'merchant_country_code',
        'domain_names' => 'domain_names',
        'fields' => 'fields',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'active_certificate_count' => 'active_certificate_count',
        'pending_certificate_count' => 'pending_certificate_count',
        'expired_certificate_count' => 'expired_certificate_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'merchant_account_id' => 'setMerchantAccountId',
        'provider' => 'setProvider',
        'merchant_name' => 'setMerchantName',
        'merchant_url' => 'setMerchantUrl',
        'merchant_display_name' => 'setMerchantDisplayName',
        'merchant_country_code' => 'setMerchantCountryCode',
        'domain_names' => 'setDomainNames',
        'fields' => 'setFields',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'active_certificate_count' => 'setActiveCertificateCount',
        'pending_certificate_count' => 'setPendingCertificateCount',
        'expired_certificate_count' => 'setExpiredCertificateCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'merchant_account_id' => 'getMerchantAccountId',
        'provider' => 'getProvider',
        'merchant_name' => 'getMerchantName',
        'merchant_url' => 'getMerchantUrl',
        'merchant_display_name' => 'getMerchantDisplayName',
        'merchant_country_code' => 'getMerchantCountryCode',
        'domain_names' => 'getDomainNames',
        'fields' => 'getFields',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'active_certificate_count' => 'getActiveCertificateCount',
        'pending_certificate_count' => 'getPendingCertificateCount',
        'expired_certificate_count' => 'getExpiredCertificateCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DIGITAL_WALLET = 'digital-wallet';
    public const PROVIDER_APPLE = 'apple';
    public const PROVIDER_GOOGLE = 'google';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DIGITAL_WALLET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_APPLE,
            self::PROVIDER_GOOGLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['merchant_account_id'] = $data['merchant_account_id'] ?? null;
        $this->container['provider'] = $data['provider'] ?? null;
        $this->container['merchant_name'] = $data['merchant_name'] ?? null;
        $this->container['merchant_url'] = $data['merchant_url'] ?? null;
        $this->container['merchant_display_name'] = $data['merchant_display_name'] ?? null;
        $this->container['merchant_country_code'] = $data['merchant_country_code'] ?? null;
        $this->container['domain_names'] = $data['domain_names'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['active_certificate_count'] = $data['active_certificate_count'] ?? null;
        $this->container['pending_certificate_count'] = $data['pending_certificate_count'] ?? null;
        $this->container['expired_certificate_count'] = $data['expired_certificate_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provider', must be one of '%s'",
                $this->container['provider'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['merchant_country_code']) && (mb_strlen($this->container['merchant_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'merchant_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['merchant_country_code']) && (mb_strlen($this->container['merchant_country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'merchant_country_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['domain_names']) && (count($this->container['domain_names']) > 99)) {
            $invalidProperties[] = "invalid value for 'domain_names', number of items must be less than or equal to 99.";
        }

        if (!is_null($this->container['domain_names']) && (count($this->container['domain_names']) < 1)) {
            $invalidProperties[] = "invalid value for 'domain_names', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type `digital-wallet`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the registered digital wallet.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_account_id
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchant_account_id'];
    }

    /**
     * Sets merchant_account_id
     *
     * @param string|null $merchant_account_id The unique ID for a merchant account.
     *
     * @return self
     */
    public function setMerchantAccountId($merchant_account_id)
    {
        $this->container['merchant_account_id'] = $merchant_account_id;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider The name of the digital wallet provider.
     *
     * @return self
     */
    public function setProvider($provider)
    {
        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($provider) && !in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provider', must be one of '%s'",
                    $provider,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name The name of the merchant the digital wallet is registered to.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_url
     *
     * @return string|null
     */
    public function getMerchantUrl()
    {
        return $this->container['merchant_url'];
    }

    /**
     * Sets merchant_url
     *
     * @param string|null $merchant_url The main URL of the merchant.
     *
     * @return self
     */
    public function setMerchantUrl($merchant_url)
    {
        $this->container['merchant_url'] = $merchant_url;

        return $this;
    }

    /**
     * Gets merchant_display_name
     *
     * @return string|null
     */
    public function getMerchantDisplayName()
    {
        return $this->container['merchant_display_name'];
    }

    /**
     * Sets merchant_display_name
     *
     * @param string|null $merchant_display_name The consumer facing name of the merchant.
     *
     * @return self
     */
    public function setMerchantDisplayName($merchant_display_name)
    {
        $this->container['merchant_display_name'] = $merchant_display_name;

        return $this;
    }

    /**
     * Gets merchant_country_code
     *
     * @return string|null
     */
    public function getMerchantCountryCode()
    {
        return $this->container['merchant_country_code'];
    }

    /**
     * Sets merchant_country_code
     *
     * @param string|null $merchant_country_code The country code where the merchant is registered.
     *
     * @return self
     */
    public function setMerchantCountryCode($merchant_country_code)
    {
        if (!is_null($merchant_country_code) && (mb_strlen($merchant_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $merchant_country_code when calling DigitalWallet., must be smaller than or equal to 2.');
        }
        if (!is_null($merchant_country_code) && (mb_strlen($merchant_country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $merchant_country_code when calling DigitalWallet., must be bigger than or equal to 2.');
        }

        $this->container['merchant_country_code'] = $merchant_country_code;

        return $this;
    }

    /**
     * Gets domain_names
     *
     * @return string[]|null
     */
    public function getDomainNames()
    {
        return $this->container['domain_names'];
    }

    /**
     * Sets domain_names
     *
     * @param string[]|null $domain_names The list of domain names that a digital wallet can be used on. To use a digital wallet on a website, the domain of the site is required to be in this list.
     *
     * @return self
     */
    public function setDomainNames($domain_names)
    {

        if (!is_null($domain_names) && (count($domain_names) > 99)) {
            throw new \InvalidArgumentException('invalid value for $domain_names when calling DigitalWallet., number of items must be less than or equal to 99.');
        }
        if (!is_null($domain_names) && (count($domain_names) < 1)) {
            throw new \InvalidArgumentException('invalid length for $domain_names when calling DigitalWallet., number of items must be greater than or equal to 1.');
        }
        $this->container['domain_names'] = $domain_names;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Gr4vy\model\DigitalWalletClickToPayFields|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Gr4vy\model\DigitalWalletClickToPayFields|null $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when this digital wallet was registered.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time when this digital wallet was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets active_certificate_count
     *
     * @return int|null
     */
    public function getActiveCertificateCount()
    {
        return $this->container['active_certificate_count'];
    }

    /**
     * Sets active_certificate_count
     *
     * @param int|null $active_certificate_count The number of active custom certificates registered for this digital wallet (Apple Pay only).
     *
     * @return self
     */
    public function setActiveCertificateCount($active_certificate_count)
    {
        $this->container['active_certificate_count'] = $active_certificate_count;

        return $this;
    }

    /**
     * Gets pending_certificate_count
     *
     * @return int|null
     */
    public function getPendingCertificateCount()
    {
        return $this->container['pending_certificate_count'];
    }

    /**
     * Sets pending_certificate_count
     *
     * @param int|null $pending_certificate_count The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     *
     * @return self
     */
    public function setPendingCertificateCount($pending_certificate_count)
    {
        $this->container['pending_certificate_count'] = $pending_certificate_count;

        return $this;
    }

    /**
     * Gets expired_certificate_count
     *
     * @return int|null
     */
    public function getExpiredCertificateCount()
    {
        return $this->container['expired_certificate_count'];
    }

    /**
     * Sets expired_certificate_count
     *
     * @param int|null $expired_certificate_count The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     *
     * @return self
     */
    public function setExpiredCertificateCount($expired_certificate_count)
    {
        $this->container['expired_certificate_count'] = $expired_certificate_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


