<?php
/**
 * DigitalWalletClickToPayTokenDecryptedContext
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * DigitalWalletClickToPayTokenDecryptedContext Class Doc Comment
 *
 * @category Class
 * @description Click to Pay decrypted token context.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DigitalWalletClickToPayTokenDecryptedContext implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DigitalWalletClickToPayTokenDecrypted_context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'correlation_id' => 'string',
        'merchant_transaction_id' => 'string',
        'type' => 'string',
        'expiration_date' => 'string',
        'has_cryptogram' => 'bool',
        'cardholder_name' => 'string',
        'card_bin' => 'string',
        'card_last_four' => 'string',
        'card_expiration_date' => 'string',
        'card_type' => 'string',
        'billing_line1' => 'string',
        'billing_line2' => 'string',
        'billing_city' => 'string',
        'billing_state' => 'string',
        'billing_zip' => 'string',
        'billing_country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'correlation_id' => null,
        'merchant_transaction_id' => null,
        'type' => null,
        'expiration_date' => null,
        'has_cryptogram' => null,
        'cardholder_name' => null,
        'card_bin' => null,
        'card_last_four' => null,
        'card_expiration_date' => null,
        'card_type' => null,
        'billing_line1' => null,
        'billing_line2' => null,
        'billing_city' => null,
        'billing_state' => null,
        'billing_zip' => null,
        'billing_country_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'correlation_id' => 'correlation_id',
        'merchant_transaction_id' => 'merchant_transaction_id',
        'type' => 'type',
        'expiration_date' => 'expiration_date',
        'has_cryptogram' => 'has_cryptogram',
        'cardholder_name' => 'cardholder_name',
        'card_bin' => 'card_bin',
        'card_last_four' => 'card_last_four',
        'card_expiration_date' => 'card_expiration_date',
        'card_type' => 'card_type',
        'billing_line1' => 'billing_line1',
        'billing_line2' => 'billing_line2',
        'billing_city' => 'billing_city',
        'billing_state' => 'billing_state',
        'billing_zip' => 'billing_zip',
        'billing_country_code' => 'billing_country_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'correlation_id' => 'setCorrelationId',
        'merchant_transaction_id' => 'setMerchantTransactionId',
        'type' => 'setType',
        'expiration_date' => 'setExpirationDate',
        'has_cryptogram' => 'setHasCryptogram',
        'cardholder_name' => 'setCardholderName',
        'card_bin' => 'setCardBin',
        'card_last_four' => 'setCardLastFour',
        'card_expiration_date' => 'setCardExpirationDate',
        'card_type' => 'setCardType',
        'billing_line1' => 'setBillingLine1',
        'billing_line2' => 'setBillingLine2',
        'billing_city' => 'setBillingCity',
        'billing_state' => 'setBillingState',
        'billing_zip' => 'setBillingZip',
        'billing_country_code' => 'setBillingCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'correlation_id' => 'getCorrelationId',
        'merchant_transaction_id' => 'getMerchantTransactionId',
        'type' => 'getType',
        'expiration_date' => 'getExpirationDate',
        'has_cryptogram' => 'getHasCryptogram',
        'cardholder_name' => 'getCardholderName',
        'card_bin' => 'getCardBin',
        'card_last_four' => 'getCardLastFour',
        'card_expiration_date' => 'getCardExpirationDate',
        'card_type' => 'getCardType',
        'billing_line1' => 'getBillingLine1',
        'billing_line2' => 'getBillingLine2',
        'billing_city' => 'getBillingCity',
        'billing_state' => 'getBillingState',
        'billing_zip' => 'getBillingZip',
        'billing_country_code' => 'getBillingCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DPAN = 'dpan';
    public const TYPE_FPAN = 'fpan';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DPAN,
            self::TYPE_FPAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['correlation_id'] = $data['correlation_id'] ?? null;
        $this->container['merchant_transaction_id'] = $data['merchant_transaction_id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['has_cryptogram'] = $data['has_cryptogram'] ?? null;
        $this->container['cardholder_name'] = $data['cardholder_name'] ?? null;
        $this->container['card_bin'] = $data['card_bin'] ?? null;
        $this->container['card_last_four'] = $data['card_last_four'] ?? null;
        $this->container['card_expiration_date'] = $data['card_expiration_date'] ?? null;
        $this->container['card_type'] = $data['card_type'] ?? null;
        $this->container['billing_line1'] = $data['billing_line1'] ?? null;
        $this->container['billing_line2'] = $data['billing_line2'] ?? null;
        $this->container['billing_city'] = $data['billing_city'] ?? null;
        $this->container['billing_state'] = $data['billing_state'] ?? null;
        $this->container['billing_zip'] = $data['billing_zip'] ?? null;
        $this->container['billing_country_code'] = $data['billing_country_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id Correlation ID for transaction.
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets merchant_transaction_id
     *
     * @return string|null
     */
    public function getMerchantTransactionId()
    {
        return $this->container['merchant_transaction_id'];
    }

    /**
     * Sets merchant_transaction_id
     *
     * @param string|null $merchant_transaction_id Merchant Checkout Transaction Identifier which links the client-side JavaScript calls and server-side API calls for a specific transaction.
     *
     * @return self
     */
    public function setMerchantTransactionId($merchant_transaction_id)
    {
        $this->container['merchant_transaction_id'] = $merchant_transaction_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of payment instrument.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date Expiration of the card/token.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets has_cryptogram
     *
     * @return bool|null
     */
    public function getHasCryptogram()
    {
        return $this->container['has_cryptogram'];
    }

    /**
     * Sets has_cryptogram
     *
     * @param bool|null $has_cryptogram Online payment cryptogram, as defined by 3-D Secure.
     *
     * @return self
     */
    public function setHasCryptogram($has_cryptogram)
    {
        $this->container['has_cryptogram'] = $has_cryptogram;

        return $this;
    }

    /**
     * Gets cardholder_name
     *
     * @return string|null
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string|null $cardholder_name The cardholder name.
     *
     * @return self
     */
    public function setCardholderName($cardholder_name)
    {
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets card_bin
     *
     * @return string|null
     */
    public function getCardBin()
    {
        return $this->container['card_bin'];
    }

    /**
     * Sets card_bin
     *
     * @param string|null $card_bin First six digits of underlying card.
     *
     * @return self
     */
    public function setCardBin($card_bin)
    {
        $this->container['card_bin'] = $card_bin;

        return $this;
    }

    /**
     * Gets card_last_four
     *
     * @return string|null
     */
    public function getCardLastFour()
    {
        return $this->container['card_last_four'];
    }

    /**
     * Sets card_last_four
     *
     * @param string|null $card_last_four Last four digits of underlying card.
     *
     * @return self
     */
    public function setCardLastFour($card_last_four)
    {
        $this->container['card_last_four'] = $card_last_four;

        return $this;
    }

    /**
     * Gets card_expiration_date
     *
     * @return string|null
     */
    public function getCardExpirationDate()
    {
        return $this->container['card_expiration_date'];
    }

    /**
     * Sets card_expiration_date
     *
     * @param string|null $card_expiration_date Expiration date of underlying card.
     *
     * @return self
     */
    public function setCardExpirationDate($card_expiration_date)
    {
        $this->container['card_expiration_date'] = $card_expiration_date;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type Card type.
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets billing_line1
     *
     * @return string|null
     */
    public function getBillingLine1()
    {
        return $this->container['billing_line1'];
    }

    /**
     * Sets billing_line1
     *
     * @param string|null $billing_line1 Address line 1.
     *
     * @return self
     */
    public function setBillingLine1($billing_line1)
    {
        $this->container['billing_line1'] = $billing_line1;

        return $this;
    }

    /**
     * Gets billing_line2
     *
     * @return string|null
     */
    public function getBillingLine2()
    {
        return $this->container['billing_line2'];
    }

    /**
     * Sets billing_line2
     *
     * @param string|null $billing_line2 Address line 2.
     *
     * @return self
     */
    public function setBillingLine2($billing_line2)
    {
        $this->container['billing_line2'] = $billing_line2;

        return $this;
    }

    /**
     * Gets billing_city
     *
     * @return string|null
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     *
     * @param string|null $billing_city Address city.
     *
     * @return self
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_state
     *
     * @return string|null
     */
    public function getBillingState()
    {
        return $this->container['billing_state'];
    }

    /**
     * Sets billing_state
     *
     * @param string|null $billing_state Address state.
     *
     * @return self
     */
    public function setBillingState($billing_state)
    {
        $this->container['billing_state'] = $billing_state;

        return $this;
    }

    /**
     * Gets billing_zip
     *
     * @return string|null
     */
    public function getBillingZip()
    {
        return $this->container['billing_zip'];
    }

    /**
     * Sets billing_zip
     *
     * @param string|null $billing_zip Address zip/postal code.
     *
     * @return self
     */
    public function setBillingZip($billing_zip)
    {
        $this->container['billing_zip'] = $billing_zip;

        return $this;
    }

    /**
     * Gets billing_country_code
     *
     * @return string|null
     */
    public function getBillingCountryCode()
    {
        return $this->container['billing_country_code'];
    }

    /**
     * Sets billing_country_code
     *
     * @param string|null $billing_country_code ISO 3166-1 alpha 2 address country code.
     *
     * @return self
     */
    public function setBillingCountryCode($billing_country_code)
    {
        $this->container['billing_country_code'] = $billing_country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


