<?php
/**
 * GiftCardRedemption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * GiftCardRedemption Class Doc Comment
 *
 * @category Class
 * @description A redemption of a gift card used in a transaction.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GiftCardRedemption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GiftCardRedemption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'status' => 'string',
        'amount' => 'int',
        'refunded_amount' => 'int',
        'gift_card_service_redemption_id' => 'string',
        'error_code' => 'string',
        'raw_error_code' => 'string',
        'raw_error_message' => 'string',
        'gift_card' => '\Gr4vy\model\GiftCardSnapshot'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'uuid',
        'status' => null,
        'amount' => null,
        'refunded_amount' => null,
        'gift_card_service_redemption_id' => null,
        'error_code' => null,
        'raw_error_code' => null,
        'raw_error_message' => null,
        'gift_card' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'status' => 'status',
        'amount' => 'amount',
        'refunded_amount' => 'refunded_amount',
        'gift_card_service_redemption_id' => 'gift_card_service_redemption_id',
        'error_code' => 'error_code',
        'raw_error_code' => 'raw_error_code',
        'raw_error_message' => 'raw_error_message',
        'gift_card' => 'gift_card'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'refunded_amount' => 'setRefundedAmount',
        'gift_card_service_redemption_id' => 'setGiftCardServiceRedemptionId',
        'error_code' => 'setErrorCode',
        'raw_error_code' => 'setRawErrorCode',
        'raw_error_message' => 'setRawErrorMessage',
        'gift_card' => 'setGiftCard'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'refunded_amount' => 'getRefundedAmount',
        'gift_card_service_redemption_id' => 'getGiftCardServiceRedemptionId',
        'error_code' => 'getErrorCode',
        'raw_error_code' => 'getRawErrorCode',
        'raw_error_message' => 'getRawErrorMessage',
        'gift_card' => 'getGiftCard'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_GIFT_CARD_REDEMPTION = 'gift-card-redemption';
    public const STATUS_SUCCEEDED = 'succeeded';
    public const STATUS_FAILED = 'failed';
    public const STATUS_SKIPPED = 'skipped';
    public const ERROR_CODE_EXPIRED_CARD = 'expired_card';
    public const ERROR_CODE_INACTIVE_CARD = 'inactive_card';
    public const ERROR_CODE_INCORRECT_CURRENCY = 'incorrect_currency';
    public const ERROR_CODE_INSUFFICIENT_FUNDS = 'insufficient_funds';
    public const ERROR_CODE_INVALID_AMOUNT = 'invalid_amount';
    public const ERROR_CODE_INVALID_GIFT_CARD = 'invalid_gift_card';
    public const ERROR_CODE_INVALID_SERVICE_CONFIGURATION = 'invalid_service_configuration';
    public const ERROR_CODE_INVALID_SERVICE_CREDENTIALS = 'invalid_service_credentials';
    public const ERROR_CODE_OPERATION_CANCELED = 'operation_canceled';
    public const ERROR_CODE_SERVICE_ERROR = 'service_error';
    public const ERROR_CODE_SERVICE_NETWORK_ERROR = 'service_network_error';
    public const ERROR_CODE_UNKNOWN_ERROR = 'unknown_error';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GIFT_CARD_REDEMPTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCEEDED,
            self::STATUS_FAILED,
            self::STATUS_SKIPPED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorCodeAllowableValues()
    {
        return [
            self::ERROR_CODE_EXPIRED_CARD,
            self::ERROR_CODE_INACTIVE_CARD,
            self::ERROR_CODE_INCORRECT_CURRENCY,
            self::ERROR_CODE_INSUFFICIENT_FUNDS,
            self::ERROR_CODE_INVALID_AMOUNT,
            self::ERROR_CODE_INVALID_GIFT_CARD,
            self::ERROR_CODE_INVALID_SERVICE_CONFIGURATION,
            self::ERROR_CODE_INVALID_SERVICE_CREDENTIALS,
            self::ERROR_CODE_OPERATION_CANCELED,
            self::ERROR_CODE_SERVICE_ERROR,
            self::ERROR_CODE_SERVICE_NETWORK_ERROR,
            self::ERROR_CODE_UNKNOWN_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['refunded_amount'] = $data['refunded_amount'] ?? null;
        $this->container['gift_card_service_redemption_id'] = $data['gift_card_service_redemption_id'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
        $this->container['raw_error_code'] = $data['raw_error_code'] ?? null;
        $this->container['raw_error_message'] = $data['raw_error_message'] ?? null;
        $this->container['gift_card'] = $data['gift_card'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['refunded_amount']) && ($this->container['refunded_amount'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'refunded_amount', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['refunded_amount']) && ($this->container['refunded_amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'refunded_amount', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($this->container['error_code']) && !in_array($this->container['error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error_code', must be one of '%s'",
                $this->container['error_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of this resource.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of this gift card redemption. This may be `null` if the no redemption happened.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the gift card redemption for the `payment_method`.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The amount redeemed for this gift card.
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (!is_null($amount) && ($amount > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling GiftCardRedemption., must be smaller than or equal to 99999999.');
        }
        if (!is_null($amount) && ($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling GiftCardRedemption., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return int|null
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param int|null $refunded_amount The amount refunded for this gift card. This can not be larger than `amount`.
     *
     * @return self
     */
    public function setRefundedAmount($refunded_amount)
    {

        if (!is_null($refunded_amount) && ($refunded_amount > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $refunded_amount when calling GiftCardRedemption., must be smaller than or equal to 99999999.');
        }
        if (!is_null($refunded_amount) && ($refunded_amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $refunded_amount when calling GiftCardRedemption., must be bigger than or equal to 1.');
        }

        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets gift_card_service_redemption_id
     *
     * @return string|null
     */
    public function getGiftCardServiceRedemptionId()
    {
        return $this->container['gift_card_service_redemption_id'];
    }

    /**
     * Sets gift_card_service_redemption_id
     *
     * @param string|null $gift_card_service_redemption_id The gift card service's unique ID for the redemption.
     *
     * @return self
     */
    public function setGiftCardServiceRedemptionId($gift_card_service_redemption_id)
    {
        $this->container['gift_card_service_redemption_id'] = $gift_card_service_redemption_id;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code If this gift card redemption resulted in an error, this will contain the internal code for the error.
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($error_code) && !in_array($error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error_code', must be one of '%s'",
                    $error_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets raw_error_code
     *
     * @return string|null
     */
    public function getRawErrorCode()
    {
        return $this->container['raw_error_code'];
    }

    /**
     * Sets raw_error_code
     *
     * @param string|null $raw_error_code If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
     *
     * @return self
     */
    public function setRawErrorCode($raw_error_code)
    {
        $this->container['raw_error_code'] = $raw_error_code;

        return $this;
    }

    /**
     * Gets raw_error_message
     *
     * @return string|null
     */
    public function getRawErrorMessage()
    {
        return $this->container['raw_error_message'];
    }

    /**
     * Sets raw_error_message
     *
     * @param string|null $raw_error_message If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
     *
     * @return self
     */
    public function setRawErrorMessage($raw_error_message)
    {
        $this->container['raw_error_message'] = $raw_error_message;

        return $this;
    }

    /**
     * Gets gift_card
     *
     * @return \Gr4vy\model\GiftCardSnapshot|null
     */
    public function getGiftCard()
    {
        return $this->container['gift_card'];
    }

    /**
     * Sets gift_card
     *
     * @param \Gr4vy\model\GiftCardSnapshot|null $gift_card gift_card
     *
     * @return self
     */
    public function setGiftCard($gift_card)
    {
        $this->container['gift_card'] = $gift_card;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


