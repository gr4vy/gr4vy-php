<?php
/**
 * GiftCardServiceVerifyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * GiftCardServiceVerifyRequest Class Doc Comment
 *
 * @category Class
 * @description Request body for verifying credentials against a gift card service.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GiftCardServiceVerifyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GiftCardServiceVerifyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gift_card_service_definition_id' => 'string',
        'gift_card_service_id' => 'string',
        'fields' => '\Gr4vy\model\GiftCardServiceVerifyRequestFieldsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gift_card_service_definition_id' => null,
        'gift_card_service_id' => 'uuid',
        'fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gift_card_service_definition_id' => 'gift_card_service_definition_id',
        'gift_card_service_id' => 'gift_card_service_id',
        'fields' => 'fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gift_card_service_definition_id' => 'setGiftCardServiceDefinitionId',
        'gift_card_service_id' => 'setGiftCardServiceId',
        'fields' => 'setFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gift_card_service_definition_id' => 'getGiftCardServiceDefinitionId',
        'gift_card_service_id' => 'getGiftCardServiceId',
        'fields' => 'getFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gift_card_service_definition_id'] = $data['gift_card_service_definition_id'] ?? null;
        $this->container['gift_card_service_id'] = $data['gift_card_service_id'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['gift_card_service_definition_id'] === null) {
            $invalidProperties[] = "'gift_card_service_definition_id' can't be null";
        }
        if ((mb_strlen($this->container['gift_card_service_definition_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'gift_card_service_definition_id', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['gift_card_service_definition_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'gift_card_service_definition_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fields'] === null) {
            $invalidProperties[] = "'fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gift_card_service_definition_id
     *
     * @return string
     */
    public function getGiftCardServiceDefinitionId()
    {
        return $this->container['gift_card_service_definition_id'];
    }

    /**
     * Sets gift_card_service_definition_id
     *
     * @param string $gift_card_service_definition_id The ID of the gift card service to use.
     *
     * @return self
     */
    public function setGiftCardServiceDefinitionId($gift_card_service_definition_id)
    {
        if ((mb_strlen($gift_card_service_definition_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $gift_card_service_definition_id when calling GiftCardServiceVerifyRequest., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($gift_card_service_definition_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gift_card_service_definition_id when calling GiftCardServiceVerifyRequest., must be bigger than or equal to 1.');
        }

        $this->container['gift_card_service_definition_id'] = $gift_card_service_definition_id;

        return $this;
    }

    /**
     * Gets gift_card_service_id
     *
     * @return string|null
     */
    public function getGiftCardServiceId()
    {
        return $this->container['gift_card_service_id'];
    }

    /**
     * Sets gift_card_service_id
     *
     * @param string|null $gift_card_service_id The ID of the gift card service. Required if sending a partial set of credentials in the `fields` property. This will merge the provided fields with those already on the service.
     *
     * @return self
     */
    public function setGiftCardServiceId($gift_card_service_id)
    {
        $this->container['gift_card_service_id'] = $gift_card_service_id;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Gr4vy\model\GiftCardServiceVerifyRequestFieldsInner[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Gr4vy\model\GiftCardServiceVerifyRequestFieldsInner[] $fields A list of fields where each field is a key-value pair that represents a defined field in the definition of the service. You are not required to send the full list of fields if the credentials for the service are already stored. For example, if your credentials for `qwikcilver-gift-card` are stored and you only provide a `secret_key` in the request, it will override the stored `secret_key` and verify the resulting set of credentials against the service.
     *
     * @return self
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


