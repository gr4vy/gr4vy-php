<?php
/**
 * GiftCardSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * GiftCardSummary Class Doc Comment
 *
 * @category Class
 * @description A gift card stored for a buyer.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GiftCardSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GiftCard--Summary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'merchant_account_id' => 'string',
        'bin' => 'string',
        'sub_bin' => 'string',
        'last4' => 'string',
        'expiration_date' => '\DateTime',
        'balance' => 'int',
        'currency' => 'string',
        'balance_error_code' => 'string',
        'balance_raw_error_code' => 'string',
        'balance_raw_error_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'uuid',
        'merchant_account_id' => null,
        'bin' => null,
        'sub_bin' => null,
        'last4' => null,
        'expiration_date' => 'date-time',
        'balance' => null,
        'currency' => null,
        'balance_error_code' => null,
        'balance_raw_error_code' => null,
        'balance_raw_error_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'merchant_account_id' => 'merchant_account_id',
        'bin' => 'bin',
        'sub_bin' => 'sub_bin',
        'last4' => 'last4',
        'expiration_date' => 'expiration_date',
        'balance' => 'balance',
        'currency' => 'currency',
        'balance_error_code' => 'balance_error_code',
        'balance_raw_error_code' => 'balance_raw_error_code',
        'balance_raw_error_message' => 'balance_raw_error_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'merchant_account_id' => 'setMerchantAccountId',
        'bin' => 'setBin',
        'sub_bin' => 'setSubBin',
        'last4' => 'setLast4',
        'expiration_date' => 'setExpirationDate',
        'balance' => 'setBalance',
        'currency' => 'setCurrency',
        'balance_error_code' => 'setBalanceErrorCode',
        'balance_raw_error_code' => 'setBalanceRawErrorCode',
        'balance_raw_error_message' => 'setBalanceRawErrorMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'merchant_account_id' => 'getMerchantAccountId',
        'bin' => 'getBin',
        'sub_bin' => 'getSubBin',
        'last4' => 'getLast4',
        'expiration_date' => 'getExpirationDate',
        'balance' => 'getBalance',
        'currency' => 'getCurrency',
        'balance_error_code' => 'getBalanceErrorCode',
        'balance_raw_error_code' => 'getBalanceRawErrorCode',
        'balance_raw_error_message' => 'getBalanceRawErrorMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_GIFT_CARD = 'gift-card';
    public const BALANCE_ERROR_CODE_EXPIRED_CARD = 'expired_card';
    public const BALANCE_ERROR_CODE_INACTIVE_CARD = 'inactive_card';
    public const BALANCE_ERROR_CODE_INCORRECT_CURRENCY = 'incorrect_currency';
    public const BALANCE_ERROR_CODE_INSUFFICIENT_FUNDS = 'insufficient_funds';
    public const BALANCE_ERROR_CODE_INVALID_AMOUNT = 'invalid_amount';
    public const BALANCE_ERROR_CODE_INVALID_GIFT_CARD = 'invalid_gift_card';
    public const BALANCE_ERROR_CODE_INVALID_SERVICE_CONFIGURATION = 'invalid_service_configuration';
    public const BALANCE_ERROR_CODE_INVALID_SERVICE_CREDENTIALS = 'invalid_service_credentials';
    public const BALANCE_ERROR_CODE_OPERATION_CANCELED = 'operation_canceled';
    public const BALANCE_ERROR_CODE_SERVICE_ERROR = 'service_error';
    public const BALANCE_ERROR_CODE_SERVICE_NETWORK_ERROR = 'service_network_error';
    public const BALANCE_ERROR_CODE_UNKNOWN_ERROR = 'unknown_error';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GIFT_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalanceErrorCodeAllowableValues()
    {
        return [
            self::BALANCE_ERROR_CODE_EXPIRED_CARD,
            self::BALANCE_ERROR_CODE_INACTIVE_CARD,
            self::BALANCE_ERROR_CODE_INCORRECT_CURRENCY,
            self::BALANCE_ERROR_CODE_INSUFFICIENT_FUNDS,
            self::BALANCE_ERROR_CODE_INVALID_AMOUNT,
            self::BALANCE_ERROR_CODE_INVALID_GIFT_CARD,
            self::BALANCE_ERROR_CODE_INVALID_SERVICE_CONFIGURATION,
            self::BALANCE_ERROR_CODE_INVALID_SERVICE_CREDENTIALS,
            self::BALANCE_ERROR_CODE_OPERATION_CANCELED,
            self::BALANCE_ERROR_CODE_SERVICE_ERROR,
            self::BALANCE_ERROR_CODE_SERVICE_NETWORK_ERROR,
            self::BALANCE_ERROR_CODE_UNKNOWN_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['merchant_account_id'] = $data['merchant_account_id'] ?? null;
        $this->container['bin'] = $data['bin'] ?? null;
        $this->container['sub_bin'] = $data['sub_bin'] ?? null;
        $this->container['last4'] = $data['last4'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['balance_error_code'] = $data['balance_error_code'] ?? null;
        $this->container['balance_raw_error_code'] = $data['balance_raw_error_code'] ?? null;
        $this->container['balance_raw_error_message'] = $data['balance_raw_error_message'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['balance']) && ($this->container['balance'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'balance', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['balance']) && ($this->container['balance'] < 0)) {
            $invalidProperties[] = "invalid value for 'balance', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBalanceErrorCodeAllowableValues();
        if (!is_null($this->container['balance_error_code']) && !in_array($this->container['balance_error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'balance_error_code', must be one of '%s'",
                $this->container['balance_error_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of this resource.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of this gift card.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_account_id
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchant_account_id'];
    }

    /**
     * Sets merchant_account_id
     *
     * @param string|null $merchant_account_id The unique ID for a merchant account.
     *
     * @return self
     */
    public function setMerchantAccountId($merchant_account_id)
    {
        $this->container['merchant_account_id'] = $merchant_account_id;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin The first 6 digits of the full gift card number.
     *
     * @return self
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets sub_bin
     *
     * @return string|null
     */
    public function getSubBin()
    {
        return $this->container['sub_bin'];
    }

    /**
     * Sets sub_bin
     *
     * @param string|null $sub_bin The 3 digits after the `bin` of the full gift card number.
     *
     * @return self
     */
    public function setSubBin($sub_bin)
    {
        $this->container['sub_bin'] = $sub_bin;

        return $this;
    }

    /**
     * Gets last4
     *
     * @return string|null
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     *
     * @param string|null $last4 The last 4 digits for the gift card.
     *
     * @return self
     */
    public function setLast4($last4)
    {
        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
     *
     * @return self
     */
    public function setBalance($balance)
    {

        if (!is_null($balance) && ($balance > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling GiftCardSummary., must be smaller than or equal to 99999999.');
        }
        if (!is_null($balance) && ($balance < 0)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling GiftCardSummary., must be bigger than or equal to 0.');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The ISO-4217 currency code that this gift card has a balance for.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets balance_error_code
     *
     * @return string|null
     */
    public function getBalanceErrorCode()
    {
        return $this->container['balance_error_code'];
    }

    /**
     * Sets balance_error_code
     *
     * @param string|null $balance_error_code If the last balance update failed, this will contain the internal code for this error.
     *
     * @return self
     */
    public function setBalanceErrorCode($balance_error_code)
    {
        $allowedValues = $this->getBalanceErrorCodeAllowableValues();
        if (!is_null($balance_error_code) && !in_array($balance_error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'balance_error_code', must be one of '%s'",
                    $balance_error_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['balance_error_code'] = $balance_error_code;

        return $this;
    }

    /**
     * Gets balance_raw_error_code
     *
     * @return string|null
     */
    public function getBalanceRawErrorCode()
    {
        return $this->container['balance_raw_error_code'];
    }

    /**
     * Sets balance_raw_error_code
     *
     * @param string|null $balance_raw_error_code If the last balance update failed, this will contain the the raw error code received from the gift card provider.
     *
     * @return self
     */
    public function setBalanceRawErrorCode($balance_raw_error_code)
    {
        $this->container['balance_raw_error_code'] = $balance_raw_error_code;

        return $this;
    }

    /**
     * Gets balance_raw_error_message
     *
     * @return string|null
     */
    public function getBalanceRawErrorMessage()
    {
        return $this->container['balance_raw_error_message'];
    }

    /**
     * Sets balance_raw_error_message
     *
     * @param string|null $balance_raw_error_message If the last balance update failed, this will contain the the raw error message received from the gift card provider.
     *
     * @return self
     */
    public function setBalanceRawErrorMessage($balance_raw_error_message)
    {
        $this->container['balance_raw_error_message'] = $balance_raw_error_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


