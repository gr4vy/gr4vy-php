<?php
/**
 * MerchantAccountCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * MerchantAccountCreate Class Doc Comment
 *
 * @category Class
 * @description A request to create a merchant account.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MerchantAccountCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantAccountCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'display_name' => 'string',
        'outbound_webhook_url' => 'string',
        'outbound_webhook_username' => 'string',
        'outbound_webhook_password' => 'string',
        'visa_network_tokens_requestor_id' => 'string',
        'visa_network_tokens_app_id' => 'string',
        'amex_network_tokens_requestor_id' => 'string',
        'amex_network_tokens_app_id' => 'string',
        'mastercard_network_tokens_requestor_id' => 'string',
        'mastercard_network_tokens_app_id' => 'string',
        'loon_client_key' => 'string',
        'loon_secret_key' => 'string',
        'loon_accepted_schemes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'display_name' => null,
        'outbound_webhook_url' => null,
        'outbound_webhook_username' => null,
        'outbound_webhook_password' => null,
        'visa_network_tokens_requestor_id' => null,
        'visa_network_tokens_app_id' => null,
        'amex_network_tokens_requestor_id' => null,
        'amex_network_tokens_app_id' => null,
        'mastercard_network_tokens_requestor_id' => null,
        'mastercard_network_tokens_app_id' => null,
        'loon_client_key' => null,
        'loon_secret_key' => null,
        'loon_accepted_schemes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_name' => 'display_name',
        'outbound_webhook_url' => 'outbound_webhook_url',
        'outbound_webhook_username' => 'outbound_webhook_username',
        'outbound_webhook_password' => 'outbound_webhook_password',
        'visa_network_tokens_requestor_id' => 'visa_network_tokens_requestor_id',
        'visa_network_tokens_app_id' => 'visa_network_tokens_app_id',
        'amex_network_tokens_requestor_id' => 'amex_network_tokens_requestor_id',
        'amex_network_tokens_app_id' => 'amex_network_tokens_app_id',
        'mastercard_network_tokens_requestor_id' => 'mastercard_network_tokens_requestor_id',
        'mastercard_network_tokens_app_id' => 'mastercard_network_tokens_app_id',
        'loon_client_key' => 'loon_client_key',
        'loon_secret_key' => 'loon_secret_key',
        'loon_accepted_schemes' => 'loon_accepted_schemes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'outbound_webhook_url' => 'setOutboundWebhookUrl',
        'outbound_webhook_username' => 'setOutboundWebhookUsername',
        'outbound_webhook_password' => 'setOutboundWebhookPassword',
        'visa_network_tokens_requestor_id' => 'setVisaNetworkTokensRequestorId',
        'visa_network_tokens_app_id' => 'setVisaNetworkTokensAppId',
        'amex_network_tokens_requestor_id' => 'setAmexNetworkTokensRequestorId',
        'amex_network_tokens_app_id' => 'setAmexNetworkTokensAppId',
        'mastercard_network_tokens_requestor_id' => 'setMastercardNetworkTokensRequestorId',
        'mastercard_network_tokens_app_id' => 'setMastercardNetworkTokensAppId',
        'loon_client_key' => 'setLoonClientKey',
        'loon_secret_key' => 'setLoonSecretKey',
        'loon_accepted_schemes' => 'setLoonAcceptedSchemes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'outbound_webhook_url' => 'getOutboundWebhookUrl',
        'outbound_webhook_username' => 'getOutboundWebhookUsername',
        'outbound_webhook_password' => 'getOutboundWebhookPassword',
        'visa_network_tokens_requestor_id' => 'getVisaNetworkTokensRequestorId',
        'visa_network_tokens_app_id' => 'getVisaNetworkTokensAppId',
        'amex_network_tokens_requestor_id' => 'getAmexNetworkTokensRequestorId',
        'amex_network_tokens_app_id' => 'getAmexNetworkTokensAppId',
        'mastercard_network_tokens_requestor_id' => 'getMastercardNetworkTokensRequestorId',
        'mastercard_network_tokens_app_id' => 'getMastercardNetworkTokensAppId',
        'loon_client_key' => 'getLoonClientKey',
        'loon_secret_key' => 'getLoonSecretKey',
        'loon_accepted_schemes' => 'getLoonAcceptedSchemes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LOON_ACCEPTED_SCHEMES_ACCEL = 'accel';
    public const LOON_ACCEPTED_SCHEMES_AMEX = 'amex';
    public const LOON_ACCEPTED_SCHEMES_BANCONTACT = 'bancontact';
    public const LOON_ACCEPTED_SCHEMES_CARTE_BANCAIRE = 'carte-bancaire';
    public const LOON_ACCEPTED_SCHEMES_CIRRUS = 'cirrus';
    public const LOON_ACCEPTED_SCHEMES_CULIANCE = 'culiance';
    public const LOON_ACCEPTED_SCHEMES_DANKORT = 'dankort';
    public const LOON_ACCEPTED_SCHEMES_DINERS_CLUB = 'diners-club';
    public const LOON_ACCEPTED_SCHEMES_DISCOVER = 'discover';
    public const LOON_ACCEPTED_SCHEMES_EFTPOS_AUSTRALIA = 'eftpos-australia';
    public const LOON_ACCEPTED_SCHEMES_ELO = 'elo';
    public const LOON_ACCEPTED_SCHEMES_HIPERCARD = 'hipercard';
    public const LOON_ACCEPTED_SCHEMES_JCB = 'jcb';
    public const LOON_ACCEPTED_SCHEMES_MAESTRO = 'maestro';
    public const LOON_ACCEPTED_SCHEMES_MASTERCARD = 'mastercard';
    public const LOON_ACCEPTED_SCHEMES_NYCE = 'nyce';
    public const LOON_ACCEPTED_SCHEMES_OTHER = 'other';
    public const LOON_ACCEPTED_SCHEMES_PULSE = 'pulse';
    public const LOON_ACCEPTED_SCHEMES_RUPAY = 'rupay';
    public const LOON_ACCEPTED_SCHEMES_STAR = 'star';
    public const LOON_ACCEPTED_SCHEMES_UNIONPAY = 'unionpay';
    public const LOON_ACCEPTED_SCHEMES_VISA = 'visa';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoonAcceptedSchemesAllowableValues()
    {
        return [
            self::LOON_ACCEPTED_SCHEMES_ACCEL,
            self::LOON_ACCEPTED_SCHEMES_AMEX,
            self::LOON_ACCEPTED_SCHEMES_BANCONTACT,
            self::LOON_ACCEPTED_SCHEMES_CARTE_BANCAIRE,
            self::LOON_ACCEPTED_SCHEMES_CIRRUS,
            self::LOON_ACCEPTED_SCHEMES_CULIANCE,
            self::LOON_ACCEPTED_SCHEMES_DANKORT,
            self::LOON_ACCEPTED_SCHEMES_DINERS_CLUB,
            self::LOON_ACCEPTED_SCHEMES_DISCOVER,
            self::LOON_ACCEPTED_SCHEMES_EFTPOS_AUSTRALIA,
            self::LOON_ACCEPTED_SCHEMES_ELO,
            self::LOON_ACCEPTED_SCHEMES_HIPERCARD,
            self::LOON_ACCEPTED_SCHEMES_JCB,
            self::LOON_ACCEPTED_SCHEMES_MAESTRO,
            self::LOON_ACCEPTED_SCHEMES_MASTERCARD,
            self::LOON_ACCEPTED_SCHEMES_NYCE,
            self::LOON_ACCEPTED_SCHEMES_OTHER,
            self::LOON_ACCEPTED_SCHEMES_PULSE,
            self::LOON_ACCEPTED_SCHEMES_RUPAY,
            self::LOON_ACCEPTED_SCHEMES_STAR,
            self::LOON_ACCEPTED_SCHEMES_UNIONPAY,
            self::LOON_ACCEPTED_SCHEMES_VISA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['outbound_webhook_url'] = $data['outbound_webhook_url'] ?? null;
        $this->container['outbound_webhook_username'] = $data['outbound_webhook_username'] ?? null;
        $this->container['outbound_webhook_password'] = $data['outbound_webhook_password'] ?? null;
        $this->container['visa_network_tokens_requestor_id'] = $data['visa_network_tokens_requestor_id'] ?? null;
        $this->container['visa_network_tokens_app_id'] = $data['visa_network_tokens_app_id'] ?? null;
        $this->container['amex_network_tokens_requestor_id'] = $data['amex_network_tokens_requestor_id'] ?? null;
        $this->container['amex_network_tokens_app_id'] = $data['amex_network_tokens_app_id'] ?? null;
        $this->container['mastercard_network_tokens_requestor_id'] = $data['mastercard_network_tokens_requestor_id'] ?? null;
        $this->container['mastercard_network_tokens_app_id'] = $data['mastercard_network_tokens_app_id'] ?? null;
        $this->container['loon_client_key'] = $data['loon_client_key'] ?? null;
        $this->container['loon_secret_key'] = $data['loon_secret_key'] ?? null;
        $this->container['loon_accepted_schemes'] = $data['loon_accepted_schemes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 22)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['visa_network_tokens_requestor_id']) && (mb_strlen($this->container['visa_network_tokens_requestor_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'visa_network_tokens_requestor_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['visa_network_tokens_app_id']) && (mb_strlen($this->container['visa_network_tokens_app_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'visa_network_tokens_app_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['amex_network_tokens_requestor_id']) && (mb_strlen($this->container['amex_network_tokens_requestor_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'amex_network_tokens_requestor_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['amex_network_tokens_app_id']) && (mb_strlen($this->container['amex_network_tokens_app_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'amex_network_tokens_app_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['mastercard_network_tokens_requestor_id']) && (mb_strlen($this->container['mastercard_network_tokens_requestor_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'mastercard_network_tokens_requestor_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['mastercard_network_tokens_app_id']) && (mb_strlen($this->container['mastercard_network_tokens_app_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'mastercard_network_tokens_app_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['loon_client_key']) && (mb_strlen($this->container['loon_client_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'loon_client_key', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['loon_secret_key']) && (mb_strlen($this->container['loon_secret_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'loon_secret_key', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique ID for the merchant account.
     *
     * @return self
     */
    public function setId($id)
    {
        if (!is_null($id) && (mb_strlen($id) > 22)) {
            throw new \InvalidArgumentException('invalid length for $id when calling MerchantAccountCreate., must be smaller than or equal to 22.');
        }
        if (!is_null($id) && (mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling MerchantAccountCreate., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The human-readable name of the merchant account.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling MerchantAccountCreate., must be smaller than or equal to 255.');
        }
        if (!is_null($display_name) && (mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling MerchantAccountCreate., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets outbound_webhook_url
     *
     * @return string|null
     */
    public function getOutboundWebhookUrl()
    {
        return $this->container['outbound_webhook_url'];
    }

    /**
     * Sets outbound_webhook_url
     *
     * @param string|null $outbound_webhook_url The optional URL where webhooks will be received.
     *
     * @return self
     */
    public function setOutboundWebhookUrl($outbound_webhook_url)
    {
        $this->container['outbound_webhook_url'] = $outbound_webhook_url;

        return $this;
    }

    /**
     * Gets outbound_webhook_username
     *
     * @return string|null
     */
    public function getOutboundWebhookUsername()
    {
        return $this->container['outbound_webhook_username'];
    }

    /**
     * Sets outbound_webhook_username
     *
     * @param string|null $outbound_webhook_username The optional username to use when `outbound_webhook_url` is configured and requires basic authentication.
     *
     * @return self
     */
    public function setOutboundWebhookUsername($outbound_webhook_username)
    {
        $this->container['outbound_webhook_username'] = $outbound_webhook_username;

        return $this;
    }

    /**
     * Gets outbound_webhook_password
     *
     * @return string|null
     */
    public function getOutboundWebhookPassword()
    {
        return $this->container['outbound_webhook_password'];
    }

    /**
     * Sets outbound_webhook_password
     *
     * @param string|null $outbound_webhook_password The optional password to use when `outbound_webhook_url` is configured and requires basic authentication.
     *
     * @return self
     */
    public function setOutboundWebhookPassword($outbound_webhook_password)
    {
        $this->container['outbound_webhook_password'] = $outbound_webhook_password;

        return $this;
    }

    /**
     * Gets visa_network_tokens_requestor_id
     *
     * @return string|null
     */
    public function getVisaNetworkTokensRequestorId()
    {
        return $this->container['visa_network_tokens_requestor_id'];
    }

    /**
     * Sets visa_network_tokens_requestor_id
     *
     * @param string|null $visa_network_tokens_requestor_id Requestor ID provided for Visa after onboarding to use Network Tokens. The requestor ID must be unique across all schemes and merchant accounts.
     *
     * @return self
     */
    public function setVisaNetworkTokensRequestorId($visa_network_tokens_requestor_id)
    {
        if (!is_null($visa_network_tokens_requestor_id) && (mb_strlen($visa_network_tokens_requestor_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $visa_network_tokens_requestor_id when calling MerchantAccountCreate., must be smaller than or equal to 300.');
        }

        $this->container['visa_network_tokens_requestor_id'] = $visa_network_tokens_requestor_id;

        return $this;
    }

    /**
     * Gets visa_network_tokens_app_id
     *
     * @return string|null
     */
    public function getVisaNetworkTokensAppId()
    {
        return $this->container['visa_network_tokens_app_id'];
    }

    /**
     * Sets visa_network_tokens_app_id
     *
     * @param string|null $visa_network_tokens_app_id Application ID provided for Visa after onboarding to use Network Tokens. The application ID must be unique across all schemes and merchant accounts.
     *
     * @return self
     */
    public function setVisaNetworkTokensAppId($visa_network_tokens_app_id)
    {
        if (!is_null($visa_network_tokens_app_id) && (mb_strlen($visa_network_tokens_app_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $visa_network_tokens_app_id when calling MerchantAccountCreate., must be smaller than or equal to 300.');
        }

        $this->container['visa_network_tokens_app_id'] = $visa_network_tokens_app_id;

        return $this;
    }

    /**
     * Gets amex_network_tokens_requestor_id
     *
     * @return string|null
     */
    public function getAmexNetworkTokensRequestorId()
    {
        return $this->container['amex_network_tokens_requestor_id'];
    }

    /**
     * Sets amex_network_tokens_requestor_id
     *
     * @param string|null $amex_network_tokens_requestor_id Requestor ID provided for Amex after onboarding to use Network Tokens. The requestor ID must be unique across all schemes and merchant accounts.
     *
     * @return self
     */
    public function setAmexNetworkTokensRequestorId($amex_network_tokens_requestor_id)
    {
        if (!is_null($amex_network_tokens_requestor_id) && (mb_strlen($amex_network_tokens_requestor_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $amex_network_tokens_requestor_id when calling MerchantAccountCreate., must be smaller than or equal to 300.');
        }

        $this->container['amex_network_tokens_requestor_id'] = $amex_network_tokens_requestor_id;

        return $this;
    }

    /**
     * Gets amex_network_tokens_app_id
     *
     * @return string|null
     */
    public function getAmexNetworkTokensAppId()
    {
        return $this->container['amex_network_tokens_app_id'];
    }

    /**
     * Sets amex_network_tokens_app_id
     *
     * @param string|null $amex_network_tokens_app_id Application ID provided for Amex after onboarding to use Network Tokens. The application ID must be unique across all schemes and merchant accounts.
     *
     * @return self
     */
    public function setAmexNetworkTokensAppId($amex_network_tokens_app_id)
    {
        if (!is_null($amex_network_tokens_app_id) && (mb_strlen($amex_network_tokens_app_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $amex_network_tokens_app_id when calling MerchantAccountCreate., must be smaller than or equal to 300.');
        }

        $this->container['amex_network_tokens_app_id'] = $amex_network_tokens_app_id;

        return $this;
    }

    /**
     * Gets mastercard_network_tokens_requestor_id
     *
     * @return string|null
     */
    public function getMastercardNetworkTokensRequestorId()
    {
        return $this->container['mastercard_network_tokens_requestor_id'];
    }

    /**
     * Sets mastercard_network_tokens_requestor_id
     *
     * @param string|null $mastercard_network_tokens_requestor_id Requestor ID provided for Mastercard after onboarding to use Network Tokens. The requestor ID must be unique across all schemes and merchant accounts.
     *
     * @return self
     */
    public function setMastercardNetworkTokensRequestorId($mastercard_network_tokens_requestor_id)
    {
        if (!is_null($mastercard_network_tokens_requestor_id) && (mb_strlen($mastercard_network_tokens_requestor_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $mastercard_network_tokens_requestor_id when calling MerchantAccountCreate., must be smaller than or equal to 300.');
        }

        $this->container['mastercard_network_tokens_requestor_id'] = $mastercard_network_tokens_requestor_id;

        return $this;
    }

    /**
     * Gets mastercard_network_tokens_app_id
     *
     * @return string|null
     */
    public function getMastercardNetworkTokensAppId()
    {
        return $this->container['mastercard_network_tokens_app_id'];
    }

    /**
     * Sets mastercard_network_tokens_app_id
     *
     * @param string|null $mastercard_network_tokens_app_id Application ID provided for Mastercard after onboarding to use Network Tokens. The application ID must be unique across all schemes and merchant accounts.
     *
     * @return self
     */
    public function setMastercardNetworkTokensAppId($mastercard_network_tokens_app_id)
    {
        if (!is_null($mastercard_network_tokens_app_id) && (mb_strlen($mastercard_network_tokens_app_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $mastercard_network_tokens_app_id when calling MerchantAccountCreate., must be smaller than or equal to 300.');
        }

        $this->container['mastercard_network_tokens_app_id'] = $mastercard_network_tokens_app_id;

        return $this;
    }

    /**
     * Gets loon_client_key
     *
     * @return string|null
     */
    public function getLoonClientKey()
    {
        return $this->container['loon_client_key'];
    }

    /**
     * Sets loon_client_key
     *
     * @param string|null $loon_client_key Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service used by Gr4vy.  * If the field is not set or if it's set to `null`, the Account Updater service doesn't get configured. * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
     *
     * @return self
     */
    public function setLoonClientKey($loon_client_key)
    {

        if (!is_null($loon_client_key) && (mb_strlen($loon_client_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $loon_client_key when calling MerchantAccountCreate., must be bigger than or equal to 1.');
        }

        $this->container['loon_client_key'] = $loon_client_key;

        return $this;
    }

    /**
     * Gets loon_secret_key
     *
     * @return string|null
     */
    public function getLoonSecretKey()
    {
        return $this->container['loon_secret_key'];
    }

    /**
     * Sets loon_secret_key
     *
     * @param string|null $loon_secret_key Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service used by Gr4vy.  * If the field is not set or if it's set to `null`, the Account Updater service doesn't get configured. * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
     *
     * @return self
     */
    public function setLoonSecretKey($loon_secret_key)
    {

        if (!is_null($loon_secret_key) && (mb_strlen($loon_secret_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $loon_secret_key when calling MerchantAccountCreate., must be bigger than or equal to 1.');
        }

        $this->container['loon_secret_key'] = $loon_secret_key;

        return $this;
    }

    /**
     * Gets loon_accepted_schemes
     *
     * @return string[]|null
     */
    public function getLoonAcceptedSchemes()
    {
        return $this->container['loon_accepted_schemes'];
    }

    /**
     * Sets loon_accepted_schemes
     *
     * @param string[]|null $loon_accepted_schemes Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service used by Gr4vy.  * If the field is not set or if it's set to `null`, the Account Updater service doesn't get configured. * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
     *
     * @return self
     */
    public function setLoonAcceptedSchemes($loon_accepted_schemes)
    {
        $allowedValues = $this->getLoonAcceptedSchemesAllowableValues();
        if (!is_null($loon_accepted_schemes) && array_diff($loon_accepted_schemes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'loon_accepted_schemes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loon_accepted_schemes'] = $loon_accepted_schemes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


