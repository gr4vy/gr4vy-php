<?php
/**
 * PaymentConnectorExternalTransactionRequestContext
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentConnectorExternalTransactionRequestContext Class Doc Comment
 *
 * @category Class
 * @description Additional context for the transaction.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentConnectorExternalTransactionRequestContext implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentConnectorExternalTransactionRequest_context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connector_request_id' => 'string',
        'request' => 'string',
        'response' => 'string',
        'payment_service_definition_id' => 'string',
        'success' => 'bool',
        'payment_service_id' => 'string',
        'response_status_code' => 'string',
        'payment_service_display_name' => 'string',
        'method' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connector_request_id' => null,
        'request' => null,
        'response' => null,
        'payment_service_definition_id' => null,
        'success' => null,
        'payment_service_id' => null,
        'response_status_code' => null,
        'payment_service_display_name' => null,
        'method' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connector_request_id' => 'connector_request_id',
        'request' => 'request',
        'response' => 'response',
        'payment_service_definition_id' => 'payment_service_definition_id',
        'success' => 'success',
        'payment_service_id' => 'payment_service_id',
        'response_status_code' => 'response_status_code',
        'payment_service_display_name' => 'payment_service_display_name',
        'method' => 'method',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connector_request_id' => 'setConnectorRequestId',
        'request' => 'setRequest',
        'response' => 'setResponse',
        'payment_service_definition_id' => 'setPaymentServiceDefinitionId',
        'success' => 'setSuccess',
        'payment_service_id' => 'setPaymentServiceId',
        'response_status_code' => 'setResponseStatusCode',
        'payment_service_display_name' => 'setPaymentServiceDisplayName',
        'method' => 'setMethod',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connector_request_id' => 'getConnectorRequestId',
        'request' => 'getRequest',
        'response' => 'getResponse',
        'payment_service_definition_id' => 'getPaymentServiceDefinitionId',
        'success' => 'getSuccess',
        'payment_service_id' => 'getPaymentServiceId',
        'response_status_code' => 'getResponseStatusCode',
        'payment_service_display_name' => 'getPaymentServiceDisplayName',
        'method' => 'getMethod',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connector_request_id'] = $data['connector_request_id'] ?? null;
        $this->container['request'] = $data['request'] ?? null;
        $this->container['response'] = $data['response'] ?? null;
        $this->container['payment_service_definition_id'] = $data['payment_service_definition_id'] ?? null;
        $this->container['success'] = $data['success'] ?? null;
        $this->container['payment_service_id'] = $data['payment_service_id'] ?? null;
        $this->container['response_status_code'] = $data['response_status_code'] ?? null;
        $this->container['payment_service_display_name'] = $data['payment_service_display_name'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connector_request_id
     *
     * @return string|null
     */
    public function getConnectorRequestId()
    {
        return $this->container['connector_request_id'];
    }

    /**
     * Sets connector_request_id
     *
     * @param string|null $connector_request_id The connector request id.
     *
     * @return self
     */
    public function setConnectorRequestId($connector_request_id)
    {
        $this->container['connector_request_id'] = $connector_request_id;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string|null $request The request.
     *
     * @return self
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string|null $response The response.
     *
     * @return self
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets payment_service_definition_id
     *
     * @return string|null
     */
    public function getPaymentServiceDefinitionId()
    {
        return $this->container['payment_service_definition_id'];
    }

    /**
     * Sets payment_service_definition_id
     *
     * @param string|null $payment_service_definition_id The payment service definition id.
     *
     * @return self
     */
    public function setPaymentServiceDefinitionId($payment_service_definition_id)
    {
        $this->container['payment_service_definition_id'] = $payment_service_definition_id;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success Whether the transaction was successful.
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets payment_service_id
     *
     * @return string|null
     */
    public function getPaymentServiceId()
    {
        return $this->container['payment_service_id'];
    }

    /**
     * Sets payment_service_id
     *
     * @param string|null $payment_service_id The payment service id.
     *
     * @return self
     */
    public function setPaymentServiceId($payment_service_id)
    {
        $this->container['payment_service_id'] = $payment_service_id;

        return $this;
    }

    /**
     * Gets response_status_code
     *
     * @return string|null
     */
    public function getResponseStatusCode()
    {
        return $this->container['response_status_code'];
    }

    /**
     * Sets response_status_code
     *
     * @param string|null $response_status_code The response status code.
     *
     * @return self
     */
    public function setResponseStatusCode($response_status_code)
    {
        $this->container['response_status_code'] = $response_status_code;

        return $this;
    }

    /**
     * Gets payment_service_display_name
     *
     * @return string|null
     */
    public function getPaymentServiceDisplayName()
    {
        return $this->container['payment_service_display_name'];
    }

    /**
     * Sets payment_service_display_name
     *
     * @param string|null $payment_service_display_name The payment service display name.
     *
     * @return self
     */
    public function setPaymentServiceDisplayName($payment_service_display_name)
    {
        $this->container['payment_service_display_name'] = $payment_service_display_name;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method The HTTP method.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The endpoint for the request.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


