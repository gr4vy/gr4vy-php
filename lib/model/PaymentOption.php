<?php
/**
 * PaymentOption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentOption Class Doc Comment
 *
 * @category Class
 * @description An available payment option for a locale.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'method' => 'string',
        'icon_url' => 'string',
        'mode' => 'string',
        'label' => 'string',
        'can_store_payment_method' => 'bool',
        'can_delay_capture' => 'bool',
        'context' => '\Gr4vy\model\PaymentOptionContext'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'method' => null,
        'icon_url' => null,
        'mode' => null,
        'label' => null,
        'can_store_payment_method' => null,
        'can_delay_capture' => null,
        'context' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'method' => 'method',
        'icon_url' => 'icon_url',
        'mode' => 'mode',
        'label' => 'label',
        'can_store_payment_method' => 'can_store_payment_method',
        'can_delay_capture' => 'can_delay_capture',
        'context' => 'context'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'method' => 'setMethod',
        'icon_url' => 'setIconUrl',
        'mode' => 'setMode',
        'label' => 'setLabel',
        'can_store_payment_method' => 'setCanStorePaymentMethod',
        'can_delay_capture' => 'setCanDelayCapture',
        'context' => 'setContext'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'method' => 'getMethod',
        'icon_url' => 'getIconUrl',
        'mode' => 'getMode',
        'label' => 'getLabel',
        'can_store_payment_method' => 'getCanStorePaymentMethod',
        'can_delay_capture' => 'getCanDelayCapture',
        'context' => 'getContext'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PAYMENT_OPTION = 'payment-option';
    public const METHOD_AFTERPAY = 'afterpay';
    public const METHOD_ALIPAY = 'alipay';
    public const METHOD_ALIPAYHK = 'alipayhk';
    public const METHOD_APPLEPAY = 'applepay';
    public const METHOD_BACS = 'bacs';
    public const METHOD_BANCONTACT = 'bancontact';
    public const METHOD_BANKED = 'banked';
    public const METHOD_BECS = 'becs';
    public const METHOD_BITPAY = 'bitpay';
    public const METHOD_BOLETO = 'boleto';
    public const METHOD_BOOST = 'boost';
    public const METHOD_CARD = 'card';
    public const METHOD_CHECKOUT_SESSION = 'checkout-session';
    public const METHOD_CLICK_TO_PAY = 'click-to-pay';
    public const METHOD_CLEARPAY = 'clearpay';
    public const METHOD_DANA = 'dana';
    public const METHOD_DCB = 'dcb';
    public const METHOD_EPS = 'eps';
    public const METHOD_FORTUMO = 'fortumo';
    public const METHOD_GCASH = 'gcash';
    public const METHOD_GIROPAY = 'giropay';
    public const METHOD_GOCARDLESS = 'gocardless';
    public const METHOD_GOOGLEPAY = 'googlepay';
    public const METHOD_GOPAY = 'gopay';
    public const METHOD_GRABPAY = 'grabpay';
    public const METHOD_IDEAL = 'ideal';
    public const METHOD_ID = 'id';
    public const METHOD_KAKAOPAY = 'kakaopay';
    public const METHOD_KLARNA = 'klarna';
    public const METHOD_LAYBUY = 'laybuy';
    public const METHOD_LINEPAY = 'linepay';
    public const METHOD_LINKAJA = 'linkaja';
    public const METHOD_MAYBANKQRPAY = 'maybankqrpay';
    public const METHOD_MULTIBANCO = 'multibanco';
    public const METHOD_ONEY_3X = 'oney_3x';
    public const METHOD_ONEY_4X = 'oney_4x';
    public const METHOD_ONEY_6X = 'oney_6x';
    public const METHOD_ONEY_10X = 'oney_10x';
    public const METHOD_ONEY_12X = 'oney_12x';
    public const METHOD_OVO = 'ovo';
    public const METHOD_OXXO = 'oxxo';
    public const METHOD_PAYMAYA = 'paymaya';
    public const METHOD_PAYPAL = 'paypal';
    public const METHOD_PAYPALPAYLATER = 'paypalpaylater';
    public const METHOD_PIX = 'pix';
    public const METHOD_RABBITLINEPAY = 'rabbitlinepay';
    public const METHOD_RAZORPAY = 'razorpay';
    public const METHOD_SCALAPAY = 'scalapay';
    public const METHOD_SEPA = 'sepa';
    public const METHOD_SHOPEEPAY = 'shopeepay';
    public const METHOD_SINGTELDASH = 'singteldash';
    public const METHOD_SOFORT = 'sofort';
    public const METHOD_STRIPEDD = 'stripedd';
    public const METHOD_THAIQR = 'thaiqr';
    public const METHOD_TOUCHNGO = 'touchngo';
    public const METHOD_TRUEMONEY = 'truemoney';
    public const METHOD_TRUSTLY = 'trustly';
    public const METHOD_VENMO = 'venmo';
    public const METHOD_WAAVE = 'waave';
    public const METHOD_WECHAT = 'wechat';
    public const METHOD_ZIPPAY = 'zippay';
    public const MODE_CARD = 'card';
    public const MODE_REDIRECT = 'redirect';
    public const MODE_APPLEPAY = 'applepay';
    public const MODE_GOOGLEPAY = 'googlepay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PAYMENT_OPTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_AFTERPAY,
            self::METHOD_ALIPAY,
            self::METHOD_ALIPAYHK,
            self::METHOD_APPLEPAY,
            self::METHOD_BACS,
            self::METHOD_BANCONTACT,
            self::METHOD_BANKED,
            self::METHOD_BECS,
            self::METHOD_BITPAY,
            self::METHOD_BOLETO,
            self::METHOD_BOOST,
            self::METHOD_CARD,
            self::METHOD_CHECKOUT_SESSION,
            self::METHOD_CLICK_TO_PAY,
            self::METHOD_CLEARPAY,
            self::METHOD_DANA,
            self::METHOD_DCB,
            self::METHOD_EPS,
            self::METHOD_FORTUMO,
            self::METHOD_GCASH,
            self::METHOD_GIROPAY,
            self::METHOD_GOCARDLESS,
            self::METHOD_GOOGLEPAY,
            self::METHOD_GOPAY,
            self::METHOD_GRABPAY,
            self::METHOD_IDEAL,
            self::METHOD_ID,
            self::METHOD_KAKAOPAY,
            self::METHOD_KLARNA,
            self::METHOD_LAYBUY,
            self::METHOD_LINEPAY,
            self::METHOD_LINKAJA,
            self::METHOD_MAYBANKQRPAY,
            self::METHOD_MULTIBANCO,
            self::METHOD_ONEY_3X,
            self::METHOD_ONEY_4X,
            self::METHOD_ONEY_6X,
            self::METHOD_ONEY_10X,
            self::METHOD_ONEY_12X,
            self::METHOD_OVO,
            self::METHOD_OXXO,
            self::METHOD_PAYMAYA,
            self::METHOD_PAYPAL,
            self::METHOD_PAYPALPAYLATER,
            self::METHOD_PIX,
            self::METHOD_RABBITLINEPAY,
            self::METHOD_RAZORPAY,
            self::METHOD_SCALAPAY,
            self::METHOD_SEPA,
            self::METHOD_SHOPEEPAY,
            self::METHOD_SINGTELDASH,
            self::METHOD_SOFORT,
            self::METHOD_STRIPEDD,
            self::METHOD_THAIQR,
            self::METHOD_TOUCHNGO,
            self::METHOD_TRUEMONEY,
            self::METHOD_TRUSTLY,
            self::METHOD_VENMO,
            self::METHOD_WAAVE,
            self::METHOD_WECHAT,
            self::METHOD_ZIPPAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_CARD,
            self::MODE_REDIRECT,
            self::MODE_APPLEPAY,
            self::MODE_GOOGLEPAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['icon_url'] = $data['icon_url'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['can_store_payment_method'] = $data['can_store_payment_method'] ?? null;
        $this->container['can_delay_capture'] = $data['can_delay_capture'] ?? null;
        $this->container['context'] = $data['context'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type `payment-option`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method The type of payment method that is available.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string|null
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string|null $icon_url An icon to display for the payment option.
     *
     * @return self
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode The mode to use with this payment option.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label A label that describes this payment option. This label is returned in the language defined by the `locale` query parameter. The label can be used to display a list of payment options to the buyer in their language.
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets can_store_payment_method
     *
     * @return bool|null
     */
    public function getCanStorePaymentMethod()
    {
        return $this->container['can_store_payment_method'];
    }

    /**
     * Sets can_store_payment_method
     *
     * @param bool|null $can_store_payment_method A flag to indicate if storing the payment method is supported.
     *
     * @return self
     */
    public function setCanStorePaymentMethod($can_store_payment_method)
    {
        $this->container['can_store_payment_method'] = $can_store_payment_method;

        return $this;
    }

    /**
     * Gets can_delay_capture
     *
     * @return bool|null
     */
    public function getCanDelayCapture()
    {
        return $this->container['can_delay_capture'];
    }

    /**
     * Sets can_delay_capture
     *
     * @param bool|null $can_delay_capture A flag to indicate if delayed capture is supported.
     *
     * @return self
     */
    public function setCanDelayCapture($can_delay_capture)
    {
        $this->container['can_delay_capture'] = $can_delay_capture;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \Gr4vy\model\PaymentOptionContext|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \Gr4vy\model\PaymentOptionContext|null $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


