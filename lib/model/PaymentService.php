<?php
/**
 * PaymentService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentService Class Doc Comment
 *
 * @category Class
 * @description An active, configured payment service.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'accepted_countries' => 'string[]',
        'accepted_currencies' => 'string[]',
        'active' => 'bool',
        'created_at' => '\DateTime',
        'display_name' => 'string',
        'fields' => '\Gr4vy\model\GiftCardServiceFieldsInner[]',
        'merchant_account_id' => 'string',
        'merchant_profile' => '\Gr4vy\model\PaymentServiceMerchantProfile',
        'method' => 'string',
        'network_tokens_enabled' => 'bool',
        'open_loop' => 'bool',
        'payment_method_tokenization_enabled' => 'bool',
        'payment_service_definition_id' => 'string',
        'status' => 'string',
        'three_d_secure_enabled' => 'bool',
        'updated_at' => '\DateTime',
        'webhook_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'uuid',
        'accepted_countries' => null,
        'accepted_currencies' => null,
        'active' => null,
        'created_at' => 'date-time',
        'display_name' => null,
        'fields' => null,
        'merchant_account_id' => null,
        'merchant_profile' => null,
        'method' => null,
        'network_tokens_enabled' => null,
        'open_loop' => null,
        'payment_method_tokenization_enabled' => null,
        'payment_service_definition_id' => null,
        'status' => null,
        'three_d_secure_enabled' => null,
        'updated_at' => 'date-time',
        'webhook_url' => 'url'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'accepted_countries' => 'accepted_countries',
        'accepted_currencies' => 'accepted_currencies',
        'active' => 'active',
        'created_at' => 'created_at',
        'display_name' => 'display_name',
        'fields' => 'fields',
        'merchant_account_id' => 'merchant_account_id',
        'merchant_profile' => 'merchant_profile',
        'method' => 'method',
        'network_tokens_enabled' => 'network_tokens_enabled',
        'open_loop' => 'open_loop',
        'payment_method_tokenization_enabled' => 'payment_method_tokenization_enabled',
        'payment_service_definition_id' => 'payment_service_definition_id',
        'status' => 'status',
        'three_d_secure_enabled' => 'three_d_secure_enabled',
        'updated_at' => 'updated_at',
        'webhook_url' => 'webhook_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'accepted_countries' => 'setAcceptedCountries',
        'accepted_currencies' => 'setAcceptedCurrencies',
        'active' => 'setActive',
        'created_at' => 'setCreatedAt',
        'display_name' => 'setDisplayName',
        'fields' => 'setFields',
        'merchant_account_id' => 'setMerchantAccountId',
        'merchant_profile' => 'setMerchantProfile',
        'method' => 'setMethod',
        'network_tokens_enabled' => 'setNetworkTokensEnabled',
        'open_loop' => 'setOpenLoop',
        'payment_method_tokenization_enabled' => 'setPaymentMethodTokenizationEnabled',
        'payment_service_definition_id' => 'setPaymentServiceDefinitionId',
        'status' => 'setStatus',
        'three_d_secure_enabled' => 'setThreeDSecureEnabled',
        'updated_at' => 'setUpdatedAt',
        'webhook_url' => 'setWebhookUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'accepted_countries' => 'getAcceptedCountries',
        'accepted_currencies' => 'getAcceptedCurrencies',
        'active' => 'getActive',
        'created_at' => 'getCreatedAt',
        'display_name' => 'getDisplayName',
        'fields' => 'getFields',
        'merchant_account_id' => 'getMerchantAccountId',
        'merchant_profile' => 'getMerchantProfile',
        'method' => 'getMethod',
        'network_tokens_enabled' => 'getNetworkTokensEnabled',
        'open_loop' => 'getOpenLoop',
        'payment_method_tokenization_enabled' => 'getPaymentMethodTokenizationEnabled',
        'payment_service_definition_id' => 'getPaymentServiceDefinitionId',
        'status' => 'getStatus',
        'three_d_secure_enabled' => 'getThreeDSecureEnabled',
        'updated_at' => 'getUpdatedAt',
        'webhook_url' => 'getWebhookUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PAYMENT_SERVICE = 'payment-service';
    public const METHOD_AFTERPAY = 'afterpay';
    public const METHOD_ALIPAY = 'alipay';
    public const METHOD_ALIPAYHK = 'alipayhk';
    public const METHOD_APPLEPAY = 'applepay';
    public const METHOD_BACS = 'bacs';
    public const METHOD_BANCONTACT = 'bancontact';
    public const METHOD_BANKED = 'banked';
    public const METHOD_BECS = 'becs';
    public const METHOD_BITPAY = 'bitpay';
    public const METHOD_BOLETO = 'boleto';
    public const METHOD_BOOST = 'boost';
    public const METHOD_CARD = 'card';
    public const METHOD_CHECKOUT_SESSION = 'checkout-session';
    public const METHOD_CLICK_TO_PAY = 'click-to-pay';
    public const METHOD_CLEARPAY = 'clearpay';
    public const METHOD_DANA = 'dana';
    public const METHOD_DCB = 'dcb';
    public const METHOD_EPS = 'eps';
    public const METHOD_FORTUMO = 'fortumo';
    public const METHOD_GCASH = 'gcash';
    public const METHOD_GIROPAY = 'giropay';
    public const METHOD_GOCARDLESS = 'gocardless';
    public const METHOD_GOOGLEPAY = 'googlepay';
    public const METHOD_GOPAY = 'gopay';
    public const METHOD_GRABPAY = 'grabpay';
    public const METHOD_IDEAL = 'ideal';
    public const METHOD_ID = 'id';
    public const METHOD_KAKAOPAY = 'kakaopay';
    public const METHOD_KLARNA = 'klarna';
    public const METHOD_LAYBUY = 'laybuy';
    public const METHOD_LINEPAY = 'linepay';
    public const METHOD_LINKAJA = 'linkaja';
    public const METHOD_MAYBANKQRPAY = 'maybankqrpay';
    public const METHOD_MULTIBANCO = 'multibanco';
    public const METHOD_ONEY_3X = 'oney_3x';
    public const METHOD_ONEY_4X = 'oney_4x';
    public const METHOD_ONEY_6X = 'oney_6x';
    public const METHOD_ONEY_10X = 'oney_10x';
    public const METHOD_ONEY_12X = 'oney_12x';
    public const METHOD_OVO = 'ovo';
    public const METHOD_OXXO = 'oxxo';
    public const METHOD_PAYMAYA = 'paymaya';
    public const METHOD_PAYPAL = 'paypal';
    public const METHOD_PAYPALPAYLATER = 'paypalpaylater';
    public const METHOD_PIX = 'pix';
    public const METHOD_RABBITLINEPAY = 'rabbitlinepay';
    public const METHOD_RAZORPAY = 'razorpay';
    public const METHOD_SCALAPAY = 'scalapay';
    public const METHOD_SEPA = 'sepa';
    public const METHOD_SHOPEEPAY = 'shopeepay';
    public const METHOD_SINGTELDASH = 'singteldash';
    public const METHOD_SOFORT = 'sofort';
    public const METHOD_STRIPEDD = 'stripedd';
    public const METHOD_THAIQR = 'thaiqr';
    public const METHOD_TOUCHNGO = 'touchngo';
    public const METHOD_TRUEMONEY = 'truemoney';
    public const METHOD_TRUSTLY = 'trustly';
    public const METHOD_VENMO = 'venmo';
    public const METHOD_WAAVE = 'waave';
    public const METHOD_WECHAT = 'wechat';
    public const METHOD_ZIPPAY = 'zippay';
    public const STATUS_PENDING = 'pending';
    public const STATUS_CREATED = 'created';
    public const STATUS_FAILED = 'failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PAYMENT_SERVICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_AFTERPAY,
            self::METHOD_ALIPAY,
            self::METHOD_ALIPAYHK,
            self::METHOD_APPLEPAY,
            self::METHOD_BACS,
            self::METHOD_BANCONTACT,
            self::METHOD_BANKED,
            self::METHOD_BECS,
            self::METHOD_BITPAY,
            self::METHOD_BOLETO,
            self::METHOD_BOOST,
            self::METHOD_CARD,
            self::METHOD_CHECKOUT_SESSION,
            self::METHOD_CLICK_TO_PAY,
            self::METHOD_CLEARPAY,
            self::METHOD_DANA,
            self::METHOD_DCB,
            self::METHOD_EPS,
            self::METHOD_FORTUMO,
            self::METHOD_GCASH,
            self::METHOD_GIROPAY,
            self::METHOD_GOCARDLESS,
            self::METHOD_GOOGLEPAY,
            self::METHOD_GOPAY,
            self::METHOD_GRABPAY,
            self::METHOD_IDEAL,
            self::METHOD_ID,
            self::METHOD_KAKAOPAY,
            self::METHOD_KLARNA,
            self::METHOD_LAYBUY,
            self::METHOD_LINEPAY,
            self::METHOD_LINKAJA,
            self::METHOD_MAYBANKQRPAY,
            self::METHOD_MULTIBANCO,
            self::METHOD_ONEY_3X,
            self::METHOD_ONEY_4X,
            self::METHOD_ONEY_6X,
            self::METHOD_ONEY_10X,
            self::METHOD_ONEY_12X,
            self::METHOD_OVO,
            self::METHOD_OXXO,
            self::METHOD_PAYMAYA,
            self::METHOD_PAYPAL,
            self::METHOD_PAYPALPAYLATER,
            self::METHOD_PIX,
            self::METHOD_RABBITLINEPAY,
            self::METHOD_RAZORPAY,
            self::METHOD_SCALAPAY,
            self::METHOD_SEPA,
            self::METHOD_SHOPEEPAY,
            self::METHOD_SINGTELDASH,
            self::METHOD_SOFORT,
            self::METHOD_STRIPEDD,
            self::METHOD_THAIQR,
            self::METHOD_TOUCHNGO,
            self::METHOD_TRUEMONEY,
            self::METHOD_TRUSTLY,
            self::METHOD_VENMO,
            self::METHOD_WAAVE,
            self::METHOD_WECHAT,
            self::METHOD_ZIPPAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_CREATED,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['accepted_countries'] = $data['accepted_countries'] ?? null;
        $this->container['accepted_currencies'] = $data['accepted_currencies'] ?? null;
        $this->container['active'] = $data['active'] ?? true;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['merchant_account_id'] = $data['merchant_account_id'] ?? null;
        $this->container['merchant_profile'] = $data['merchant_profile'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['network_tokens_enabled'] = $data['network_tokens_enabled'] ?? null;
        $this->container['open_loop'] = $data['open_loop'] ?? null;
        $this->container['payment_method_tokenization_enabled'] = $data['payment_method_tokenization_enabled'] ?? false;
        $this->container['payment_service_definition_id'] = $data['payment_service_definition_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['three_d_secure_enabled'] = $data['three_d_secure_enabled'] ?? false;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['webhook_url'] = $data['webhook_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 200)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['accepted_countries']) && (count($this->container['accepted_countries']) < 1)) {
            $invalidProperties[] = "invalid value for 'accepted_countries', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['accepted_currencies']) && (count($this->container['accepted_currencies']) < 1)) {
            $invalidProperties[] = "invalid value for 'accepted_currencies', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payment_service_definition_id']) && (mb_strlen($this->container['payment_service_definition_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'payment_service_definition_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['payment_service_definition_id']) && (mb_strlen($this->container['payment_service_definition_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_service_definition_id', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of this resource.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of this payment service.
     *
     * @return self
     */
    public function setId($id)
    {
        if (!is_null($id) && (mb_strlen($id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentService., must be smaller than or equal to 200.');
        }
        if (!is_null($id) && (mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentService., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accepted_countries
     *
     * @return string[]|null
     */
    public function getAcceptedCountries()
    {
        return $this->container['accepted_countries'];
    }

    /**
     * Sets accepted_countries
     *
     * @param string[]|null $accepted_countries A list of countries for which this service is enabled, in ISO two-letter code format.
     *
     * @return self
     */
    public function setAcceptedCountries($accepted_countries)
    {


        if (!is_null($accepted_countries) && (count($accepted_countries) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accepted_countries when calling PaymentService., number of items must be greater than or equal to 1.');
        }
        $this->container['accepted_countries'] = $accepted_countries;

        return $this;
    }

    /**
     * Gets accepted_currencies
     *
     * @return string[]|null
     */
    public function getAcceptedCurrencies()
    {
        return $this->container['accepted_currencies'];
    }

    /**
     * Sets accepted_currencies
     *
     * @param string[]|null $accepted_currencies A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     *
     * @return self
     */
    public function setAcceptedCurrencies($accepted_currencies)
    {


        if (!is_null($accepted_currencies) && (count($accepted_currencies) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accepted_currencies when calling PaymentService., number of items must be greater than or equal to 1.');
        }
        $this->container['accepted_currencies'] = $accepted_currencies;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Defines if this service is currently active or not.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when this service was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The custom name set for this service.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PaymentService., must be smaller than or equal to 200.');
        }
        if (!is_null($display_name) && (mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling PaymentService., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Gr4vy\model\GiftCardServiceFieldsInner[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Gr4vy\model\GiftCardServiceFieldsInner[]|null $fields A list of fields, each containing a key-value pair for each field configured for this payment service. Fields marked as `secret` (see Payment Service Definition) are not returned.
     *
     * @return self
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets merchant_account_id
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchant_account_id'];
    }

    /**
     * Sets merchant_account_id
     *
     * @param string|null $merchant_account_id The unique ID for a merchant account.
     *
     * @return self
     */
    public function setMerchantAccountId($merchant_account_id)
    {
        $this->container['merchant_account_id'] = $merchant_account_id;

        return $this;
    }

    /**
     * Gets merchant_profile
     *
     * @return \Gr4vy\model\PaymentServiceMerchantProfile|null
     */
    public function getMerchantProfile()
    {
        return $this->container['merchant_profile'];
    }

    /**
     * Sets merchant_profile
     *
     * @param \Gr4vy\model\PaymentServiceMerchantProfile|null $merchant_profile merchant_profile
     *
     * @return self
     */
    public function setMerchantProfile($merchant_profile)
    {
        $this->container['merchant_profile'] = $merchant_profile;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method The payment method that this service handles.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets network_tokens_enabled
     *
     * @return bool|null
     */
    public function getNetworkTokensEnabled()
    {
        return $this->container['network_tokens_enabled'];
    }

    /**
     * Sets network_tokens_enabled
     *
     * @param bool|null $network_tokens_enabled Defines if network tokens are enabled for the service. This feature can only be enabled if the payment service is set as `open_loop` and the PSP is set up to accept network tokens.
     *
     * @return self
     */
    public function setNetworkTokensEnabled($network_tokens_enabled)
    {
        $this->container['network_tokens_enabled'] = $network_tokens_enabled;

        return $this;
    }

    /**
     * Gets open_loop
     *
     * @return bool|null
     */
    public function getOpenLoop()
    {
        return $this->container['open_loop'];
    }

    /**
     * Sets open_loop
     *
     * @param bool|null $open_loop Defines if the service works as an open-loop service. This feature can only be enabled if the PSP is set up to accept previous scheme transaction IDs.
     *
     * @return self
     */
    public function setOpenLoop($open_loop)
    {
        $this->container['open_loop'] = $open_loop;

        return $this;
    }

    /**
     * Gets payment_method_tokenization_enabled
     *
     * @return bool|null
     */
    public function getPaymentMethodTokenizationEnabled()
    {
        return $this->container['payment_method_tokenization_enabled'];
    }

    /**
     * Sets payment_method_tokenization_enabled
     *
     * @param bool|null $payment_method_tokenization_enabled Defines if tokenization is enabled for the service. This feature can only be enabled if the payment service is NOT set as `open_loop` and the PSP is set up to tokenize.
     *
     * @return self
     */
    public function setPaymentMethodTokenizationEnabled($payment_method_tokenization_enabled)
    {
        $this->container['payment_method_tokenization_enabled'] = $payment_method_tokenization_enabled;

        return $this;
    }

    /**
     * Gets payment_service_definition_id
     *
     * @return string|null
     */
    public function getPaymentServiceDefinitionId()
    {
        return $this->container['payment_service_definition_id'];
    }

    /**
     * Sets payment_service_definition_id
     *
     * @param string|null $payment_service_definition_id The ID of the payment service definition used to create this service.
     *
     * @return self
     */
    public function setPaymentServiceDefinitionId($payment_service_definition_id)
    {
        if (!is_null($payment_service_definition_id) && (mb_strlen($payment_service_definition_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_definition_id when calling PaymentService., must be smaller than or equal to 50.');
        }
        if (!is_null($payment_service_definition_id) && (mb_strlen($payment_service_definition_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_definition_id when calling PaymentService., must be bigger than or equal to 1.');
        }

        $this->container['payment_service_definition_id'] = $payment_service_definition_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of this service. This will start off as pending, move to created, and might eventually move to an error status if and when the credentials are no longer valid.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets three_d_secure_enabled
     *
     * @return bool|null
     */
    public function getThreeDSecureEnabled()
    {
        return $this->container['three_d_secure_enabled'];
    }

    /**
     * Sets three_d_secure_enabled
     *
     * @param bool|null $three_d_secure_enabled Defines if 3-D Secure is enabled for the service (can only be enabled if the payment service definition supports the `three_d_secure_hosted` feature). This does not affect pass through 3-D Secure data.
     *
     * @return self
     */
    public function setThreeDSecureEnabled($three_d_secure_enabled)
    {
        $this->container['three_d_secure_enabled'] = $three_d_secure_enabled;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time when this service was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string|null $webhook_url The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to Gr4vy. Currently, Gr4vy does not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
     *
     * @return self
     */
    public function setWebhookUrl($webhook_url)
    {
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


