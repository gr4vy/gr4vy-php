<?php
/**
 * PaymentServiceDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * PaymentServiceDefinition Class Doc Comment
 *
 * @category Class
 * @description An available payment service that can be configured.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentServiceDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentServiceDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'display_name' => 'string',
        'method' => 'string',
        'fields' => '\Gr4vy\model\PaymentServiceDefinitionFieldsInner[]',
        'supported_currencies' => 'string[]',
        'supported_countries' => 'string[]',
        'mode' => 'string',
        'supported_features' => '\Gr4vy\model\PaymentServiceDefinitionSupportedFeatures',
        'icon_url' => 'string',
        'configuration' => '\Gr4vy\model\PaymentServiceDefinitionConfiguration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'display_name' => null,
        'method' => null,
        'fields' => null,
        'supported_currencies' => null,
        'supported_countries' => null,
        'mode' => null,
        'supported_features' => null,
        'icon_url' => null,
        'configuration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'display_name' => 'display_name',
        'method' => 'method',
        'fields' => 'fields',
        'supported_currencies' => 'supported_currencies',
        'supported_countries' => 'supported_countries',
        'mode' => 'mode',
        'supported_features' => 'supported_features',
        'icon_url' => 'icon_url',
        'configuration' => 'configuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'display_name' => 'setDisplayName',
        'method' => 'setMethod',
        'fields' => 'setFields',
        'supported_currencies' => 'setSupportedCurrencies',
        'supported_countries' => 'setSupportedCountries',
        'mode' => 'setMode',
        'supported_features' => 'setSupportedFeatures',
        'icon_url' => 'setIconUrl',
        'configuration' => 'setConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'display_name' => 'getDisplayName',
        'method' => 'getMethod',
        'fields' => 'getFields',
        'supported_currencies' => 'getSupportedCurrencies',
        'supported_countries' => 'getSupportedCountries',
        'mode' => 'getMode',
        'supported_features' => 'getSupportedFeatures',
        'icon_url' => 'getIconUrl',
        'configuration' => 'getConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? 'payment-service-definition';
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['supported_currencies'] = $data['supported_currencies'] ?? null;
        $this->container['supported_countries'] = $data['supported_countries'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['supported_features'] = $data['supported_features'] ?? null;
        $this->container['icon_url'] = $data['icon_url'] ?? null;
        $this->container['configuration'] = $data['configuration'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['fields']) && (count($this->container['fields']) < 1)) {
            $invalidProperties[] = "invalid value for 'fields', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['supported_currencies']) && (count($this->container['supported_currencies']) < 1)) {
            $invalidProperties[] = "invalid value for 'supported_currencies', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['supported_countries']) && (count($this->container['supported_countries']) < 1)) {
            $invalidProperties[] = "invalid value for 'supported_countries', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the payment service. This is the underlying provider followed by a dash followed by the payment method ID.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type `payment-service-definition`.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The display name of this service.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Gr4vy\model\PaymentServiceDefinitionFieldsInner[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Gr4vy\model\PaymentServiceDefinitionFieldsInner[]|null $fields A list of fields that need to be submitted when activating the payment. service.
     *
     * @return self
     */
    public function setFields($fields)
    {


        if (!is_null($fields) && (count($fields) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fields when calling PaymentServiceDefinition., number of items must be greater than or equal to 1.');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets supported_currencies
     *
     * @return string[]|null
     */
    public function getSupportedCurrencies()
    {
        return $this->container['supported_currencies'];
    }

    /**
     * Sets supported_currencies
     *
     * @param string[]|null $supported_currencies A list of three-letter ISO currency codes that this service supports.
     *
     * @return self
     */
    public function setSupportedCurrencies($supported_currencies)
    {


        if (!is_null($supported_currencies) && (count($supported_currencies) < 1)) {
            throw new \InvalidArgumentException('invalid length for $supported_currencies when calling PaymentServiceDefinition., number of items must be greater than or equal to 1.');
        }
        $this->container['supported_currencies'] = $supported_currencies;

        return $this;
    }

    /**
     * Gets supported_countries
     *
     * @return string[]|null
     */
    public function getSupportedCountries()
    {
        return $this->container['supported_countries'];
    }

    /**
     * Sets supported_countries
     *
     * @param string[]|null $supported_countries A list of two-letter ISO country codes that this service supports.
     *
     * @return self
     */
    public function setSupportedCountries($supported_countries)
    {


        if (!is_null($supported_countries) && (count($supported_countries) < 1)) {
            throw new \InvalidArgumentException('invalid length for $supported_countries when calling PaymentServiceDefinition., number of items must be greater than or equal to 1.');
        }
        $this->container['supported_countries'] = $supported_countries;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets supported_features
     *
     * @return \Gr4vy\model\PaymentServiceDefinitionSupportedFeatures|null
     */
    public function getSupportedFeatures()
    {
        return $this->container['supported_features'];
    }

    /**
     * Sets supported_features
     *
     * @param \Gr4vy\model\PaymentServiceDefinitionSupportedFeatures|null $supported_features supported_features
     *
     * @return self
     */
    public function setSupportedFeatures($supported_features)
    {
        $this->container['supported_features'] = $supported_features;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string|null
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string|null $icon_url An icon to display for the payment service.
     *
     * @return self
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \Gr4vy\model\PaymentServiceDefinitionConfiguration|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \Gr4vy\model\PaymentServiceDefinitionConfiguration|null $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


