<?php
/**
 * Report
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * Report Class Doc Comment
 *
 * @category Class
 * @description A report record.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Report implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Report';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'next_execution_at' => '\DateTime',
        'description' => 'string',
        'schedule' => 'string',
        'schedule_enabled' => 'bool',
        'schedule_timezone' => 'string',
        'spec' => 'ReportSpec',
        'latest_execution' => 'ReportExecutionSummary',
        'type' => 'string',
        'id' => 'string',
        'merchant_account_id' => 'string',
        'name' => 'string',
        'creator_id' => 'string',
        'creator_display_name' => 'string',
        'creator_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'next_execution_at' => 'date-time',
        'description' => null,
        'schedule' => null,
        'schedule_enabled' => null,
        'schedule_timezone' => null,
        'spec' => null,
        'latest_execution' => null,
        'type' => null,
        'id' => 'uuid',
        'merchant_account_id' => null,
        'name' => null,
        'creator_id' => 'uuid',
        'creator_display_name' => null,
        'creator_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'next_execution_at' => 'next_execution_at',
        'description' => 'description',
        'schedule' => 'schedule',
        'schedule_enabled' => 'schedule_enabled',
        'schedule_timezone' => 'schedule_timezone',
        'spec' => 'spec',
        'latest_execution' => 'latest_execution',
        'type' => 'type',
        'id' => 'id',
        'merchant_account_id' => 'merchant_account_id',
        'name' => 'name',
        'creator_id' => 'creator_id',
        'creator_display_name' => 'creator_display_name',
        'creator_type' => 'creator_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'next_execution_at' => 'setNextExecutionAt',
        'description' => 'setDescription',
        'schedule' => 'setSchedule',
        'schedule_enabled' => 'setScheduleEnabled',
        'schedule_timezone' => 'setScheduleTimezone',
        'spec' => 'setSpec',
        'latest_execution' => 'setLatestExecution',
        'type' => 'setType',
        'id' => 'setId',
        'merchant_account_id' => 'setMerchantAccountId',
        'name' => 'setName',
        'creator_id' => 'setCreatorId',
        'creator_display_name' => 'setCreatorDisplayName',
        'creator_type' => 'setCreatorType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'next_execution_at' => 'getNextExecutionAt',
        'description' => 'getDescription',
        'schedule' => 'getSchedule',
        'schedule_enabled' => 'getScheduleEnabled',
        'schedule_timezone' => 'getScheduleTimezone',
        'spec' => 'getSpec',
        'latest_execution' => 'getLatestExecution',
        'type' => 'getType',
        'id' => 'getId',
        'merchant_account_id' => 'getMerchantAccountId',
        'name' => 'getName',
        'creator_id' => 'getCreatorId',
        'creator_display_name' => 'getCreatorDisplayName',
        'creator_type' => 'getCreatorType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SCHEDULE_DAILY = 'daily';
    public const SCHEDULE_MONTHLY = 'monthly';
    public const SCHEDULE_ONCE = 'once';
    public const SCHEDULE_WEEKLY = 'weekly';
    public const TYPE_REPORT = 'report';
    public const CREATOR_TYPE_USER = 'user';
    public const CREATOR_TYPE_PRIVATE_KEY = 'private_key';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleAllowableValues()
    {
        return [
            self::SCHEDULE_DAILY,
            self::SCHEDULE_MONTHLY,
            self::SCHEDULE_ONCE,
            self::SCHEDULE_WEEKLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REPORT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreatorTypeAllowableValues()
    {
        return [
            self::CREATOR_TYPE_USER,
            self::CREATOR_TYPE_PRIVATE_KEY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['next_execution_at'] = $data['next_execution_at'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['schedule_enabled'] = $data['schedule_enabled'] ?? null;
        $this->container['schedule_timezone'] = $data['schedule_timezone'] ?? null;
        $this->container['spec'] = $data['spec'] ?? null;
        $this->container['latest_execution'] = $data['latest_execution'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['merchant_account_id'] = $data['merchant_account_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['creator_id'] = $data['creator_id'] ?? null;
        $this->container['creator_display_name'] = $data['creator_display_name'] ?? null;
        $this->container['creator_type'] = $data['creator_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1000.";
        }

        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($this->container['schedule']) && !in_array($this->container['schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule', must be one of '%s'",
                $this->container['schedule'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['creator_display_name']) && (mb_strlen($this->container['creator_display_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'creator_display_name', the character length must be smaller than or equal to 1000.";
        }

        $allowedValues = $this->getCreatorTypeAllowableValues();
        if (!is_null($this->container['creator_type']) && !in_array($this->container['creator_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'creator_type', must be one of '%s'",
                $this->container['creator_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time this report was created in our system.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at The date and time this report was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets next_execution_at
     *
     * @return \DateTime|null
     */
    public function getNextExecutionAt()
    {
        return $this->container['next_execution_at'];
    }

    /**
     * Sets next_execution_at
     *
     * @param \DateTime|null $next_execution_at The date and time this report will next be executed, provided that `schedule_enabled` is `true`. This value is null if this is a one-off report.
     *
     * @return self
     */
    public function setNextExecutionAt($next_execution_at)
    {
        $this->container['next_execution_at'] = $next_execution_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of this report.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Report., must be smaller than or equal to 1000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string|null $schedule Specifies the schedule of this report.  If this is a one-off report, this value is `once`.  If this is a recurring report, this value is set to the frequency by which the report will be executed. For example, a `monthly` schedule means that this report will be periodically executed at the start of each month.  Note that a `weekly` schedule means that the report is executed at the start of every Monday.
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($schedule) && !in_array($schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule', must be one of '%s'",
                    $schedule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets schedule_enabled
     *
     * @return bool|null
     */
    public function getScheduleEnabled()
    {
        return $this->container['schedule_enabled'];
    }

    /**
     * Sets schedule_enabled
     *
     * @param bool|null $schedule_enabled Indicates whether this report's scheduling is enabled. This value can only be set to `true` if this is a recurring report.  When this value is set to `true`, this report will be executed at the `next_execution_at` date and time.  When this value is set to `false`, future executions of this report are paused until this value is set to `true` again.
     *
     * @return self
     */
    public function setScheduleEnabled($schedule_enabled)
    {
        $this->container['schedule_enabled'] = $schedule_enabled;

        return $this;
    }

    /**
     * Gets schedule_timezone
     *
     * @return string|null
     */
    public function getScheduleTimezone()
    {
        return $this->container['schedule_timezone'];
    }

    /**
     * Sets schedule_timezone
     *
     * @param string|null $schedule_timezone The time zone in which the next execution will be scheduled. This value is used to calculate this report's `next_execution_at` value and is only relevant if this is a recurring report. This time zone is also used to calculate the timestamp range for reports that use date-time placeholders. Date-time placeholders are dynamic timestamps that change with every report execution.
     *
     * @return self
     */
    public function setScheduleTimezone($schedule_timezone)
    {
        $this->container['schedule_timezone'] = $schedule_timezone;

        return $this;
    }

    /**
     * Gets spec
     *
     * @return ReportSpec|null
     */
    public function getSpec()
    {
        return $this->container['spec'];
    }

    /**
     * Sets spec
     *
     * @param ReportSpec|null $spec The specifications of this report.
     *
     * @return self
     */
    public function setSpec($spec)
    {
        $this->container['spec'] = $spec;

        return $this;
    }

    /**
     * Gets latest_execution
     *
     * @return ReportExecutionSummary|null
     */
    public function getLatestExecution()
    {
        return $this->container['latest_execution'];
    }

    /**
     * Sets latest_execution
     *
     * @param ReportExecutionSummary|null $latest_execution Details of the latest execution of this report.
     *
     * @return self
     */
    public function setLatestExecution($latest_execution)
    {
        $this->container['latest_execution'] = $latest_execution;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of this resource. Is always `report`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for this report.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_account_id
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchant_account_id'];
    }

    /**
     * Sets merchant_account_id
     *
     * @param string|null $merchant_account_id The unique ID for a merchant account.
     *
     * @return self
     */
    public function setMerchantAccountId($merchant_account_id)
    {
        $this->container['merchant_account_id'] = $merchant_account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of this report.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Report., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id The unique identifier for the creator of this report.
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets creator_display_name
     *
     * @return string|null
     */
    public function getCreatorDisplayName()
    {
        return $this->container['creator_display_name'];
    }

    /**
     * Sets creator_display_name
     *
     * @param string|null $creator_display_name The name of the creator of this report.
     *
     * @return self
     */
    public function setCreatorDisplayName($creator_display_name)
    {
        if (!is_null($creator_display_name) && (mb_strlen($creator_display_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $creator_display_name when calling Report., must be smaller than or equal to 1000.');
        }

        $this->container['creator_display_name'] = $creator_display_name;

        return $this;
    }

    /**
     * Gets creator_type
     *
     * @return string|null
     */
    public function getCreatorType()
    {
        return $this->container['creator_type'];
    }

    /**
     * Sets creator_type
     *
     * @param string|null $creator_type The type of the creator of this report.
     *
     * @return self
     */
    public function setCreatorType($creator_type)
    {
        $allowedValues = $this->getCreatorTypeAllowableValues();
        if (!is_null($creator_type) && !in_array($creator_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'creator_type', must be one of '%s'",
                    $creator_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['creator_type'] = $creator_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


