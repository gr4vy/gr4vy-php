<?php
/**
 * ReportSpecParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * ReportSpecParams Class Doc Comment
 *
 * @category Class
 * @description Parameters used to configure the report. Acceptable values for this property depend on the value specified for &#x60;model&#x60;.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReportSpecParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportSpec_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fields' => 'string[]',
        'filters' => '\Gr4vy\model\ReportSpecParamsFilters',
        'sort' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fields' => null,
        'filters' => null,
        'sort' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fields' => 'fields',
        'filters' => 'filters',
        'sort' => 'sort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fields' => 'setFields',
        'filters' => 'setFilters',
        'sort' => 'setSort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fields' => 'getFields',
        'filters' => 'getFilters',
        'sort' => 'getSort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FIELDS_ID = 'id';
    public const FIELDS_EXTERNAL_IDENTIFIER = 'external_identifier';
    public const FIELDS_STATUS = 'status';
    public const FIELDS_CREATED_AT = 'created_at';
    public const FIELDS_UPDATED_AT = 'updated_at';
    public const FIELDS_AUTHORIZED_AT = 'authorized_at';
    public const FIELDS_CAPTURED_AT = 'captured_at';
    public const FIELDS_VOIDED_AT = 'voided_at';
    public const FIELDS_AMOUNT = 'amount';
    public const FIELDS_CURRENCY = 'currency';
    public const FIELDS_CAPTURED_AMOUNT = 'captured_amount';
    public const FIELDS_REFUNDED_AMOUNT = 'refunded_amount';
    public const FIELDS_METHOD = 'method';
    public const FIELDS_SCHEME = 'scheme';
    public const FIELDS_PAYMENT_SERVICE_TRANSACTION_ID = 'payment_service_transaction_id';
    public const FIELDS_PAYMENT_SERVICE_ID = 'payment_service_id';
    public const FIELDS_PAYMENT_SERVICE_DEFINITION_ID = 'payment_service_definition_id';
    public const FIELDS_PAYMENT_SERVICE_DISPLAY_NAME = 'payment_service_display_name';
    public const FIELDS_AUTH_RESPONSE_CODE = 'auth_response_code';
    public const FIELDS_RAW_RESPONSE_CODE = 'raw_response_code';
    public const FIELDS_RAW_RESPONSE_DESCRIPTION = 'raw_response_description';
    public const FIELDS_METADATA = 'metadata';
    public const FIELDS_THREE_D_SECURE_STATUS = 'three_d_secure_status';
    public const FIELDS_THREE_D_SECURE_ECI = 'three_d_secure_eci';
    public const FIELDS_THREE_D_SECURE_AUTH_RESP = 'three_d_secure_auth_resp';
    public const FIELDS_THREE_D_SECURE_METHOD = 'three_d_secure_method';
    public const FIELDS_BUYER_EXTERNAL_IDENTIFIER = 'buyer_external_identifier';
    public const FIELDS_BILLING_DETAILS_FIRST_NAME = 'billing_details_first_name';
    public const FIELDS_BILLING_DETAILS_LAST_NAME = 'billing_details_last_name';
    public const FIELDS_BILLING_DETAILS_EMAIL_ADDRESS = 'billing_details_email_address';
    public const FIELDS_BILLING_DETAILS_PHONE_NUMBER = 'billing_details_phone_number';
    public const FIELDS_BILLING_DETAILS_ADDRESS_CITY = 'billing_details_address_city';
    public const FIELDS_BILLING_DETAILS_ADDRESS_COUNTRY = 'billing_details_address_country';
    public const FIELDS_BILLING_DETAILS_ADDRESS_POSTAL_CODE = 'billing_details_address_postal_code';
    public const FIELDS_BILLING_DETAILS_ADDRESS_STATE = 'billing_details_address_state';
    public const FIELDS_BILLING_DETAILS_ADDRESS_STATE_CODE = 'billing_details_address_state_code';
    public const FIELDS_BILLING_DETAILS_ADDRESS_HOUSE_NUMBER_OR_NAME = 'billing_details_address_house_number_or_name';
    public const FIELDS_BILLING_DETAILS_ADDRESS_LINE1 = 'billing_details_address_line1';
    public const FIELDS_BILLING_DETAILS_ADDRESS_LINE2 = 'billing_details_address_line2';
    public const FIELDS_BILLING_DETAILS_ADDRESS_ORGANIZATION = 'billing_details_address_organization';
    public const FIELDS_BILLING_DETAILS_TAX_ID = 'billing_details_tax_id';
    public const FIELDS_BILLING_DETAILS_TAX_ID_KIND = 'billing_details_tax_id_kind';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldsAllowableValues()
    {
        return [
            self::FIELDS_ID,
            self::FIELDS_EXTERNAL_IDENTIFIER,
            self::FIELDS_STATUS,
            self::FIELDS_CREATED_AT,
            self::FIELDS_UPDATED_AT,
            self::FIELDS_AUTHORIZED_AT,
            self::FIELDS_CAPTURED_AT,
            self::FIELDS_VOIDED_AT,
            self::FIELDS_AMOUNT,
            self::FIELDS_CURRENCY,
            self::FIELDS_CAPTURED_AMOUNT,
            self::FIELDS_REFUNDED_AMOUNT,
            self::FIELDS_METHOD,
            self::FIELDS_SCHEME,
            self::FIELDS_PAYMENT_SERVICE_TRANSACTION_ID,
            self::FIELDS_PAYMENT_SERVICE_ID,
            self::FIELDS_PAYMENT_SERVICE_DEFINITION_ID,
            self::FIELDS_PAYMENT_SERVICE_DISPLAY_NAME,
            self::FIELDS_AUTH_RESPONSE_CODE,
            self::FIELDS_RAW_RESPONSE_CODE,
            self::FIELDS_RAW_RESPONSE_DESCRIPTION,
            self::FIELDS_METADATA,
            self::FIELDS_THREE_D_SECURE_STATUS,
            self::FIELDS_THREE_D_SECURE_ECI,
            self::FIELDS_THREE_D_SECURE_AUTH_RESP,
            self::FIELDS_THREE_D_SECURE_METHOD,
            self::FIELDS_BUYER_EXTERNAL_IDENTIFIER,
            self::FIELDS_BILLING_DETAILS_FIRST_NAME,
            self::FIELDS_BILLING_DETAILS_LAST_NAME,
            self::FIELDS_BILLING_DETAILS_EMAIL_ADDRESS,
            self::FIELDS_BILLING_DETAILS_PHONE_NUMBER,
            self::FIELDS_BILLING_DETAILS_ADDRESS_CITY,
            self::FIELDS_BILLING_DETAILS_ADDRESS_COUNTRY,
            self::FIELDS_BILLING_DETAILS_ADDRESS_POSTAL_CODE,
            self::FIELDS_BILLING_DETAILS_ADDRESS_STATE,
            self::FIELDS_BILLING_DETAILS_ADDRESS_STATE_CODE,
            self::FIELDS_BILLING_DETAILS_ADDRESS_HOUSE_NUMBER_OR_NAME,
            self::FIELDS_BILLING_DETAILS_ADDRESS_LINE1,
            self::FIELDS_BILLING_DETAILS_ADDRESS_LINE2,
            self::FIELDS_BILLING_DETAILS_ADDRESS_ORGANIZATION,
            self::FIELDS_BILLING_DETAILS_TAX_ID,
            self::FIELDS_BILLING_DETAILS_TAX_ID_KIND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fields'] = $data['fields'] ?? null;
        $this->container['filters'] = $data['filters'] ?? null;
        $this->container['sort'] = $data['sort'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields A list of fields for the report.
     *
     * @return self
     */
    public function setFields($fields)
    {
        $allowedValues = $this->getFieldsAllowableValues();
        if (!is_null($fields) && array_diff($fields, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fields', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Gr4vy\model\ReportSpecParamsFilters|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Gr4vy\model\ReportSpecParamsFilters|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return object[]|null
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param object[]|null $sort A list of fields to sort the report.
     *
     * @return self
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


