<?php
/**
 * ReportSpecParamsFilters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * ReportSpecParamsFilters Class Doc Comment
 *
 * @category Class
 * @description The filters for the report.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReportSpecParamsFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportSpec_params_filters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string[]',
        'created_at' => 'string',
        'updated_at' => 'string',
        'authorized_at' => 'string',
        'captured_at' => 'string',
        'voided_at' => 'string',
        'currency' => 'string[]',
        'method' => 'string[]',
        'scheme' => 'string[]',
        'metadata' => 'string[]',
        'three_d_secure_status' => 'string[]',
        'three_d_secure_eci' => 'string[]',
        'three_d_secure_auth_resp' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'created_at' => null,
        'updated_at' => null,
        'authorized_at' => null,
        'captured_at' => null,
        'voided_at' => null,
        'currency' => null,
        'method' => null,
        'scheme' => null,
        'metadata' => null,
        'three_d_secure_status' => null,
        'three_d_secure_eci' => null,
        'three_d_secure_auth_resp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'authorized_at' => 'authorized_at',
        'captured_at' => 'captured_at',
        'voided_at' => 'voided_at',
        'currency' => 'currency',
        'method' => 'method',
        'scheme' => 'scheme',
        'metadata' => 'metadata',
        'three_d_secure_status' => 'three_d_secure_status',
        'three_d_secure_eci' => 'three_d_secure_eci',
        'three_d_secure_auth_resp' => 'three_d_secure_auth_resp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'authorized_at' => 'setAuthorizedAt',
        'captured_at' => 'setCapturedAt',
        'voided_at' => 'setVoidedAt',
        'currency' => 'setCurrency',
        'method' => 'setMethod',
        'scheme' => 'setScheme',
        'metadata' => 'setMetadata',
        'three_d_secure_status' => 'setThreeDSecureStatus',
        'three_d_secure_eci' => 'setThreeDSecureEci',
        'three_d_secure_auth_resp' => 'setThreeDSecureAuthResp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'authorized_at' => 'getAuthorizedAt',
        'captured_at' => 'getCapturedAt',
        'voided_at' => 'getVoidedAt',
        'currency' => 'getCurrency',
        'method' => 'getMethod',
        'scheme' => 'getScheme',
        'metadata' => 'getMetadata',
        'three_d_secure_status' => 'getThreeDSecureStatus',
        'three_d_secure_eci' => 'getThreeDSecureEci',
        'three_d_secure_auth_resp' => 'getThreeDSecureAuthResp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['authorized_at'] = $data['authorized_at'] ?? null;
        $this->container['captured_at'] = $data['captured_at'] ?? null;
        $this->container['voided_at'] = $data['voided_at'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['scheme'] = $data['scheme'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['three_d_secure_status'] = $data['three_d_secure_status'] ?? null;
        $this->container['three_d_secure_eci'] = $data['three_d_secure_eci'] ?? null;
        $this->container['three_d_secure_auth_resp'] = $data['three_d_secure_auth_resp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string[]|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string[]|null $status A list of status' to filter by.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The created date and time to filter by.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The updated date and time to filter by.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets authorized_at
     *
     * @return string|null
     */
    public function getAuthorizedAt()
    {
        return $this->container['authorized_at'];
    }

    /**
     * Sets authorized_at
     *
     * @param string|null $authorized_at The authorized date and time to filter by.
     *
     * @return self
     */
    public function setAuthorizedAt($authorized_at)
    {
        $this->container['authorized_at'] = $authorized_at;

        return $this;
    }

    /**
     * Gets captured_at
     *
     * @return string|null
     */
    public function getCapturedAt()
    {
        return $this->container['captured_at'];
    }

    /**
     * Sets captured_at
     *
     * @param string|null $captured_at The captured date and time to filter by.
     *
     * @return self
     */
    public function setCapturedAt($captured_at)
    {
        $this->container['captured_at'] = $captured_at;

        return $this;
    }

    /**
     * Gets voided_at
     *
     * @return string|null
     */
    public function getVoidedAt()
    {
        return $this->container['voided_at'];
    }

    /**
     * Sets voided_at
     *
     * @param string|null $voided_at The voided date and time to filter by.
     *
     * @return self
     */
    public function setVoidedAt($voided_at)
    {
        $this->container['voided_at'] = $voided_at;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string[]|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string[]|null $currency A list of currencies to filter by.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string[]|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string[]|null $method A list of methods to filter by.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string[]|null
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string[]|null $scheme A list of schemes to filter by.
     *
     * @return self
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string[]|null $metadata A list of metadata to filter by.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets three_d_secure_status
     *
     * @return string[]|null
     */
    public function getThreeDSecureStatus()
    {
        return $this->container['three_d_secure_status'];
    }

    /**
     * Sets three_d_secure_status
     *
     * @param string[]|null $three_d_secure_status A list of 3DS status to filter by.
     *
     * @return self
     */
    public function setThreeDSecureStatus($three_d_secure_status)
    {
        $this->container['three_d_secure_status'] = $three_d_secure_status;

        return $this;
    }

    /**
     * Gets three_d_secure_eci
     *
     * @return string[]|null
     */
    public function getThreeDSecureEci()
    {
        return $this->container['three_d_secure_eci'];
    }

    /**
     * Sets three_d_secure_eci
     *
     * @param string[]|null $three_d_secure_eci A list of electric commerce indicators to filter by.
     *
     * @return self
     */
    public function setThreeDSecureEci($three_d_secure_eci)
    {
        $this->container['three_d_secure_eci'] = $three_d_secure_eci;

        return $this;
    }

    /**
     * Gets three_d_secure_auth_resp
     *
     * @return string[]|null
     */
    public function getThreeDSecureAuthResp()
    {
        return $this->container['three_d_secure_auth_resp'];
    }

    /**
     * Sets three_d_secure_auth_resp
     *
     * @param string[]|null $three_d_secure_auth_resp A list of 3DS responses to filter by.
     *
     * @return self
     */
    public function setThreeDSecureAuthResp($three_d_secure_auth_resp)
    {
        $this->container['three_d_secure_auth_resp'] = $three_d_secure_auth_resp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


