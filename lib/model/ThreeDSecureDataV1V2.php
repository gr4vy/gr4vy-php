<?php
/**
 * ThreeDSecureDataV1V2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * ThreeDSecureDataV1V2 Class Doc Comment
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ThreeDSecureDataV1V2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThreeDSecureDataV1V2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cavv' => 'string',
        'eci' => 'string',
        'version' => 'string',
        'directory_response' => 'string',
        'scheme' => 'string',
        'authentication_response' => 'string',
        'cavv_algorithm' => 'string',
        'xid' => 'string',
        'directory_transaction_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cavv' => null,
        'eci' => null,
        'version' => null,
        'directory_response' => null,
        'scheme' => null,
        'authentication_response' => null,
        'cavv_algorithm' => null,
        'xid' => null,
        'directory_transaction_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cavv' => 'cavv',
        'eci' => 'eci',
        'version' => 'version',
        'directory_response' => 'directory_response',
        'scheme' => 'scheme',
        'authentication_response' => 'authentication_response',
        'cavv_algorithm' => 'cavv_algorithm',
        'xid' => 'xid',
        'directory_transaction_id' => 'directory_transaction_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cavv' => 'setCavv',
        'eci' => 'setEci',
        'version' => 'setVersion',
        'directory_response' => 'setDirectoryResponse',
        'scheme' => 'setScheme',
        'authentication_response' => 'setAuthenticationResponse',
        'cavv_algorithm' => 'setCavvAlgorithm',
        'xid' => 'setXid',
        'directory_transaction_id' => 'setDirectoryTransactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cavv' => 'getCavv',
        'eci' => 'getEci',
        'version' => 'getVersion',
        'directory_response' => 'getDirectoryResponse',
        'scheme' => 'getScheme',
        'authentication_response' => 'getAuthenticationResponse',
        'cavv_algorithm' => 'getCavvAlgorithm',
        'xid' => 'getXid',
        'directory_transaction_id' => 'getDirectoryTransactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DIRECTORY_RESPONSE_C = 'C';
    public const DIRECTORY_RESPONSE_Y = 'Y';
    public const DIRECTORY_RESPONSE_A = 'A';
    public const DIRECTORY_RESPONSE_N = 'N';
    public const DIRECTORY_RESPONSE_R = 'R';
    public const DIRECTORY_RESPONSE_U = 'U';
    public const SCHEME_ACCEL = 'accel';
    public const SCHEME_AMEX = 'amex';
    public const SCHEME_BANCONTACT = 'bancontact';
    public const SCHEME_CARTE_BANCAIRE = 'carte-bancaire';
    public const SCHEME_CIRRUS = 'cirrus';
    public const SCHEME_CULIANCE = 'culiance';
    public const SCHEME_DANKORT = 'dankort';
    public const SCHEME_DINERS_CLUB = 'diners-club';
    public const SCHEME_DISCOVER = 'discover';
    public const SCHEME_EFTPOS_AUSTRALIA = 'eftpos-australia';
    public const SCHEME_ELO = 'elo';
    public const SCHEME_HIPERCARD = 'hipercard';
    public const SCHEME_JCB = 'jcb';
    public const SCHEME_MAESTRO = 'maestro';
    public const SCHEME_MASTERCARD = 'mastercard';
    public const SCHEME_NYCE = 'nyce';
    public const SCHEME_OTHER = 'other';
    public const SCHEME_PULSE = 'pulse';
    public const SCHEME_RUPAY = 'rupay';
    public const SCHEME_STAR = 'star';
    public const SCHEME_UNIONPAY = 'unionpay';
    public const SCHEME_VISA = 'visa';
    public const AUTHENTICATION_RESPONSE_Y = 'Y';
    public const AUTHENTICATION_RESPONSE_A = 'A';
    public const AUTHENTICATION_RESPONSE_N = 'N';
    public const AUTHENTICATION_RESPONSE_R = 'R';
    public const AUTHENTICATION_RESPONSE_U = 'U';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectoryResponseAllowableValues()
    {
        return [
            self::DIRECTORY_RESPONSE_C,
            self::DIRECTORY_RESPONSE_Y,
            self::DIRECTORY_RESPONSE_A,
            self::DIRECTORY_RESPONSE_N,
            self::DIRECTORY_RESPONSE_R,
            self::DIRECTORY_RESPONSE_U,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchemeAllowableValues()
    {
        return [
            self::SCHEME_ACCEL,
            self::SCHEME_AMEX,
            self::SCHEME_BANCONTACT,
            self::SCHEME_CARTE_BANCAIRE,
            self::SCHEME_CIRRUS,
            self::SCHEME_CULIANCE,
            self::SCHEME_DANKORT,
            self::SCHEME_DINERS_CLUB,
            self::SCHEME_DISCOVER,
            self::SCHEME_EFTPOS_AUSTRALIA,
            self::SCHEME_ELO,
            self::SCHEME_HIPERCARD,
            self::SCHEME_JCB,
            self::SCHEME_MAESTRO,
            self::SCHEME_MASTERCARD,
            self::SCHEME_NYCE,
            self::SCHEME_OTHER,
            self::SCHEME_PULSE,
            self::SCHEME_RUPAY,
            self::SCHEME_STAR,
            self::SCHEME_UNIONPAY,
            self::SCHEME_VISA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationResponseAllowableValues()
    {
        return [
            self::AUTHENTICATION_RESPONSE_Y,
            self::AUTHENTICATION_RESPONSE_A,
            self::AUTHENTICATION_RESPONSE_N,
            self::AUTHENTICATION_RESPONSE_R,
            self::AUTHENTICATION_RESPONSE_U,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cavv'] = $data['cavv'] ?? null;
        $this->container['eci'] = $data['eci'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['directory_response'] = $data['directory_response'] ?? null;
        $this->container['scheme'] = $data['scheme'] ?? null;
        $this->container['authentication_response'] = $data['authentication_response'] ?? null;
        $this->container['cavv_algorithm'] = $data['cavv_algorithm'] ?? null;
        $this->container['xid'] = $data['xid'] ?? null;
        $this->container['directory_transaction_id'] = $data['directory_transaction_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cavv'] === null) {
            $invalidProperties[] = "'cavv' can't be null";
        }
        if ($this->container['eci'] === null) {
            $invalidProperties[] = "'eci' can't be null";
        }
        if ((mb_strlen($this->container['eci']) > 2)) {
            $invalidProperties[] = "invalid value for 'eci', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['eci']) < 1)) {
            $invalidProperties[] = "invalid value for 'eci', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^0?\\d$/", $this->container['eci'])) {
            $invalidProperties[] = "invalid value for 'eci', must be conform to the pattern /^0?\\d$/.";
        }

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if (!preg_match("/^[1-2].?[\\d+.?]{0,3}$/", $this->container['version'])) {
            $invalidProperties[] = "invalid value for 'version', must be conform to the pattern /^[1-2].?[\\d+.?]{0,3}$/.";
        }

        if ($this->container['directory_response'] === null) {
            $invalidProperties[] = "'directory_response' can't be null";
        }
        $allowedValues = $this->getDirectoryResponseAllowableValues();
        if (!is_null($this->container['directory_response']) && !in_array($this->container['directory_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'directory_response', must be one of '%s'",
                $this->container['directory_response'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['directory_response']) > 1)) {
            $invalidProperties[] = "invalid value for 'directory_response', the character length must be smaller than or equal to 1.";
        }

        $allowedValues = $this->getSchemeAllowableValues();
        if (!is_null($this->container['scheme']) && !in_array($this->container['scheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scheme', must be one of '%s'",
                $this->container['scheme'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['authentication_response'] === null) {
            $invalidProperties[] = "'authentication_response' can't be null";
        }
        $allowedValues = $this->getAuthenticationResponseAllowableValues();
        if (!is_null($this->container['authentication_response']) && !in_array($this->container['authentication_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication_response', must be one of '%s'",
                $this->container['authentication_response'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['authentication_response']) > 1)) {
            $invalidProperties[] = "invalid value for 'authentication_response', the character length must be smaller than or equal to 1.";
        }

        if ($this->container['cavv_algorithm'] === null) {
            $invalidProperties[] = "'cavv_algorithm' can't be null";
        }
        if ((mb_strlen($this->container['cavv_algorithm']) > 1)) {
            $invalidProperties[] = "invalid value for 'cavv_algorithm', the character length must be smaller than or equal to 1.";
        }

        if ($this->container['xid'] === null) {
            $invalidProperties[] = "'xid' can't be null";
        }
        if ($this->container['directory_transaction_id'] === null) {
            $invalidProperties[] = "'directory_transaction_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cavv
     *
     * @return string
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string $cavv The cardholder authentication value or AAV.
     *
     * @return self
     */
    public function setCavv($cavv)
    {
        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets eci
     *
     * @return string
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string $eci The electronic commerce indicator for the 3DS transaction.
     *
     * @return self
     */
    public function setEci($eci)
    {
        if ((mb_strlen($eci) > 2)) {
            throw new \InvalidArgumentException('invalid length for $eci when calling ThreeDSecureDataV1V2., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($eci) < 1)) {
            throw new \InvalidArgumentException('invalid length for $eci when calling ThreeDSecureDataV1V2., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^0?\\d$/", $eci))) {
            throw new \InvalidArgumentException("invalid value for $eci when calling ThreeDSecureDataV1V2., must conform to the pattern /^0?\\d$/.");
        }

        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The version of 3-D Secure that was used.
     *
     * @return self
     */
    public function setVersion($version)
    {

        if ((!preg_match("/^[1-2].?[\\d+.?]{0,3}$/", $version))) {
            throw new \InvalidArgumentException("invalid value for $version when calling ThreeDSecureDataV1V2., must conform to the pattern /^[1-2].?[\\d+.?]{0,3}$/.");
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets directory_response
     *
     * @return string
     */
    public function getDirectoryResponse()
    {
        return $this->container['directory_response'];
    }

    /**
     * Sets directory_response
     *
     * @param string $directory_response The transaction status received as part of the authentication request.
     *
     * @return self
     */
    public function setDirectoryResponse($directory_response)
    {
        $allowedValues = $this->getDirectoryResponseAllowableValues();
        if (!in_array($directory_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'directory_response', must be one of '%s'",
                    $directory_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($directory_response) > 1)) {
            throw new \InvalidArgumentException('invalid length for $directory_response when calling ThreeDSecureDataV1V2., must be smaller than or equal to 1.');
        }

        $this->container['directory_response'] = $directory_response;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string|null
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string|null $scheme The scheme/brand of the card that is used for 3-D Secure.
     *
     * @return self
     */
    public function setScheme($scheme)
    {
        $allowedValues = $this->getSchemeAllowableValues();
        if (!is_null($scheme) && !in_array($scheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scheme', must be one of '%s'",
                    $scheme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets authentication_response
     *
     * @return string
     */
    public function getAuthenticationResponse()
    {
        return $this->container['authentication_response'];
    }

    /**
     * Sets authentication_response
     *
     * @param string $authentication_response The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
     *
     * @return self
     */
    public function setAuthenticationResponse($authentication_response)
    {
        $allowedValues = $this->getAuthenticationResponseAllowableValues();
        if (!in_array($authentication_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication_response', must be one of '%s'",
                    $authentication_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($authentication_response) > 1)) {
            throw new \InvalidArgumentException('invalid length for $authentication_response when calling ThreeDSecureDataV1V2., must be smaller than or equal to 1.');
        }

        $this->container['authentication_response'] = $authentication_response;

        return $this;
    }

    /**
     * Gets cavv_algorithm
     *
     * @return string
     */
    public function getCavvAlgorithm()
    {
        return $this->container['cavv_algorithm'];
    }

    /**
     * Sets cavv_algorithm
     *
     * @param string $cavv_algorithm The CAVV algorithm used.
     *
     * @return self
     */
    public function setCavvAlgorithm($cavv_algorithm)
    {
        if ((mb_strlen($cavv_algorithm) > 1)) {
            throw new \InvalidArgumentException('invalid length for $cavv_algorithm when calling ThreeDSecureDataV1V2., must be smaller than or equal to 1.');
        }

        $this->container['cavv_algorithm'] = $cavv_algorithm;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string $xid The transaction identifier.
     *
     * @return self
     */
    public function setXid($xid)
    {
        $this->container['xid'] = $xid;

        return $this;
    }

    /**
     * Gets directory_transaction_id
     *
     * @return string
     */
    public function getDirectoryTransactionId()
    {
        return $this->container['directory_transaction_id'];
    }

    /**
     * Sets directory_transaction_id
     *
     * @param string $directory_transaction_id The transaction identifier.
     *
     * @return self
     */
    public function setDirectoryTransactionId($directory_transaction_id)
    {
        $this->container['directory_transaction_id'] = $directory_transaction_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


