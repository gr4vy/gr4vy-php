<?php
/**
 * ThreeDSecureSummaryErrorData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * ThreeDSecureSummaryErrorData Class Doc Comment
 *
 * @category Class
 * @description The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of &#x60;N&#x60;, &#x60;R&#x60;, or &#x60;U&#x60;.  To see full details about the 3DS calls in those situations please use our transaction events API.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ThreeDSecureSummaryErrorData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThreeDSecureSummary_error_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'detail' => 'string',
        'code' => 'string',
        'component' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'detail' => null,
        'code' => null,
        'component' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'detail' => 'detail',
        'code' => 'code',
        'component' => 'component'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'detail' => 'setDetail',
        'code' => 'setCode',
        'component' => 'setComponent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'detail' => 'getDetail',
        'code' => 'getCode',
        'component' => 'getComponent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = $data['description'] ?? null;
        $this->container['detail'] = $data['detail'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['component'] = $data['component'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 2048)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2048.";
        }

        if ($this->container['detail'] === null) {
            $invalidProperties[] = "'detail' can't be null";
        }
        if ((mb_strlen($this->container['detail']) > 2048)) {
            $invalidProperties[] = "invalid value for 'detail', the character length must be smaller than or equal to 2048.";
        }

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 3)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['code']) < 3)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['component'] === null) {
            $invalidProperties[] = "'component' can't be null";
        }
        if ((mb_strlen($this->container['component']) > 1)) {
            $invalidProperties[] = "invalid value for 'component', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['component']) < 1)) {
            $invalidProperties[] = "invalid value for 'component', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The error description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ThreeDSecureSummaryErrorData., must be smaller than or equal to 2048.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets detail
     *
     * @return string
     */
    public function getDetail()
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     *
     * @param string $detail Detail for the error.
     *
     * @return self
     */
    public function setDetail($detail)
    {
        if ((mb_strlen($detail) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $detail when calling ThreeDSecureSummaryErrorData., must be smaller than or equal to 2048.');
        }

        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The error code.
     *
     * @return self
     */
    public function setCode($code)
    {
        if ((mb_strlen($code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ThreeDSecureSummaryErrorData., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ThreeDSecureSummaryErrorData., must be bigger than or equal to 3.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets component
     *
     * @return string
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string $component Code indicating the 3-D Secure component that identified the error..
     *
     * @return self
     */
    public function setComponent($component)
    {
        if ((mb_strlen($component) > 1)) {
            throw new \InvalidArgumentException('invalid length for $component when calling ThreeDSecureSummaryErrorData., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($component) < 1)) {
            throw new \InvalidArgumentException('invalid length for $component when calling ThreeDSecureSummaryErrorData., must be bigger than or equal to 1.');
        }

        $this->container['component'] = $component;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


