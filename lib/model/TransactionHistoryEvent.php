<?php
/**
 * TransactionHistoryEvent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * TransactionHistoryEvent Class Doc Comment
 *
 * @category Class
 * @description A generic transaction history event.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionHistoryEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionHistoryEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'name' => 'string',
        'created_at' => '\DateTime',
        'context' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => 'uuid',
        'name' => null,
        'created_at' => 'date-time',
        'context' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'name' => 'name',
        'created_at' => 'created_at',
        'context' => 'context'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'name' => 'setName',
        'created_at' => 'setCreatedAt',
        'context' => 'setContext'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'name' => 'getName',
        'created_at' => 'getCreatedAt',
        'context' => 'getContext'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_TRANSACTION_EVENT = 'transaction-event';
    public const NAME_ANTI_FRAUD_DECISION_ERROR = 'anti-fraud-decision-error';
    public const NAME_ANTI_FRAUD_DECISION_SKIPPED = 'anti-fraud-decision-skipped';
    public const NAME_ANTI_FRAUD_DECISION = 'anti-fraud-decision';
    public const NAME_ANTI_FRAUD_TRANSACTION_STATUS_UPDATE = 'anti-fraud-transaction-status-update';
    public const NAME_ANTI_FRAUD_TRANSACTION_STATUS_UPDATE_ERROR = 'anti-fraud-transaction-status-update-error';
    public const NAME_ANTI_FRAUD_WEBHOOK = 'anti-fraud-webhook';
    public const NAME_BIN_LOOKUP_REQUEST = 'bin-lookup-request';
    public const NAME_DIGITAL_WALLET_APPLE_PAY_TOKEN_DECRYPTED = 'digital-wallet-apple-pay-token-decrypted';
    public const NAME_DIGITAL_WALLET_GOOGLE_PAY_TOKEN_DECRYPTED = 'digital-wallet-google-pay-token-decrypted';
    public const NAME_DIGITAL_WALLET_CLICK_TO_PAY_TOKEN_DECRYPTED = 'digital-wallet-click-to-pay-token-decrypted';
    public const NAME_GIFT_CARD_REDEMPTION_FAILED = 'gift-card-redemption-failed';
    public const NAME_GIFT_CARD_REDEMPTION_SUCCEEDED = 'gift-card-redemption-succeeded';
    public const NAME_GIFT_CARD_REFUND_FAILED = 'gift-card-refund-failed';
    public const NAME_GIFT_CARD_REFUND_SUCCEEDED = 'gift-card-refund-succeeded';
    public const NAME_NETWORK_TOKEN_CRYPTOGRAM_PROVISION_FAILED = 'network-token-cryptogram-provision-failed';
    public const NAME_NETWORK_TOKEN_CRYPTOGRAM_PROVISION_SUCCEEDED = 'network-token-cryptogram-provision-succeeded';
    public const NAME_NETWORK_TOKEN_PROVISION_FAILED = 'network-token-provision-failed';
    public const NAME_NETWORK_TOKEN_PROVISION_SUCCEEDED = 'network-token-provision-succeeded';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_FAILED = 'payment-connector-response-transaction-authorization-failed';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_SUCCEEDED = 'payment-connector-response-transaction-authorization-succeeded';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_DECLINED = 'payment-connector-response-transaction-capture-declined';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_FAILED = 'payment-connector-response-transaction-capture-failed';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_SUCCEEDED = 'payment-connector-response-transaction-capture-succeeded';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_DECLINED = 'payment-connector-response-transaction-declined';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_DECLINED = 'payment-connector-response-transaction-void-declined';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_FAILED = 'payment-connector-response-transaction-void-failed';
    public const NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_SUCCEEDED = 'payment-connector-response-transaction-void-succeeded';
    public const NAME_PAYMENT_CONNECTOR_EXTERNAL_TRANSACTION_REQUEST = 'payment-connector-external-transaction-request';
    public const NAME_THREE_D_SECURE_AUTHENTICATION_REQUEST = 'three-d-secure-authentication-request';
    public const NAME_THREE_D_SECURE_PREPARATION_REQUEST = 'three-d-secure-preparation-request';
    public const NAME_THREE_D_SECURE_REQUEST_ERROR = 'three-d-secure-request-error';
    public const NAME_THREE_D_SECURE_RESULT_REQUEST = 'three-d-secure-result-request';
    public const NAME_THREE_D_SECURE_SUCCESS = 'three-d-secure-success';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRANSACTION_EVENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_ANTI_FRAUD_DECISION_ERROR,
            self::NAME_ANTI_FRAUD_DECISION_SKIPPED,
            self::NAME_ANTI_FRAUD_DECISION,
            self::NAME_ANTI_FRAUD_TRANSACTION_STATUS_UPDATE,
            self::NAME_ANTI_FRAUD_TRANSACTION_STATUS_UPDATE_ERROR,
            self::NAME_ANTI_FRAUD_WEBHOOK,
            self::NAME_BIN_LOOKUP_REQUEST,
            self::NAME_DIGITAL_WALLET_APPLE_PAY_TOKEN_DECRYPTED,
            self::NAME_DIGITAL_WALLET_GOOGLE_PAY_TOKEN_DECRYPTED,
            self::NAME_DIGITAL_WALLET_CLICK_TO_PAY_TOKEN_DECRYPTED,
            self::NAME_GIFT_CARD_REDEMPTION_FAILED,
            self::NAME_GIFT_CARD_REDEMPTION_SUCCEEDED,
            self::NAME_GIFT_CARD_REFUND_FAILED,
            self::NAME_GIFT_CARD_REFUND_SUCCEEDED,
            self::NAME_NETWORK_TOKEN_CRYPTOGRAM_PROVISION_FAILED,
            self::NAME_NETWORK_TOKEN_CRYPTOGRAM_PROVISION_SUCCEEDED,
            self::NAME_NETWORK_TOKEN_PROVISION_FAILED,
            self::NAME_NETWORK_TOKEN_PROVISION_SUCCEEDED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_FAILED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_AUTHORIZATION_SUCCEEDED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_DECLINED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_FAILED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_CAPTURE_SUCCEEDED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_DECLINED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_DECLINED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_FAILED,
            self::NAME_PAYMENT_CONNECTOR_RESPONSE_TRANSACTION_VOID_SUCCEEDED,
            self::NAME_PAYMENT_CONNECTOR_EXTERNAL_TRANSACTION_REQUEST,
            self::NAME_THREE_D_SECURE_AUTHENTICATION_REQUEST,
            self::NAME_THREE_D_SECURE_PREPARATION_REQUEST,
            self::NAME_THREE_D_SECURE_REQUEST_ERROR,
            self::NAME_THREE_D_SECURE_RESULT_REQUEST,
            self::NAME_THREE_D_SECURE_SUCCESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['context'] = $data['context'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($this->container['name']) && !in_array($this->container['name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'name', must be one of '%s'",
                $this->container['name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of this resource. Is always `transaction-event`.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for this event.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of this resource.
     *
     * @return self
     */
    public function setName($name)
    {
        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($name) && !in_array($name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'name', must be one of '%s'",
                    $name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when this transaction was created in our system.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets context
     *
     * @return array<string,mixed>|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param array<string,mixed>|null $context A list of key/values with additional data.
     *
     * @return self
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


