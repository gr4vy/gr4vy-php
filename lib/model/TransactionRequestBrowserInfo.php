<?php
/**
 * TransactionRequestBrowserInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * TransactionRequestBrowserInfo Class Doc Comment
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionRequestBrowserInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRequest_browser_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'java_enabled' => 'bool',
        'javascript_enabled' => 'bool',
        'language' => 'string',
        'color_depth' => 'float',
        'screen_height' => 'float',
        'screen_width' => 'float',
        'time_zone_offset' => 'float',
        'user_device' => 'string',
        'user_agent' => 'string',
        'accept_header' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'java_enabled' => null,
        'javascript_enabled' => null,
        'language' => null,
        'color_depth' => null,
        'screen_height' => null,
        'screen_width' => null,
        'time_zone_offset' => null,
        'user_device' => null,
        'user_agent' => null,
        'accept_header' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'java_enabled' => 'java_enabled',
        'javascript_enabled' => 'javascript_enabled',
        'language' => 'language',
        'color_depth' => 'color_depth',
        'screen_height' => 'screen_height',
        'screen_width' => 'screen_width',
        'time_zone_offset' => 'time_zone_offset',
        'user_device' => 'user_device',
        'user_agent' => 'user_agent',
        'accept_header' => 'accept_header'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'java_enabled' => 'setJavaEnabled',
        'javascript_enabled' => 'setJavascriptEnabled',
        'language' => 'setLanguage',
        'color_depth' => 'setColorDepth',
        'screen_height' => 'setScreenHeight',
        'screen_width' => 'setScreenWidth',
        'time_zone_offset' => 'setTimeZoneOffset',
        'user_device' => 'setUserDevice',
        'user_agent' => 'setUserAgent',
        'accept_header' => 'setAcceptHeader'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'java_enabled' => 'getJavaEnabled',
        'javascript_enabled' => 'getJavascriptEnabled',
        'language' => 'getLanguage',
        'color_depth' => 'getColorDepth',
        'screen_height' => 'getScreenHeight',
        'screen_width' => 'getScreenWidth',
        'time_zone_offset' => 'getTimeZoneOffset',
        'user_device' => 'getUserDevice',
        'user_agent' => 'getUserAgent',
        'accept_header' => 'getAcceptHeader'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const USER_DEVICE_DESKTOP = 'desktop';
    public const USER_DEVICE_MOBILE = 'mobile';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserDeviceAllowableValues()
    {
        return [
            self::USER_DEVICE_DESKTOP,
            self::USER_DEVICE_MOBILE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['java_enabled'] = $data['java_enabled'] ?? null;
        $this->container['javascript_enabled'] = $data['javascript_enabled'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['color_depth'] = $data['color_depth'] ?? null;
        $this->container['screen_height'] = $data['screen_height'] ?? null;
        $this->container['screen_width'] = $data['screen_width'] ?? null;
        $this->container['time_zone_offset'] = $data['time_zone_offset'] ?? null;
        $this->container['user_device'] = $data['user_device'] ?? null;
        $this->container['user_agent'] = $data['user_agent'] ?? null;
        $this->container['accept_header'] = $data['accept_header'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['java_enabled'] === null) {
            $invalidProperties[] = "'java_enabled' can't be null";
        }
        if ($this->container['javascript_enabled'] === null) {
            $invalidProperties[] = "'javascript_enabled' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['color_depth'] === null) {
            $invalidProperties[] = "'color_depth' can't be null";
        }
        if ($this->container['screen_height'] === null) {
            $invalidProperties[] = "'screen_height' can't be null";
        }
        if ($this->container['screen_width'] === null) {
            $invalidProperties[] = "'screen_width' can't be null";
        }
        if ($this->container['time_zone_offset'] === null) {
            $invalidProperties[] = "'time_zone_offset' can't be null";
        }
        if ($this->container['user_device'] === null) {
            $invalidProperties[] = "'user_device' can't be null";
        }
        $allowedValues = $this->getUserDeviceAllowableValues();
        if (!is_null($this->container['user_device']) && !in_array($this->container['user_device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_device', must be one of '%s'",
                $this->container['user_device'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_agent'] === null) {
            $invalidProperties[] = "'user_agent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets java_enabled
     *
     * @return bool
     */
    public function getJavaEnabled()
    {
        return $this->container['java_enabled'];
    }

    /**
     * Sets java_enabled
     *
     * @param bool $java_enabled Indicates whether the client browser supports Java.
     *
     * @return self
     */
    public function setJavaEnabled($java_enabled)
    {
        $this->container['java_enabled'] = $java_enabled;

        return $this;
    }

    /**
     * Gets javascript_enabled
     *
     * @return bool
     */
    public function getJavascriptEnabled()
    {
        return $this->container['javascript_enabled'];
    }

    /**
     * Sets javascript_enabled
     *
     * @param bool $javascript_enabled Indicates whether the client browser supports JavaScript.
     *
     * @return self
     */
    public function setJavascriptEnabled($javascript_enabled)
    {
        $this->container['javascript_enabled'] = $javascript_enabled;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The preferred language of the buyer, usually the language of the browser UI.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets color_depth
     *
     * @return float
     */
    public function getColorDepth()
    {
        return $this->container['color_depth'];
    }

    /**
     * Sets color_depth
     *
     * @param float $color_depth The color depth of the screen.
     *
     * @return self
     */
    public function setColorDepth($color_depth)
    {
        $this->container['color_depth'] = $color_depth;

        return $this;
    }

    /**
     * Gets screen_height
     *
     * @return float
     */
    public function getScreenHeight()
    {
        return $this->container['screen_height'];
    }

    /**
     * Sets screen_height
     *
     * @param float $screen_height The height of the screen in pixels.
     *
     * @return self
     */
    public function setScreenHeight($screen_height)
    {
        $this->container['screen_height'] = $screen_height;

        return $this;
    }

    /**
     * Gets screen_width
     *
     * @return float
     */
    public function getScreenWidth()
    {
        return $this->container['screen_width'];
    }

    /**
     * Sets screen_width
     *
     * @param float $screen_width The width of the screen in pixels.
     *
     * @return self
     */
    public function setScreenWidth($screen_width)
    {
        $this->container['screen_width'] = $screen_width;

        return $this;
    }

    /**
     * Gets time_zone_offset
     *
     * @return float
     */
    public function getTimeZoneOffset()
    {
        return $this->container['time_zone_offset'];
    }

    /**
     * Sets time_zone_offset
     *
     * @param float $time_zone_offset Time-zone offset in minutes between UTC and buyer location.
     *
     * @return self
     */
    public function setTimeZoneOffset($time_zone_offset)
    {
        $this->container['time_zone_offset'] = $time_zone_offset;

        return $this;
    }

    /**
     * Gets user_device
     *
     * @return string
     */
    public function getUserDevice()
    {
        return $this->container['user_device'];
    }

    /**
     * Sets user_device
     *
     * @param string $user_device The platform that is being used to access the website.
     *
     * @return self
     */
    public function setUserDevice($user_device)
    {
        $allowedValues = $this->getUserDeviceAllowableValues();
        if (!in_array($user_device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_device', must be one of '%s'",
                    $user_device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_device'] = $user_device;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent The user agent string for the current browser.
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets accept_header
     *
     * @return string|null
     */
    public function getAcceptHeader()
    {
        return $this->container['accept_header'];
    }

    /**
     * Sets accept_header
     *
     * @param string|null $accept_header The `Accept` header of the request from the buyer's browser.
     *
     * @return self
     */
    public function setAcceptHeader($accept_header)
    {
        $this->container['accept_header'] = $accept_header;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


