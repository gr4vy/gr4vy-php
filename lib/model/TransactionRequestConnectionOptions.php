<?php
/**
 * TransactionRequestConnectionOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gr4vy\model;

use \ArrayAccess;
use \Gr4vy\ObjectSerializer;

/**
 * TransactionRequestConnectionOptions Class Doc Comment
 *
 * @category Class
 * @description Allows for passing optional configuration per connection to take advantage of connection specific features. When provided, the data is only passed to the target connection type to prevent sharing configuration across connections.  Please note that each of the keys this object are in kebab-case, for example &#x60;cybersource-anti-fraud&#x60; as they represent the ID of the connector. All the other keys will be snake-case, for example &#x60;merchant_defined_data&#x60;.
 * @package  Gr4vy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionRequestConnectionOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRequest_connection_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cybersource_card' => '\Gr4vy\model\ConnectionOptionsCybersourceCard',
        'cybersource_anti_fraud' => '\Gr4vy\model\ConnectionOptionsCybersourceAntiFraud',
        'forter_anti_fraud' => '\Gr4vy\model\ConnectionOptionsForterAntiFraud',
        'adyen_card' => '\Gr4vy\model\ConnectionOptionsAdyenCard',
        'paypal_paypal' => '\Gr4vy\model\ConnectionOptionsPaypalPaypal',
        'paypal_paypalpaylater' => '\Gr4vy\model\ConnectionOptionsPaypalPaypal',
        'stripe_card' => '\Gr4vy\model\ConnectionOptionsStripeCard'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cybersource_card' => null,
        'cybersource_anti_fraud' => null,
        'forter_anti_fraud' => null,
        'adyen_card' => null,
        'paypal_paypal' => null,
        'paypal_paypalpaylater' => null,
        'stripe_card' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cybersource_card' => 'cybersource-card',
        'cybersource_anti_fraud' => 'cybersource-anti-fraud',
        'forter_anti_fraud' => 'forter-anti-fraud',
        'adyen_card' => 'adyen-card',
        'paypal_paypal' => 'paypal-paypal',
        'paypal_paypalpaylater' => 'paypal-paypalpaylater',
        'stripe_card' => 'stripe-card'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cybersource_card' => 'setCybersourceCard',
        'cybersource_anti_fraud' => 'setCybersourceAntiFraud',
        'forter_anti_fraud' => 'setForterAntiFraud',
        'adyen_card' => 'setAdyenCard',
        'paypal_paypal' => 'setPaypalPaypal',
        'paypal_paypalpaylater' => 'setPaypalPaypalpaylater',
        'stripe_card' => 'setStripeCard'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cybersource_card' => 'getCybersourceCard',
        'cybersource_anti_fraud' => 'getCybersourceAntiFraud',
        'forter_anti_fraud' => 'getForterAntiFraud',
        'adyen_card' => 'getAdyenCard',
        'paypal_paypal' => 'getPaypalPaypal',
        'paypal_paypalpaylater' => 'getPaypalPaypalpaylater',
        'stripe_card' => 'getStripeCard'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cybersource_card'] = $data['cybersource_card'] ?? null;
        $this->container['cybersource_anti_fraud'] = $data['cybersource_anti_fraud'] ?? null;
        $this->container['forter_anti_fraud'] = $data['forter_anti_fraud'] ?? null;
        $this->container['adyen_card'] = $data['adyen_card'] ?? null;
        $this->container['paypal_paypal'] = $data['paypal_paypal'] ?? null;
        $this->container['paypal_paypalpaylater'] = $data['paypal_paypalpaylater'] ?? null;
        $this->container['stripe_card'] = $data['stripe_card'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cybersource_card
     *
     * @return \Gr4vy\model\ConnectionOptionsCybersourceCard|null
     */
    public function getCybersourceCard()
    {
        return $this->container['cybersource_card'];
    }

    /**
     * Sets cybersource_card
     *
     * @param \Gr4vy\model\ConnectionOptionsCybersourceCard|null $cybersource_card cybersource_card
     *
     * @return self
     */
    public function setCybersourceCard($cybersource_card)
    {
        $this->container['cybersource_card'] = $cybersource_card;

        return $this;
    }

    /**
     * Gets cybersource_anti_fraud
     *
     * @return \Gr4vy\model\ConnectionOptionsCybersourceAntiFraud|null
     */
    public function getCybersourceAntiFraud()
    {
        return $this->container['cybersource_anti_fraud'];
    }

    /**
     * Sets cybersource_anti_fraud
     *
     * @param \Gr4vy\model\ConnectionOptionsCybersourceAntiFraud|null $cybersource_anti_fraud cybersource_anti_fraud
     *
     * @return self
     */
    public function setCybersourceAntiFraud($cybersource_anti_fraud)
    {
        $this->container['cybersource_anti_fraud'] = $cybersource_anti_fraud;

        return $this;
    }

    /**
     * Gets forter_anti_fraud
     *
     * @return \Gr4vy\model\ConnectionOptionsForterAntiFraud|null
     */
    public function getForterAntiFraud()
    {
        return $this->container['forter_anti_fraud'];
    }

    /**
     * Sets forter_anti_fraud
     *
     * @param \Gr4vy\model\ConnectionOptionsForterAntiFraud|null $forter_anti_fraud forter_anti_fraud
     *
     * @return self
     */
    public function setForterAntiFraud($forter_anti_fraud)
    {
        $this->container['forter_anti_fraud'] = $forter_anti_fraud;

        return $this;
    }

    /**
     * Gets adyen_card
     *
     * @return \Gr4vy\model\ConnectionOptionsAdyenCard|null
     */
    public function getAdyenCard()
    {
        return $this->container['adyen_card'];
    }

    /**
     * Sets adyen_card
     *
     * @param \Gr4vy\model\ConnectionOptionsAdyenCard|null $adyen_card adyen_card
     *
     * @return self
     */
    public function setAdyenCard($adyen_card)
    {
        $this->container['adyen_card'] = $adyen_card;

        return $this;
    }

    /**
     * Gets paypal_paypal
     *
     * @return \Gr4vy\model\ConnectionOptionsPaypalPaypal|null
     */
    public function getPaypalPaypal()
    {
        return $this->container['paypal_paypal'];
    }

    /**
     * Sets paypal_paypal
     *
     * @param \Gr4vy\model\ConnectionOptionsPaypalPaypal|null $paypal_paypal paypal_paypal
     *
     * @return self
     */
    public function setPaypalPaypal($paypal_paypal)
    {
        $this->container['paypal_paypal'] = $paypal_paypal;

        return $this;
    }

    /**
     * Gets paypal_paypalpaylater
     *
     * @return \Gr4vy\model\ConnectionOptionsPaypalPaypal|null
     */
    public function getPaypalPaypalpaylater()
    {
        return $this->container['paypal_paypalpaylater'];
    }

    /**
     * Sets paypal_paypalpaylater
     *
     * @param \Gr4vy\model\ConnectionOptionsPaypalPaypal|null $paypal_paypalpaylater paypal_paypalpaylater
     *
     * @return self
     */
    public function setPaypalPaypalpaylater($paypal_paypalpaylater)
    {
        $this->container['paypal_paypalpaylater'] = $paypal_paypalpaylater;

        return $this;
    }

    /**
     * Gets stripe_card
     *
     * @return \Gr4vy\model\ConnectionOptionsStripeCard|null
     */
    public function getStripeCard()
    {
        return $this->container['stripe_card'];
    }

    /**
     * Sets stripe_card
     *
     * @param \Gr4vy\model\ConnectionOptionsStripeCard|null $stripe_card stripe_card
     *
     * @return self
     */
    public function setStripeCard($stripe_card)
    {
        $this->container['stripe_card'] = $stripe_card;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


