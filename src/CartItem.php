<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


class CartItem
{
    /**
     * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * The quantity of this item in the cart. This value cannot be negative or zero.
     *
     * @var int $quantity
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('quantity')]
    public int $quantity;

    /**
     * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
     *
     * @var int $unitAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('unit_amount')]
    public int $unitAmount;

    /**
     * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     *
     * @var ?int $discountAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('discount_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $discountAmount = null;

    /**
     * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
     *
     * @var ?int $taxAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $taxAmount = null;

    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     *
     * @var ?string $externalIdentifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_identifier')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalIdentifier = null;

    /**
     * The SKU or product code for the item.
     *
     * @var ?string $sku
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sku')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $sku = null;

    /**
     * The product URL for the item.
     *
     * @var ?string $productUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('product_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $productUrl = null;

    /**
     * The URL for the image of the item.
     *
     * @var ?string $imageUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('image_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $imageUrl = null;

    /**
     * A list of strings containing product categories for the item.
     *
     * @var ?array<string> $categories
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('categories')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $categories = null;

    /**
     * The product type of the cart item.
     *
     * @var ?string $productType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('product_type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $productType = null;

    /**
     * The seller country of the cart item.
     *
     * @var ?string $sellerCountry
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('seller_country')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $sellerCountry = null;

    /**
     * Whether the item is exempt of tax.
     *
     * @var ?bool $taxExempt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_exempt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $taxExempt = null;

    /**
     * The unit of measure or the unit of measure code.
     *
     * @var ?string $unitOfMeasure
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('unit_of_measure')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $unitOfMeasure = null;

    /**
     * Item commodity code. Generally a UNSPSC code.
     *
     * @var ?string $commodityCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('commodity_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $commodityCode = null;

    /**
     * Brief item description.
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     * Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     *
     * @var ?int $dutyAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('duty_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $dutyAmount = null;

    /**
     * Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
     *
     * @var ?int $shippingAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('shipping_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $shippingAmount = null;

    /**
     * @param  string  $name
     * @param  int  $quantity
     * @param  int  $unitAmount
     * @param  ?int  $discountAmount
     * @param  ?int  $taxAmount
     * @param  ?string  $externalIdentifier
     * @param  ?string  $sku
     * @param  ?string  $productUrl
     * @param  ?string  $imageUrl
     * @param  ?array<string>  $categories
     * @param  ?string  $productType
     * @param  ?string  $sellerCountry
     * @param  ?bool  $taxExempt
     * @param  ?string  $unitOfMeasure
     * @param  ?string  $commodityCode
     * @param  ?string  $description
     * @param  ?int  $dutyAmount
     * @param  ?int  $shippingAmount
     * @phpstan-pure
     */
    public function __construct(string $name, int $quantity, int $unitAmount, ?int $discountAmount = null, ?int $taxAmount = null, ?string $externalIdentifier = null, ?string $sku = null, ?string $productUrl = null, ?string $imageUrl = null, ?array $categories = null, ?string $productType = null, ?string $sellerCountry = null, ?bool $taxExempt = null, ?string $unitOfMeasure = null, ?string $commodityCode = null, ?string $description = null, ?int $dutyAmount = null, ?int $shippingAmount = null)
    {
        $this->name = $name;
        $this->quantity = $quantity;
        $this->unitAmount = $unitAmount;
        $this->discountAmount = $discountAmount;
        $this->taxAmount = $taxAmount;
        $this->externalIdentifier = $externalIdentifier;
        $this->sku = $sku;
        $this->productUrl = $productUrl;
        $this->imageUrl = $imageUrl;
        $this->categories = $categories;
        $this->productType = $productType;
        $this->sellerCountry = $sellerCountry;
        $this->taxExempt = $taxExempt;
        $this->unitOfMeasure = $unitOfMeasure;
        $this->commodityCode = $commodityCode;
        $this->description = $description;
        $this->dutyAmount = $dutyAmount;
        $this->shippingAmount = $shippingAmount;
    }
}