<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;

use Gr4vy\Utils\SpeakeasyMetadata;
class ListTransactionsRequest
{
    /**
     * The ID of the merchant account to use for this request.
     *
     * @var ?string $merchantAccountId
     */
    #[SpeakeasyMetadata('header:style=simple,explode=false,name=x-gr4vy-merchant-account-id')]
    public ?string $merchantAccountId = null;

    /**
     * A pointer to the page of results to return.
     *
     * @var ?string $cursor
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=cursor')]
    public ?string $cursor = null;

    /**
     * Filters the results to only transactions created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     *
     * @var ?\DateTime $createdAtLte
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=created_at_lte,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $createdAtLte = null;

    /**
     * Filters the results to only transactions created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     *
     * @var ?\DateTime $createdAtGte
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=created_at_gte,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $createdAtGte = null;

    /**
     * Filters the results to only transactions updated before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     *
     * @var ?\DateTime $updatedAtLte
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=updated_at_lte,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $updatedAtLte = null;

    /**
     * Filters the results to only transactions updated after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
     *
     * @var ?\DateTime $updatedAtGte
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=updated_at_gte,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $updatedAtGte = null;

    /**
     *
     * @var ?string $search
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=search')]
    public ?string $search = null;

    /**
     *
     * @var ?string $buyerExternalIdentifier
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=buyer_external_identifier')]
    public ?string $buyerExternalIdentifier = null;

    /**
     *
     * @var ?string $buyerId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=buyer_id')]
    public ?string $buyerId = null;

    /**
     *
     * @var ?string $buyerEmailAddress
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=buyer_email_address')]
    public ?string $buyerEmailAddress = null;

    /**
     * Filters the results to only get the items for which some of the buyer data contains exactly the provided `buyer_search` values.
     *
     * @var ?array<string> $buyerSearch
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=buyer_search')]
    public ?array $buyerSearch = null;

    /**
     *
     * @var ?string $ipAddress
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=ip_address')]
    public ?string $ipAddress = null;

    /**
     * Filters the results to only the transactions that have a `status` that matches with any of the provided status values.
     *
     * @var ?array<string> $status
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=status')]
    public ?array $status = null;

    /**
     *
     * @var ?string $id
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=id')]
    public ?string $id = null;

    /**
     *
     * @var ?string $paymentServiceTransactionId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_service_transaction_id')]
    public ?string $paymentServiceTransactionId = null;

    /**
     *
     * @var ?string $externalIdentifier
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=external_identifier')]
    public ?string $externalIdentifier = null;

    /**
     * Filters for transactions where their `metadata` values contain all of the provided `metadata` keys. The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be strings. This value should also be URL encoded.
     *
     * @var ?array<string> $metadata
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=metadata')]
    public ?array $metadata = null;

    /**
     * Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
     *
     * @var ?int $amountEq
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=amount_eq')]
    public ?int $amountEq = null;

    /**
     * Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
     *
     * @var ?int $amountLte
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=amount_lte')]
    public ?int $amountLte = null;

    /**
     * Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte` value.
     *
     * @var ?int $amountGte
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=amount_gte')]
    public ?int $amountGte = null;

    /**
     * Filters for transactions that have matching `currency` values. The `currency` values provided must be formatted as 3-letter ISO currency code.
     *
     * @var ?array<string> $currency
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=currency')]
    public ?array $currency = null;

    /**
     * Filters for transactions that have matching `country` values.
     *
     * @var ?array<string> $country
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=country')]
    public ?array $country = null;

    /**
     * Filters for transactions that were processed by the provided `payment_service_id` values.
     *
     * @var ?array<string> $paymentServiceId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_service_id')]
    public ?array $paymentServiceId = null;

    /**
     *
     * @var ?string $paymentMethodId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_method_id')]
    public ?string $paymentMethodId = null;

    /**
     *
     * @var ?string $paymentMethodLabel
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_method_label')]
    public ?string $paymentMethodLabel = null;

    /**
     * Filters for transactions that have a payment method with a scheme that matches with the provided value.
     *
     * @var ?string $paymentMethodScheme
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_method_scheme')]
    public ?string $paymentMethodScheme = null;

    /**
     * Filters for transactions that have a payment method with a country that matches with the provided value.
     *
     * @var ?string $paymentMethodCountry
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_method_country')]
    public ?string $paymentMethodCountry = null;

    /**
     *
     * @var ?string $paymentMethodFingerprint
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_method_fingerprint')]
    public ?string $paymentMethodFingerprint = null;

    /**
     * Filters for transactions that have matching `method` values.
     *
     * @var ?array<string> $method
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=method')]
    public ?array $method = null;

    /**
     * Filters for transactions where the `error_code` matches one for the provided values.
     *
     * @var ?array<string> $errorCode
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=error_code')]
    public ?array $errorCode = null;

    /**
     * Filters for transactions with refunds.
     *
     * @var ?bool $hasRefunds
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=has_refunds')]
    public ?bool $hasRefunds = null;

    /**
     * Filters for transactions with a pending manual anti-fraud review.
     *
     * @var ?bool $pendingReview
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pending_review')]
    public ?bool $pendingReview = null;

    /**
     * Filters for transactions where the `checkout_session_id` matches the provided value.
     *
     * @var ?string $checkoutSessionId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=checkout_session_id')]
    public ?string $checkoutSessionId = null;

    /**
     * Filters for transactions where the `reconciliation_id` matches the provided value.
     *
     * @var ?string $reconciliationId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=reconciliation_id')]
    public ?string $reconciliationId = null;

    /**
     * Filters for transactions with gift card redemptions.
     *
     * @var ?bool $hasGiftCardRedemptions
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=has_gift_card_redemptions')]
    public ?bool $hasGiftCardRedemptions = null;

    /**
     * Filters for transactions where a gift card used has an `id` that matches the provided value.
     *
     * @var ?string $giftCardId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=gift_card_id')]
    public ?string $giftCardId = null;

    /**
     * Filters for transactions that have at least one gift card redemption where the last 4 digits of its gift card number matches exactly with the provided value.
     *
     * @var ?string $giftCardLast4
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=gift_card_last4')]
    public ?string $giftCardLast4 = null;

    /**
     * Filters for transactions that have at least one associated settlement record.
     *
     * @var ?bool $hasSettlements
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=has_settlements')]
    public ?bool $hasSettlements = null;

    /**
     * Filter for transactions that have a card with a BIN that matches exactly with the provided value.
     *
     * @var ?string $paymentMethodBin
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_method_bin')]
    public ?string $paymentMethodBin = null;

    /**
     * Filters the results to only the transactions that have a payment source that matches with any of the provided values.
     *
     * @var ?array<string> $paymentSource
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payment_source')]
    public ?array $paymentSource = null;

    /**
     * Filters for transactions where the `is_subsequent_payment` matches the provided value.
     *
     * @var ?bool $isSubsequentPayment
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=is_subsequent_payment')]
    public ?bool $isSubsequentPayment = null;

    /**
     * Filters for transactions where the `merchant_initiated` matches the provided value.
     *
     * @var ?bool $merchantInitiated
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=merchant_initiated')]
    public ?bool $merchantInitiated = null;

    /**
     * Filters for transactions that attempted 3DS authentication or not.
     *
     * @var ?bool $used3ds
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=used_3ds')]
    public ?bool $used3ds = null;

    /**
     * The maximum number of items that are at returned.
     *
     * @var ?int $limit
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?int $limit = null;

    /**
     * @param  ?int  $limit
     * @param  ?string  $merchantAccountId
     * @param  ?string  $cursor
     * @param  ?\DateTime  $createdAtLte
     * @param  ?\DateTime  $createdAtGte
     * @param  ?\DateTime  $updatedAtLte
     * @param  ?\DateTime  $updatedAtGte
     * @param  ?string  $search
     * @param  ?string  $buyerExternalIdentifier
     * @param  ?string  $buyerId
     * @param  ?string  $buyerEmailAddress
     * @param  ?array<string>  $buyerSearch
     * @param  ?string  $ipAddress
     * @param  ?array<string>  $status
     * @param  ?string  $id
     * @param  ?string  $paymentServiceTransactionId
     * @param  ?string  $externalIdentifier
     * @param  ?array<string>  $metadata
     * @param  ?int  $amountEq
     * @param  ?int  $amountLte
     * @param  ?int  $amountGte
     * @param  ?array<string>  $currency
     * @param  ?array<string>  $country
     * @param  ?array<string>  $paymentServiceId
     * @param  ?string  $paymentMethodId
     * @param  ?string  $paymentMethodLabel
     * @param  ?string  $paymentMethodScheme
     * @param  ?string  $paymentMethodCountry
     * @param  ?string  $paymentMethodFingerprint
     * @param  ?array<string>  $method
     * @param  ?array<string>  $errorCode
     * @param  ?bool  $hasRefunds
     * @param  ?bool  $pendingReview
     * @param  ?string  $checkoutSessionId
     * @param  ?string  $reconciliationId
     * @param  ?bool  $hasGiftCardRedemptions
     * @param  ?string  $giftCardId
     * @param  ?string  $giftCardLast4
     * @param  ?bool  $hasSettlements
     * @param  ?string  $paymentMethodBin
     * @param  ?array<string>  $paymentSource
     * @param  ?bool  $isSubsequentPayment
     * @param  ?bool  $merchantInitiated
     * @param  ?bool  $used3ds
     * @phpstan-pure
     */
    public function __construct(?string $merchantAccountId = null, ?string $cursor = null, ?\DateTime $createdAtLte = null, ?\DateTime $createdAtGte = null, ?\DateTime $updatedAtLte = null, ?\DateTime $updatedAtGte = null, ?string $search = null, ?string $buyerExternalIdentifier = null, ?string $buyerId = null, ?string $buyerEmailAddress = null, ?array $buyerSearch = null, ?string $ipAddress = null, ?array $status = null, ?string $id = null, ?string $paymentServiceTransactionId = null, ?string $externalIdentifier = null, ?array $metadata = null, ?int $amountEq = null, ?int $amountLte = null, ?int $amountGte = null, ?array $currency = null, ?array $country = null, ?array $paymentServiceId = null, ?string $paymentMethodId = null, ?string $paymentMethodLabel = null, ?string $paymentMethodScheme = null, ?string $paymentMethodCountry = null, ?string $paymentMethodFingerprint = null, ?array $method = null, ?array $errorCode = null, ?bool $hasRefunds = null, ?bool $pendingReview = null, ?string $checkoutSessionId = null, ?string $reconciliationId = null, ?bool $hasGiftCardRedemptions = null, ?string $giftCardId = null, ?string $giftCardLast4 = null, ?bool $hasSettlements = null, ?string $paymentMethodBin = null, ?array $paymentSource = null, ?bool $isSubsequentPayment = null, ?bool $merchantInitiated = null, ?bool $used3ds = null, ?int $limit = 20)
    {
        $this->merchantAccountId = $merchantAccountId;
        $this->cursor = $cursor;
        $this->createdAtLte = $createdAtLte;
        $this->createdAtGte = $createdAtGte;
        $this->updatedAtLte = $updatedAtLte;
        $this->updatedAtGte = $updatedAtGte;
        $this->search = $search;
        $this->buyerExternalIdentifier = $buyerExternalIdentifier;
        $this->buyerId = $buyerId;
        $this->buyerEmailAddress = $buyerEmailAddress;
        $this->buyerSearch = $buyerSearch;
        $this->ipAddress = $ipAddress;
        $this->status = $status;
        $this->id = $id;
        $this->paymentServiceTransactionId = $paymentServiceTransactionId;
        $this->externalIdentifier = $externalIdentifier;
        $this->metadata = $metadata;
        $this->amountEq = $amountEq;
        $this->amountLte = $amountLte;
        $this->amountGte = $amountGte;
        $this->currency = $currency;
        $this->country = $country;
        $this->paymentServiceId = $paymentServiceId;
        $this->paymentMethodId = $paymentMethodId;
        $this->paymentMethodLabel = $paymentMethodLabel;
        $this->paymentMethodScheme = $paymentMethodScheme;
        $this->paymentMethodCountry = $paymentMethodCountry;
        $this->paymentMethodFingerprint = $paymentMethodFingerprint;
        $this->method = $method;
        $this->errorCode = $errorCode;
        $this->hasRefunds = $hasRefunds;
        $this->pendingReview = $pendingReview;
        $this->checkoutSessionId = $checkoutSessionId;
        $this->reconciliationId = $reconciliationId;
        $this->hasGiftCardRedemptions = $hasGiftCardRedemptions;
        $this->giftCardId = $giftCardId;
        $this->giftCardLast4 = $giftCardLast4;
        $this->hasSettlements = $hasSettlements;
        $this->paymentMethodBin = $paymentMethodBin;
        $this->paymentSource = $paymentSource;
        $this->isSubsequentPayment = $isSubsequentPayment;
        $this->merchantInitiated = $merchantInitiated;
        $this->used3ds = $used3ds;
        $this->limit = $limit;
    }
}