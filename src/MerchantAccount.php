<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


class MerchantAccount
{
    /**
     * The ID for the merchant account.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * The display name for the buyer.
     *
     * @var string $displayName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('display_name')]
    public string $displayName;

    /**
     * Whether the Real-Time Account Updater service is enabled for this merchant account. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `false`, the Account Updater service doesn't get called if a payment fails with expired or invalid card details. If the field is set to `true`, the service is called. Please note that for this to work the other `account_updater_* fields` must be set as well.
     *
     * @var bool $accountUpdaterEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_updater_enabled')]
    public bool $accountUpdaterEnabled;

    /**
     * The date this merchant account was created at.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * The date this merchant account was last updated at.
     *
     * @var \DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    public \DateTime $updatedAt;

    /**
     * An optional endpoint URL to deliver webhook notifications to.
     *
     * @var ?string $outboundWebhookUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('outbound_webhook_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $outboundWebhookUrl = null;

    /**
     * The optional username to use when `outbound_webhook_url` is configured and requires basic authentication.
     *
     * @var ?string $outboundWebhookUsername
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('outbound_webhook_username')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $outboundWebhookUsername = null;

    /**
     * The optional password to use when `outbound_webhook_url` is configured and requires basic authentication
     *
     * @var ?string $outboundWebhookPassword
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('outbound_webhook_password')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $outboundWebhookPassword = null;

    /**
     * Client key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     *
     * @var ?string $loonClientKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('loon_client_key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $loonClientKey = null;

    /**
     * Secret key provided by Pagos to authenticate to the Loon API. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     *
     * @var ?string $loonSecretKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('loon_secret_key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $loonSecretKey = null;

    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys. Loon is the Account Updater service we use and if the field is not set or if it's set to null, the Account Updater service doesn't get configured. If the field is set to `null`, the other `loon_*` fields must be set to null as well.
     *
     * @var ?array<CardScheme> $loonAcceptedSchemes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('loon_accepted_schemes')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\CardScheme>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $loonAcceptedSchemes = null;

    /**
     * The public key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     *
     * @var ?string $accountUpdaterRequestEncryptionKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_updater_request_encryption_key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountUpdaterRequestEncryptionKey = null;

    /**
     * The ID of the key used to encrypt the request to the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     *
     * @var ?string $accountUpdaterRequestEncryptionKeyId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_updater_request_encryption_key_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountUpdaterRequestEncryptionKeyId = null;

    /**
     * The key used to decrypt the response from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     *
     * @var ?string $accountUpdaterResponseDecryptionKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_updater_response_decryption_key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountUpdaterResponseDecryptionKey = null;

    /**
     * The ID of the key used to decrypt the request from the Real-Time Account Updater service. The Account Updater service is used to update card details when cards are lost, stolen or expired. If the field is not set or if it's set to `null`, the Account Updater service doesn't get called. If the field is set, the other `account_updater_*` fields must be set as well.
     *
     * @var ?string $accountUpdaterResponseDecryptionKeyId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_updater_response_decryption_key_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountUpdaterResponseDecryptionKeyId = null;

    /**
     * The maximum monetary amount allowed for over-capture, in the smallest currency unit, for example `1299` cents to allow for an over-capture of `$12.99`.
     *
     * @var ?int $overCaptureAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('over_capture_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $overCaptureAmount = null;

    /**
     * The maximum percentage allowed for over-capture, for example `25` to allow for an over-capture of `25%` of the original transaction amount.
     *
     * @var ?int $overCapturePercentage
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('over_capture_percentage')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $overCapturePercentage = null;

    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     *
     * @var ?string $visaNetworkTokensRequestorId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('visa_network_tokens_requestor_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $visaNetworkTokensRequestorId = null;

    /**
     * Application ID provided for Visa after onboarding to use Network Tokens.
     *
     * @var ?string $visaNetworkTokensAppId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('visa_network_tokens_app_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $visaNetworkTokensAppId = null;

    /**
     * Requestor ID provided for American Express after onboarding to use Network Tokens.
     *
     * @var ?string $amexNetworkTokensRequestorId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amex_network_tokens_requestor_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $amexNetworkTokensRequestorId = null;

    /**
     * Application ID provided for American Express after onboarding to use Network Tokens.
     *
     * @var ?string $amexNetworkTokensAppId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amex_network_tokens_app_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $amexNetworkTokensAppId = null;

    /**
     * Requestor ID provided for Mastercard after onboarding to use Network Tokens.
     *
     * @var ?string $mastercardNetworkTokensRequestorId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('mastercard_network_tokens_requestor_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $mastercardNetworkTokensRequestorId = null;

    /**
     * Application ID provided for Mastercard after onboarding to use Network Tokens.
     *
     * @var ?string $mastercardNetworkTokensAppId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('mastercard_network_tokens_app_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $mastercardNetworkTokensAppId = null;

    /**
     * Always `merchant-account`.
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  string  $id
     * @param  string  $displayName
     * @param  bool  $accountUpdaterEnabled
     * @param  \DateTime  $createdAt
     * @param  \DateTime  $updatedAt
     * @param  ?string  $type
     * @param  ?string  $outboundWebhookUrl
     * @param  ?string  $outboundWebhookUsername
     * @param  ?string  $outboundWebhookPassword
     * @param  ?string  $loonClientKey
     * @param  ?string  $loonSecretKey
     * @param  ?array<CardScheme>  $loonAcceptedSchemes
     * @param  ?string  $accountUpdaterRequestEncryptionKey
     * @param  ?string  $accountUpdaterRequestEncryptionKeyId
     * @param  ?string  $accountUpdaterResponseDecryptionKey
     * @param  ?string  $accountUpdaterResponseDecryptionKeyId
     * @param  ?int  $overCaptureAmount
     * @param  ?int  $overCapturePercentage
     * @param  ?string  $visaNetworkTokensRequestorId
     * @param  ?string  $visaNetworkTokensAppId
     * @param  ?string  $amexNetworkTokensRequestorId
     * @param  ?string  $amexNetworkTokensAppId
     * @param  ?string  $mastercardNetworkTokensRequestorId
     * @param  ?string  $mastercardNetworkTokensAppId
     * @phpstan-pure
     */
    public function __construct(string $id, string $displayName, bool $accountUpdaterEnabled, \DateTime $createdAt, \DateTime $updatedAt, ?string $outboundWebhookUrl = null, ?string $outboundWebhookUsername = null, ?string $outboundWebhookPassword = null, ?string $loonClientKey = null, ?string $loonSecretKey = null, ?array $loonAcceptedSchemes = null, ?string $accountUpdaterRequestEncryptionKey = null, ?string $accountUpdaterRequestEncryptionKeyId = null, ?string $accountUpdaterResponseDecryptionKey = null, ?string $accountUpdaterResponseDecryptionKeyId = null, ?int $overCaptureAmount = null, ?int $overCapturePercentage = null, ?string $visaNetworkTokensRequestorId = null, ?string $visaNetworkTokensAppId = null, ?string $amexNetworkTokensRequestorId = null, ?string $amexNetworkTokensAppId = null, ?string $mastercardNetworkTokensRequestorId = null, ?string $mastercardNetworkTokensAppId = null, ?string $type = 'merchant-account')
    {
        $this->id = $id;
        $this->displayName = $displayName;
        $this->accountUpdaterEnabled = $accountUpdaterEnabled;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->outboundWebhookUrl = $outboundWebhookUrl;
        $this->outboundWebhookUsername = $outboundWebhookUsername;
        $this->outboundWebhookPassword = $outboundWebhookPassword;
        $this->loonClientKey = $loonClientKey;
        $this->loonSecretKey = $loonSecretKey;
        $this->loonAcceptedSchemes = $loonAcceptedSchemes;
        $this->accountUpdaterRequestEncryptionKey = $accountUpdaterRequestEncryptionKey;
        $this->accountUpdaterRequestEncryptionKeyId = $accountUpdaterRequestEncryptionKeyId;
        $this->accountUpdaterResponseDecryptionKey = $accountUpdaterResponseDecryptionKey;
        $this->accountUpdaterResponseDecryptionKeyId = $accountUpdaterResponseDecryptionKeyId;
        $this->overCaptureAmount = $overCaptureAmount;
        $this->overCapturePercentage = $overCapturePercentage;
        $this->visaNetworkTokensRequestorId = $visaNetworkTokensRequestorId;
        $this->visaNetworkTokensAppId = $visaNetworkTokensAppId;
        $this->amexNetworkTokensRequestorId = $amexNetworkTokensRequestorId;
        $this->amexNetworkTokensAppId = $amexNetworkTokensAppId;
        $this->mastercardNetworkTokensRequestorId = $mastercardNetworkTokensRequestorId;
        $this->mastercardNetworkTokensAppId = $mastercardNetworkTokensAppId;
        $this->type = $type;
    }
}