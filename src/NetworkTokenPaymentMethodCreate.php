<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


class NetworkTokenPaymentMethodCreate
{
    /**
     * The scheme token.
     *
     * @var string $token
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('token')]
    public string $token;

    /**
     * The expiration date of the token.
     *
     * @var string $expirationDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('expiration_date')]
    public string $expirationDate;

    /**
     * The payment cryptogram for the network token.
     *
     * @var ?string $cryptogram
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cryptogram')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $cryptogram = null;

    /**
     * The URL to redirect a user back to after the complete 3DS in browser.
     *
     * @var ?string $redirectUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('redirect_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $redirectUrl = null;

    /**
     * The optional source of the decrypted device token.
     *
     * @var ?CardSource $cardSource
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('card_source')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\CardSource|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CardSource $cardSource = null;

    /**
     * The original card scheme for which the token was generated.
     *
     * @var ?CardScheme $cardScheme
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('card_scheme')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\CardScheme|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CardScheme $cardScheme = null;

    /**
     * The last 4 digits of the original card used to generate the token.
     *
     * @var ?string $cardSuffix
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('card_suffix')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $cardSuffix = null;

    /**
     * The card holder name associated to the original card for the token.
     *
     * @var ?string $cardholderName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cardholder_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $cardholderName = null;

    /**
     * The ecommerce indicator for the token.
     *
     * @var ?string $eci
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('eci')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $eci = null;

    /**
     * Always `network-token`.
     *
     * @var string $method
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('method')]
    public string $method;

    /**
     * @param  string  $method
     * @param  string  $token
     * @param  string  $expirationDate
     * @param  ?string  $cryptogram
     * @param  ?string  $redirectUrl
     * @param  ?CardSource  $cardSource
     * @param  ?CardScheme  $cardScheme
     * @param  ?string  $cardSuffix
     * @param  ?string  $cardholderName
     * @param  ?string  $eci
     * @phpstan-pure
     */
    public function __construct(string $token, string $expirationDate, ?string $cryptogram = null, ?string $redirectUrl = null, ?CardSource $cardSource = null, ?CardScheme $cardScheme = null, ?string $cardSuffix = null, ?string $cardholderName = null, ?string $eci = null, string $method = 'network-token')
    {
        $this->token = $token;
        $this->expirationDate = $expirationDate;
        $this->cryptogram = $cryptogram;
        $this->redirectUrl = $redirectUrl;
        $this->cardSource = $cardSource;
        $this->cardScheme = $cardScheme;
        $this->cardSuffix = $cardSuffix;
        $this->cardholderName = $cardholderName;
        $this->eci = $eci;
        $this->method = $method;
    }
}