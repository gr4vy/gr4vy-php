<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


/**
 * PaymentMethodSummary - Payment Method
 *
 *
 * A summary of a payment method.
 */
class PaymentMethodSummary
{
    /**
     *
     * @var Method $method
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Method')]
    public Method $method;

    /**
     * The ID for the payment method.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * The ID of the merchant account this buyer belongs to.
     *
     * @var string $merchantAccountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_account_id')]
    public string $merchantAccountId;

    /**
     * The number of times this payment method has been used in transactions for client initiated transactions.
     *
     * @var int $citUsageCount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cit_usage_count')]
    public int $citUsageCount;

    /**
     * Whether this card has a pending replacement that hasn't been applied yet.
     *
     * @var bool $hasReplacement
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('has_replacement')]
    public bool $hasReplacement;

    /**
     * The number of times this payment method has been used in transactions.
     *
     * @var int $usageCount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('usage_count')]
    public int $usageCount;

    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     *
     * @var ?string $approvalUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('approval_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $approvalUrl = null;

    /**
     * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
     *
     * @var ?string $country
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('country')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $country = null;

    /**
     * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
     *
     * @var ?string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $currency = null;

    /**
     * Details for credit or debit card payment method.
     *
     * @var ?PaymentMethodDetailsCard $details
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('details')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\PaymentMethodDetailsCard|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?PaymentMethodDetailsCard $details = null;

    /**
     * The expiration date for the payment method.
     *
     * @var ?string $expirationDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('expiration_date')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $expirationDate = null;

    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     *
     * @var ?string $fingerprint
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('fingerprint')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $fingerprint = null;

    /**
     * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
     *
     * @var ?string $label
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('label')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $label = null;

    /**
     * The date and time when this card was last replaced by the account updater.
     *
     * @var ?\DateTime $lastReplacedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('last_replaced_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $lastReplacedAt = null;

    /**
     * The mode to use with this payment method.
     *
     * @var ?Mode $mode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('mode')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Mode|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Mode $mode = null;

    /**
     * The scheme of the card. Only applies to card payments.
     *
     * @var ?CardScheme $scheme
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scheme')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\CardScheme|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CardScheme $scheme = null;

    /**
     * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
     *
     * @var ?array<CardScheme> $additionalSchemes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('additional_schemes')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\CardScheme>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $additionalSchemes = null;

    /**
     * The timestamp when this payment method was last used in a transaction for client initiated transactions.
     *
     * @var ?\DateTime $citLastUsedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cit_last_used_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $citLastUsedAt = null;

    /**
     * The timestamp when this payment method was last used in a transaction.
     *
     * @var ?\DateTime $lastUsedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('last_used_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $lastUsedAt = null;

    /**
     * Always `payment-method`.
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  Method  $method
     * @param  string  $id
     * @param  string  $merchantAccountId
     * @param  int  $citUsageCount
     * @param  bool  $hasReplacement
     * @param  int  $usageCount
     * @param  ?string  $type
     * @param  ?string  $approvalUrl
     * @param  ?string  $country
     * @param  ?string  $currency
     * @param  ?PaymentMethodDetailsCard  $details
     * @param  ?string  $expirationDate
     * @param  ?string  $fingerprint
     * @param  ?string  $label
     * @param  ?\DateTime  $lastReplacedAt
     * @param  ?Mode  $mode
     * @param  ?CardScheme  $scheme
     * @param  ?array<CardScheme>  $additionalSchemes
     * @param  ?\DateTime  $citLastUsedAt
     * @param  ?\DateTime  $lastUsedAt
     * @phpstan-pure
     */
    public function __construct(Method $method, string $id, string $merchantAccountId, int $citUsageCount, bool $hasReplacement, int $usageCount, ?string $approvalUrl = null, ?string $country = null, ?string $currency = null, ?PaymentMethodDetailsCard $details = null, ?string $expirationDate = null, ?string $fingerprint = null, ?string $label = null, ?\DateTime $lastReplacedAt = null, ?Mode $mode = null, ?CardScheme $scheme = null, ?array $additionalSchemes = null, ?\DateTime $citLastUsedAt = null, ?\DateTime $lastUsedAt = null, ?string $type = 'payment-method')
    {
        $this->method = $method;
        $this->id = $id;
        $this->merchantAccountId = $merchantAccountId;
        $this->citUsageCount = $citUsageCount;
        $this->hasReplacement = $hasReplacement;
        $this->usageCount = $usageCount;
        $this->approvalUrl = $approvalUrl;
        $this->country = $country;
        $this->currency = $currency;
        $this->details = $details;
        $this->expirationDate = $expirationDate;
        $this->fingerprint = $fingerprint;
        $this->label = $label;
        $this->lastReplacedAt = $lastReplacedAt;
        $this->mode = $mode;
        $this->scheme = $scheme;
        $this->additionalSchemes = $additionalSchemes;
        $this->citLastUsedAt = $citLastUsedAt;
        $this->lastUsedAt = $lastUsedAt;
        $this->type = $type;
    }
}