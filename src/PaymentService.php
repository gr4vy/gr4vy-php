<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


class PaymentService
{
    /**
     * The ID of the merchant account this job belongs to.
     *
     * @var string $merchantAccountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_account_id')]
    public string $merchantAccountId;

    /**
     * The definition ID of the service that has been configured.
     *
     * @var string $paymentServiceDefinitionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service_definition_id')]
    public string $paymentServiceDefinitionId;

    /**
     *
     * @var Method $method
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Method')]
    public Method $method;

    /**
     * The display name for the payment service.
     *
     * @var string $displayName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('display_name')]
    public string $displayName;

    /**
     * Deprecated field used to define the order in which to process payment services
     *
     * @var int $position
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('position')]
    public int $position;

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     *
     * @var array<string> $acceptedCurrencies
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accepted_currencies')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>')]
    public array $acceptedCurrencies;

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     *
     * @var array<string> $acceptedCountries
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accepted_countries')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>')]
    public array $acceptedCountries;

    /**
     * Defines if this payment service support payment method tokenization.
     *
     * @var bool $paymentMethodTokenizationEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_method_tokenization_enabled')]
    public bool $paymentMethodTokenizationEnabled;

    /**
     * Defines if this payment service supports network tokens.
     *
     * @var bool $networkTokensEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('network_tokens_enabled')]
    public bool $networkTokensEnabled;

    /**
     * Defines if this payment service is open loop.
     *
     * @var bool $openLoop
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('open_loop')]
    public bool $openLoop;

    /**
     * Defines if this payment service has settlement reporting enabled.
     *
     * @var bool $settlementReportingEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settlement_reporting_enabled')]
    public bool $settlementReportingEnabled;

    /**
     * The date and time when this payment service was first created in our system.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * The date and time when this payment service was last updated in our system.
     *
     * @var \DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    public \DateTime $updatedAt;

    /**
     *
     * @var ?PaymentServiceStatus $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\PaymentServiceStatus|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?PaymentServiceStatus $status = null;

    /**
     * Defines if this payment service has 3DS enabled.
     *
     * @var ?bool $threeDSecureEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('three_d_secure_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $threeDSecureEnabled = null;

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     *
     * @var ?array<string, ?MerchantProfileSchemeSummary> $merchantProfile
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_profile')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, \Gr4vy\MerchantProfileSchemeSummary|null>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $merchantProfile = null;

    /**
     * The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
     *
     * @var ?string $webhookUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('webhook_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $webhookUrl = null;

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     *
     * @var ?array<Field> $fields
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('fields')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\Field>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $fields = null;

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     *
     * @var ?array<Field> $reportingFields
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('reporting_fields')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\Field>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $reportingFields = null;

    /**
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     * Defines if this payment service is currently active.
     *
     * @var ?bool $active
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('active')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $active = null;

    /**
     * Defines if this payment service has been deleted
     *
     * @var ?bool $isDeleted
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('is_deleted')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $isDeleted = null;

    /**
     * Always `payment-service`
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  string  $merchantAccountId
     * @param  string  $paymentServiceDefinitionId
     * @param  Method  $method
     * @param  string  $displayName
     * @param  int  $position
     * @param  array<string>  $acceptedCurrencies
     * @param  array<string>  $acceptedCountries
     * @param  bool  $paymentMethodTokenizationEnabled
     * @param  bool  $networkTokensEnabled
     * @param  bool  $openLoop
     * @param  bool  $settlementReportingEnabled
     * @param  \DateTime  $createdAt
     * @param  \DateTime  $updatedAt
     * @param  ?string  $type
     * @param  ?string  $id
     * @param  ?bool  $active
     * @param  ?PaymentServiceStatus  $status
     * @param  ?bool  $isDeleted
     * @param  ?bool  $threeDSecureEnabled
     * @param  ?array<string, ?MerchantProfileSchemeSummary>  $merchantProfile
     * @param  ?string  $webhookUrl
     * @param  ?array<Field>  $fields
     * @param  ?array<Field>  $reportingFields
     * @phpstan-pure
     */
    public function __construct(string $merchantAccountId, string $paymentServiceDefinitionId, Method $method, string $displayName, int $position, array $acceptedCurrencies, array $acceptedCountries, bool $paymentMethodTokenizationEnabled, bool $networkTokensEnabled, bool $openLoop, bool $settlementReportingEnabled, \DateTime $createdAt, \DateTime $updatedAt, ?PaymentServiceStatus $status = null, ?bool $threeDSecureEnabled = null, ?array $merchantProfile = null, ?string $webhookUrl = null, ?array $fields = null, ?array $reportingFields = null, ?string $id = 'The ID of the payment service', ?bool $active = true, ?bool $isDeleted = false, ?string $type = 'payment-service')
    {
        $this->merchantAccountId = $merchantAccountId;
        $this->paymentServiceDefinitionId = $paymentServiceDefinitionId;
        $this->method = $method;
        $this->displayName = $displayName;
        $this->position = $position;
        $this->acceptedCurrencies = $acceptedCurrencies;
        $this->acceptedCountries = $acceptedCountries;
        $this->paymentMethodTokenizationEnabled = $paymentMethodTokenizationEnabled;
        $this->networkTokensEnabled = $networkTokensEnabled;
        $this->openLoop = $openLoop;
        $this->settlementReportingEnabled = $settlementReportingEnabled;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->status = $status;
        $this->threeDSecureEnabled = $threeDSecureEnabled;
        $this->merchantProfile = $merchantProfile;
        $this->webhookUrl = $webhookUrl;
        $this->fields = $fields;
        $this->reportingFields = $reportingFields;
        $this->id = $id;
        $this->active = $active;
        $this->isDeleted = $isDeleted;
        $this->type = $type;
    }
}