<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


/** PaymentServiceUpdate - Request body for updating a Payment Service */
class PaymentServiceUpdate
{
    /**
     * The display name for the payment service.
     *
     * @var ?string $displayName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('display_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $displayName = null;

    /**
     * The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
     *
     * @var ?array<VoidableField> $fields
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('fields')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\VoidableField>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $fields = null;

    /**
     * The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
     *
     * @var ?array<VoidableField> $reportingFields
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('reporting_fields')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\VoidableField>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $reportingFields = null;

    /**
     * Deprecated field used to define the order in which to process payment services
     *
     * @var ?int $position
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('position')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $position = null;

    /**
     * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
     *
     * @var ?array<string> $acceptedCurrencies
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accepted_currencies')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $acceptedCurrencies = null;

    /**
     * A list of countries for which this service is enabled, in ISO two-letter code format.
     *
     * @var ?array<string> $acceptedCountries
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accepted_countries')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $acceptedCountries = null;

    /**
     * Defines if this payment service is currently active.
     *
     * @var ?bool $active
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('active')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $active = null;

    /**
     * Defines if this payment service has 3DS enabled.
     *
     * @var ?bool $threeDSecureEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('three_d_secure_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $threeDSecureEnabled = null;

    /**
     * An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
     *
     * @var ?array<string, ?MerchantProfileScheme> $merchantProfile
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_profile')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, \Gr4vy\MerchantProfileScheme|null>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $merchantProfile = null;

    /**
     * Defines if this payment service support payment method tokenization.
     *
     * @var ?bool $paymentMethodTokenizationEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_method_tokenization_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $paymentMethodTokenizationEnabled = null;

    /**
     * Defines if this payment service supports network tokens.
     *
     * @var ?bool $networkTokensEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('network_tokens_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $networkTokensEnabled = null;

    /**
     * Defines if this payment service is open loop.
     *
     * @var ?bool $openLoop
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('open_loop')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $openLoop = null;

    /**
     * Defines if this payment service has settlement reporting enabled.
     *
     * @var ?bool $settlementReportingEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settlement_reporting_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $settlementReportingEnabled = null;

    /**
     * @param  ?bool  $settlementReportingEnabled
     * @param  ?string  $displayName
     * @param  ?array<VoidableField>  $fields
     * @param  ?array<VoidableField>  $reportingFields
     * @param  ?int  $position
     * @param  ?array<string>  $acceptedCurrencies
     * @param  ?array<string>  $acceptedCountries
     * @param  ?bool  $active
     * @param  ?bool  $threeDSecureEnabled
     * @param  ?array<string, ?MerchantProfileScheme>  $merchantProfile
     * @param  ?bool  $paymentMethodTokenizationEnabled
     * @param  ?bool  $networkTokensEnabled
     * @param  ?bool  $openLoop
     * @phpstan-pure
     */
    public function __construct(?string $displayName = null, ?array $fields = null, ?array $reportingFields = null, ?int $position = null, ?array $acceptedCurrencies = null, ?array $acceptedCountries = null, ?bool $active = null, ?bool $threeDSecureEnabled = null, ?array $merchantProfile = null, ?bool $paymentMethodTokenizationEnabled = null, ?bool $networkTokensEnabled = null, ?bool $openLoop = null, ?bool $settlementReportingEnabled = false)
    {
        $this->displayName = $displayName;
        $this->fields = $fields;
        $this->reportingFields = $reportingFields;
        $this->position = $position;
        $this->acceptedCurrencies = $acceptedCurrencies;
        $this->acceptedCountries = $acceptedCountries;
        $this->active = $active;
        $this->threeDSecureEnabled = $threeDSecureEnabled;
        $this->merchantProfile = $merchantProfile;
        $this->paymentMethodTokenizationEnabled = $paymentMethodTokenizationEnabled;
        $this->networkTokensEnabled = $networkTokensEnabled;
        $this->openLoop = $openLoop;
        $this->settlementReportingEnabled = $settlementReportingEnabled;
    }
}