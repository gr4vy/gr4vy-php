<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


/**
 * PayoutCreate - PayoutCreate
 *
 *
 * Represents the data required to create a new payout.
 */
class PayoutCreate
{
    /**
     * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
     *
     * @var int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    public int $amount;

    /**
     * The ISO-4217 currency code for this payout.
     *
     * @var string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    public string $currency;

    /**
     * The ID of the payment service to use for the payout.
     *
     * @var string $paymentServiceId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service_id')]
    public string $paymentServiceId;

    /**
     * The type of payment method to send funds too.
     *
     * @var PaymentMethodCard|PaymentMethodStoredCard $paymentMethod
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\PaymentMethodCard|\Gr4vy\PaymentMethodStoredCard')]
    public PaymentMethodCard|PaymentMethodStoredCard $paymentMethod;

    /**
     * The type of payout to process.
     *
     * @var ?string $category
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('category')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $category = null;

    /**
     * A value that can be used to match the payout against your own records.
     *
     * @var ?string $externalIdentifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_identifier')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalIdentifier = null;

    /**
     * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or `buyer_external_identifier`.
     *
     * @var ?string $buyerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('buyer_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $buyerId = null;

    /**
     * Inline buyer details for the payout. Use this instead of the `buyer_id` or `buyer_external_identifier`.
     *
     * @var ?GuestBuyerInput $buyer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('buyer')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\GuestBuyerInput|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?GuestBuyerInput $buyer = null;

    /**
     * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the `buyer_id` or `buyer`.
     *
     * @var ?string $buyerExternalIdentifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('buyer_external_identifier')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $buyerExternalIdentifier = null;

    /**
     * Merchant information for the source of the payout.
     *
     * @var ?PayoutMerchant $merchant
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\PayoutMerchant|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?PayoutMerchant $merchant = null;

    /**
     * Optional fields for processing payouts on specific payment services.
     *
     * @var ?PayoutConnectionOptions $connectionOptions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('connection_options')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\PayoutConnectionOptions|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?PayoutConnectionOptions $connectionOptions = null;

    /**
     * @param  int  $amount
     * @param  string  $currency
     * @param  string  $paymentServiceId
     * @param  PaymentMethodCard|PaymentMethodStoredCard  $paymentMethod
     * @param  ?string  $category
     * @param  ?string  $externalIdentifier
     * @param  ?string  $buyerId
     * @param  ?GuestBuyerInput  $buyer
     * @param  ?string  $buyerExternalIdentifier
     * @param  ?PayoutMerchant  $merchant
     * @param  ?PayoutConnectionOptions  $connectionOptions
     * @phpstan-pure
     */
    public function __construct(int $amount, string $currency, string $paymentServiceId, PaymentMethodCard|PaymentMethodStoredCard $paymentMethod, ?string $category = null, ?string $externalIdentifier = null, ?string $buyerId = null, ?GuestBuyerInput $buyer = null, ?string $buyerExternalIdentifier = null, ?PayoutMerchant $merchant = null, ?PayoutConnectionOptions $connectionOptions = null)
    {
        $this->amount = $amount;
        $this->currency = $currency;
        $this->paymentServiceId = $paymentServiceId;
        $this->paymentMethod = $paymentMethod;
        $this->category = $category;
        $this->externalIdentifier = $externalIdentifier;
        $this->buyerId = $buyerId;
        $this->buyer = $buyer;
        $this->buyerExternalIdentifier = $buyerExternalIdentifier;
        $this->merchant = $merchant;
        $this->connectionOptions = $connectionOptions;
    }
}