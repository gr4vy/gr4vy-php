<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;



/** SDK - Gr4vy: The Gr4vy API. */
class SDK
{
    public const SERVER_PRODUCTION = 'production';

    public const SERVER_SANDBOX = 'sandbox';

    public const SERVERS = [
        SDK::SERVER_PRODUCTION => 'https://api.{id}.gr4vy.app',
        SDK::SERVER_SANDBOX => 'https://api.sandbox.{id}.gr4vy.app',
    ];

    public AccountUpdater $accountUpdater;

    public BuyersSDK $buyers;

    public PaymentMethodsSDK $paymentMethods;

    public GiftCardsSDK $giftCards;

    public CardSchemeDefinitionsSDK $cardSchemeDefinitions;

    public DigitalWalletsSDK $digitalWallets;

    public Transactions $transactions;

    public RefundsSDK $refunds;

    public PaymentOptionsSDK $paymentOptions;

    public PaymentServiceDefinitionsSDK $paymentServiceDefinitions;

    public PaymentServicesSDK $paymentServices;

    public AuditLogs $auditLogs;

    public ReportsSDK $reports;

    public ReportExecutionsSDK $reportExecutions;

    public CheckoutSessions $checkoutSessions;

    public MerchantAccountsSDK $merchantAccounts;

    public Payouts $payouts;

    public PaymentLinks $paymentLinks;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return SDKBuilder
     */
    public static function builder(): SDKBuilder
    {
        return new SDKBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->accountUpdater = new AccountUpdater($this->sdkConfiguration);
        $this->buyers = new BuyersSDK($this->sdkConfiguration);
        $this->paymentMethods = new PaymentMethodsSDK($this->sdkConfiguration);
        $this->giftCards = new GiftCardsSDK($this->sdkConfiguration);
        $this->cardSchemeDefinitions = new CardSchemeDefinitionsSDK($this->sdkConfiguration);
        $this->digitalWallets = new DigitalWalletsSDK($this->sdkConfiguration);
        $this->transactions = new Transactions($this->sdkConfiguration);
        $this->refunds = new RefundsSDK($this->sdkConfiguration);
        $this->paymentOptions = new PaymentOptionsSDK($this->sdkConfiguration);
        $this->paymentServiceDefinitions = new PaymentServiceDefinitionsSDK($this->sdkConfiguration);
        $this->paymentServices = new PaymentServicesSDK($this->sdkConfiguration);
        $this->auditLogs = new AuditLogs($this->sdkConfiguration);
        $this->reports = new ReportsSDK($this->sdkConfiguration);
        $this->reportExecutions = new ReportExecutionsSDK($this->sdkConfiguration);
        $this->checkoutSessions = new CheckoutSessions($this->sdkConfiguration);
        $this->merchantAccounts = new MerchantAccountsSDK($this->sdkConfiguration);
        $this->payouts = new Payouts($this->sdkConfiguration);
        $this->paymentLinks = new PaymentLinks($this->sdkConfiguration);
        $this->initHooks();

    }

    private function initHooks(): void
    {
        $this->sdkConfiguration = $this->sdkConfiguration->hooks->sdkInit($this->sdkConfiguration);
    }
}