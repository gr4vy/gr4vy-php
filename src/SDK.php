<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;

use Gr4vy\Hooks\HookContext;
use Gr4vy\Utils\Options;
use Gr4vy\Utils\Retry;
use Gr4vy\Utils\Retry\RetryUtils;
use Speakeasy\Serializer\DeserializationContext;

/** SDK - Gr4vy: The Gr4vy API. */
class SDK
{
    public const SERVER_SANDBOX = 'sandbox';

    public const SERVER_PRODUCTION = 'production';

    public const SERVERS = [
        SDK::SERVER_SANDBOX => 'https://api.sandbox.{id}.gr4vy.app',
        SDK::SERVER_PRODUCTION => 'https://api.{id}.gr4vy.app',
    ];

    public AccountUpdater $accountUpdater;

    public BuyersSDK $buyers;

    public PaymentMethodsSDK $paymentMethods;

    public GiftCardsSDK $giftCards;

    public CardSchemeDefinitionsSDK $cardSchemeDefinitions;

    public DigitalWalletsSDK $digitalWallets;

    public Transactions $transactions;

    public RefundsSDK $refunds;

    public PaymentOptionsSDK $paymentOptions;

    public PaymentServiceDefinitionsSDK $paymentServiceDefinitions;

    public PaymentServicesSDK $paymentServices;

    public AuditLogs $auditLogs;

    public ReportsSDK $reports;

    public ReportExecutionsSDK $reportExecutions;

    public CheckoutSessions $checkoutSessions;

    public MerchantAccountsSDK $merchantAccounts;

    public Payouts $payouts;

    public PaymentLinksSDK $paymentLinks;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return SDKBuilder
     */
    public static function builder(): SDKBuilder
    {
        return new SDKBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->accountUpdater = new AccountUpdater($this->sdkConfiguration);
        $this->buyers = new BuyersSDK($this->sdkConfiguration);
        $this->paymentMethods = new PaymentMethodsSDK($this->sdkConfiguration);
        $this->giftCards = new GiftCardsSDK($this->sdkConfiguration);
        $this->cardSchemeDefinitions = new CardSchemeDefinitionsSDK($this->sdkConfiguration);
        $this->digitalWallets = new DigitalWalletsSDK($this->sdkConfiguration);
        $this->transactions = new Transactions($this->sdkConfiguration);
        $this->refunds = new RefundsSDK($this->sdkConfiguration);
        $this->paymentOptions = new PaymentOptionsSDK($this->sdkConfiguration);
        $this->paymentServiceDefinitions = new PaymentServiceDefinitionsSDK($this->sdkConfiguration);
        $this->paymentServices = new PaymentServicesSDK($this->sdkConfiguration);
        $this->auditLogs = new AuditLogs($this->sdkConfiguration);
        $this->reports = new ReportsSDK($this->sdkConfiguration);
        $this->reportExecutions = new ReportExecutionsSDK($this->sdkConfiguration);
        $this->checkoutSessions = new CheckoutSessions($this->sdkConfiguration);
        $this->merchantAccounts = new MerchantAccountsSDK($this->sdkConfiguration);
        $this->payouts = new Payouts($this->sdkConfiguration);
        $this->paymentLinks = new PaymentLinksSDK($this->sdkConfiguration);
        $this->initHooks();

    }

    private function initHooks(): void
    {
        $this->sdkConfiguration = $this->sdkConfiguration->hooks->sdkInit($this->sdkConfiguration);
    }

    /**
     * Browse
     *
     * @param  ?string  $merchantAccountId
     * @return BrowsePaymentMethodDefinitionsGetResponse
     * @throws \Gr4vy\errors\APIException
     */
    public function browsePaymentMethodDefinitionsGet(?string $merchantAccountId = null, ?Options $options = null): BrowsePaymentMethodDefinitionsGetResponse
    {
        $retryConfig = null;
        if ($options) {
            $retryConfig = $options->retryConfig;
        }
        if ($retryConfig === null && $this->sdkConfiguration->retryConfig) {
            $retryConfig = $this->sdkConfiguration->retryConfig;
        } else {
            $retryConfig = new Retry\RetryConfigBackoff(
                initialIntervalMs: 200,
                maxIntervalMs: 200,
                exponent: 1,
                maxElapsedTimeMs: 1000,
                retryConnectionErrors: true,
            );
        }
        $retryCodes = null;
        if ($options) {
            $retryCodes = $options->retryCodes;
        }
        if ($retryCodes === null) {
            $retryCodes = [
                '5XX',
            ];
        }
        $request = new BrowsePaymentMethodDefinitionsGetRequest(
            merchantAccountId: $merchantAccountId,
        );
        $baseUrl = $this->sdkConfiguration->getTemplatedServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/payment-method-definitions');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $httpOptions = array_merge_recursive($httpOptions, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $httpOptions)) {
            $httpOptions['headers'] = [];
        }
        $httpOptions['headers']['Accept'] = 'application/json';
        $httpOptions['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        $hookContext = new HookContext($this->sdkConfiguration, $baseUrl, 'browse_payment_method_definitions_get', [], $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = RetryUtils::retryWrapper(fn () => $this->sdkConfiguration->client->send($httpRequest, $httpOptions), $retryConfig, $retryCodes);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if (Utils\Utils::matchStatusCodes($statusCode, ['422', '4XX', '5XX'])) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if (Utils\Utils::matchStatusCodes($statusCode, ['200'])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, 'mixed', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new BrowsePaymentMethodDefinitionsGetResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    any: $obj);

                return $response;
            } else {
                throw new \Gr4vy\errors\APIException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (Utils\Utils::matchStatusCodes($statusCode, ['422'])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\Gr4vy\errors\HTTPValidationError', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Gr4vy\errors\APIException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (Utils\Utils::matchStatusCodes($statusCode, ['4XX'])) {
            throw new \Gr4vy\errors\APIException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } elseif (Utils\Utils::matchStatusCodes($statusCode, ['5XX'])) {
            throw new \Gr4vy\errors\APIException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Gr4vy\errors\APIException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
}