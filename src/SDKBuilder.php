<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;

use Gr4vy\Utils\Retry;

/**
 * SDKBuilder is used to configure and build an instance of the SDK.
 */
class SDKBuilder
{
    public function __construct(
        private SDKConfiguration $sdkConfig = new SDKConfiguration(),
    ) {
    }

    /**
     * setClient allows setting a custom Guzzle client for the SDK to make requests with.
     *
     * @param  \GuzzleHttp\ClientInterface  $client
     * @return SDKBuilder
     */
    public function setClient(\GuzzleHttp\ClientInterface $client): SDKBuilder
    {
        $this->sdkConfig->client = $client;

        return $this;
    }

    /**
     * setSecurity is used to configure the security required for the SDK.
     *
     * @param  string  $bearerAuth
     * @return SDKBuilder
     */
    public function setSecurity(string $bearerAuth): SDKBuilder
    {
        $security = new Security(
            bearerAuth: $bearerAuth
        );
        $this->sdkConfig->securitySource = fn () => $security;

        return $this;
    }

    /**
     * setSecuritySource is usd to configure the security required for the SDK.
     * unlike setSecurity, setSecuritySource accepts a closure that will be called to retrieve the security information.
     *
     * @param  pure-Closure(): string  $securitySource
     * @return SDKBuilder
     */
    public function setSecuritySource(\Closure $securitySource): SDKBuilder
    {
        $this->sdkConfig->securitySource = fn () => new Security(bearerAuth: $securitySource());

        return $this;
    }

    /**
     * setServerUrl is used to configure the server URL for the SDK, and optionally template any parameters in the URL.
     *
     * @param  string  $serverUrl
     * @param  array<string, string>  $params
     * @return SDKBuilder
     */
    public function setServerUrl(string $serverUrl, ?array $params = null): SDKBuilder
    {
        $this->sdkConfig->serverUrl = Utils\Utils::templateUrl($serverUrl, $params);

        return $this;
    }

    /**
     * setServer is used to configure the server for the SDK
     *
     * @param  string  $server
     * @return SDKBuilder
     */
    public function setServer(string $server): SDKBuilder
    {
        $this->sdkConfig->server = $server;

        return $this;
    }

    /**
     * setId is used to configure the id variable for url substitution
     *
     * @param  string  $id
     * @return SDKBuilder
     */
    public function setId(string $id): SDKBuilder
    {
        foreach ($this->sdkConfig->serverVariables as $server => $serverVariables) {
            if (! array_key_exists('id', $serverVariables)) {
                continue;
            }
            $this->sdkConfig->serverVariables[$server]['id'] = $id;
        }

        return $this;
    }
    /**
     * setMerchantAccountId is used to configure the merchant_account_id parameter for the SDK.
     *
     * @param  string  $merchantAccountId
     * @return SDKBuilder
     */
    public function setMerchantAccountId(string $merchantAccountId): SDKBuilder
    {
        if (! array_key_exists('header', $this->sdkConfig->globals['parameters'])) {
            $this->sdkConfig->globals['parameters']['header'] = [];
        }

        $this->sdkConfig->globals['parameters']['header']['merchantAccountId'] = $merchantAccountId;

        return $this;
    }

    public function setRetryConfig(Retry\RetryConfig $config): SDKBuilder
    {
        $this->sdkConfig->retryConfig = $config;

        return $this;
    }

    /**
     * build is used to build the SDK with any of the configured options.
     *
     * @return SDK
     */
    public function build(): SDK
    {
        if ($this->sdkConfig->client === null) {
            $this->sdkConfig->client = new \GuzzleHttp\Client([
                'timeout' => 60,
            ]);
        }
        if ($this->sdkConfig->hasSecurity()) {
            $this->sdkConfig->client = Utils\Utils::configureSecurityClient($this->sdkConfig->client, $this->sdkConfig->getSecurity());
        }

        return new SDK($this->sdkConfig);
    }
}