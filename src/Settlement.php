<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


/** Settlement - A settlement record for a transaction. */
class Settlement
{
    /**
     * The unique identifier for the settlement.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * The merchant account this settlement belongs to.
     *
     * @var string $merchantAccountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_account_id')]
    public string $merchantAccountId;

    /**
     * Date and time the settlement was created.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * Date and time the settlement was last updated.
     *
     * @var \DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    public \DateTime $updatedAt;

    /**
     * Date and time the settlement was posted.
     *
     * @var \DateTime $postedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('posted_at')]
    public \DateTime $postedAt;

    /**
     * Date and time the settlement was ingested.
     *
     * @var \DateTime $ingestedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('ingested_at')]
    public \DateTime $ingestedAt;

    /**
     * ISO 4217 currency code for the settlement.
     *
     * @var string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    public string $currency;

    /**
     * The total settled amount in the smallest currency unit (e.g. cents).
     *
     * @var int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    public int $amount;

    /**
     * The commission amount deducted in the smallest currency unit.
     *
     * @var int $commission
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('commission')]
    public int $commission;

    /**
     * The report ID from the payment service.
     *
     * @var string $paymentServiceReportId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service_report_id')]
    public string $paymentServiceReportId;

    /**
     * List of file IDs for the payment service report.
     *
     * @var array<string> $paymentServiceReportFileIds
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service_report_file_ids')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>')]
    public array $paymentServiceReportFileIds;

    /**
     * The transaction this settlement is associated with.
     *
     * @var string $transactionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_id')]
    public string $transactionId;

    /**
     * The exchange rate used for settlement, if applicable.
     *
     * @var ?float $exchangeRate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('exchange_rate')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $exchangeRate = null;

    /**
     * The interchange fee, if applicable, in the smallest currency unit.
     *
     * @var ?int $interchange
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('interchange')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $interchange = null;

    /**
     * The markup fee, if applicable, in the smallest currency unit.
     *
     * @var ?int $markup
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('markup')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $markup = null;

    /**
     * The scheme fee, if applicable, in the smallest currency unit.
     *
     * @var ?int $schemeFee
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scheme_fee')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $schemeFee = null;

    /**
     * Always 'settlement'.
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  string  $id
     * @param  string  $merchantAccountId
     * @param  \DateTime  $createdAt
     * @param  \DateTime  $updatedAt
     * @param  \DateTime  $postedAt
     * @param  \DateTime  $ingestedAt
     * @param  string  $currency
     * @param  int  $amount
     * @param  int  $commission
     * @param  string  $paymentServiceReportId
     * @param  array<string>  $paymentServiceReportFileIds
     * @param  string  $transactionId
     * @param  ?string  $type
     * @param  ?float  $exchangeRate
     * @param  ?int  $interchange
     * @param  ?int  $markup
     * @param  ?int  $schemeFee
     * @phpstan-pure
     */
    public function __construct(string $id, string $merchantAccountId, \DateTime $createdAt, \DateTime $updatedAt, \DateTime $postedAt, \DateTime $ingestedAt, string $currency, int $amount, int $commission, string $paymentServiceReportId, array $paymentServiceReportFileIds, string $transactionId, ?float $exchangeRate = null, ?int $interchange = null, ?int $markup = null, ?int $schemeFee = null, ?string $type = 'settlement')
    {
        $this->id = $id;
        $this->merchantAccountId = $merchantAccountId;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->postedAt = $postedAt;
        $this->ingestedAt = $ingestedAt;
        $this->currency = $currency;
        $this->amount = $amount;
        $this->commission = $commission;
        $this->paymentServiceReportId = $paymentServiceReportId;
        $this->paymentServiceReportFileIds = $paymentServiceReportFileIds;
        $this->transactionId = $transactionId;
        $this->exchangeRate = $exchangeRate;
        $this->interchange = $interchange;
        $this->markup = $markup;
        $this->schemeFee = $schemeFee;
        $this->type = $type;
    }
}