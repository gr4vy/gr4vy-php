<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


/** Transaction - A full transaction resource. */
class Transaction
{
    /**
     * The ID for the transaction.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     *
     * @var string $reconciliationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('reconciliation_id')]
    public string $reconciliationId;

    /**
     * The ID of the merchant account this transaction belongs to.
     *
     * @var string $merchantAccountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_account_id')]
    public string $merchantAccountId;

    /**
     * The currency code for this transaction.
     *
     * @var string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    public string $currency;

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     *
     * @var int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    public int $amount;

    /**
     *
     * @var TransactionStatus $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionStatus')]
    public TransactionStatus $status;

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     *
     * @var int $authorizedAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('authorized_amount')]
    public int $authorizedAmount;

    /**
     * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
     *
     * @var int $capturedAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('captured_amount')]
    public int $capturedAmount;

    /**
     * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
     *
     * @var int $refundedAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('refunded_amount')]
    public int $refundedAmount;

    /**
     * The net amount settled for this transaction.
     *
     * @var int $settledAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settled_amount')]
    public int $settledAmount;

    /**
     * Indicates whether this transaction has been settled.
     *
     * @var bool $settled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settled')]
    public bool $settled;

    /**
     *
     * @var TransactionIntent $intent
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('intent')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionIntent')]
    public TransactionIntent $intent;

    /**
     * The gift cards redeemed for this transaction.
     *
     * @var array<GiftCardRedemption> $giftCardRedemptions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('gift_card_redemptions')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\GiftCardRedemption>')]
    public array $giftCardRedemptions;

    /**
     * The date this buyer was created at.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * The date this buyer was last updated at.
     *
     * @var \DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    public \DateTime $updatedAt;

    /**
     * The way payment method information made it to this transaction.
     *
     * @var TransactionPaymentSource $paymentSource
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_source')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionPaymentSource')]
    public TransactionPaymentSource $paymentSource;

    /**
     * Indicates whether the transaction was initiated by the merchant or the customer.
     *
     * @var bool $merchantInitiated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_initiated')]
    public bool $merchantInitiated;

    /**
     * Indicates whether the transaction represents a subsequent payment or an initial one.
     *
     * @var bool $isSubsequentPayment
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('is_subsequent_payment')]
    public bool $isSubsequentPayment;

    /**
     *
     * @var TransactionIntentOutcome $intentOutcome
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('intent_outcome')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionIntentOutcome')]
    public TransactionIntentOutcome $intentOutcome;

    /**
     * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
     *
     * @var bool $multiTender
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('multi_tender')]
    public bool $multiTender;

    /**
     * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
     *
     * @var bool $accountFundingTransaction
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_funding_transaction')]
    public bool $accountFundingTransaction;

    /**
     * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
     *
     * @var ?array<string, ?string> $additionalIdentifiers
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('additional_identifiers')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|null>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $additionalIdentifiers = null;

    /**
     * The currency of this transaction's settlement in ISO 4217 three-letter code format.
     *
     * @var ?string $settledCurrency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settled_currency')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $settledCurrency = null;

    /**
     * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
     *
     * @var ?string $country
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('country')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $country = null;

    /**
     * An external identifier that can be used to match the transaction against your own records.
     *
     * @var ?string $externalIdentifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_identifier')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalIdentifier = null;

    /**
     * The payment method used for this transaction.
     *
     * @var ?TransactionPaymentMethod $paymentMethod
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionPaymentMethod|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionPaymentMethod $paymentMethod = null;

    /**
     * The method used for the transaction.
     *
     * @var ?Method $method
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Method|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Method $method = null;

    /**
     * The name of the instrument used to process the transaction.
     *
     * @var ?InstrumentType $instrumentType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('instrument_type')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\InstrumentType|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?InstrumentType $instrumentType = null;

    /**
     * The standardized error code set by Gr4vy.
     *
     * @var ?string $errorCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('error_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $errorCode = null;

    /**
     * The payment service used for this transaction.
     *
     * @var ?TransactionPaymentService $paymentService
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionPaymentService|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionPaymentService $paymentService = null;

    /**
     * The buyer used for this transaction.
     *
     * @var ?TransactionBuyer $buyer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('buyer')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionBuyer|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionBuyer $buyer = null;

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     *
     * @var ?string $rawResponseCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('raw_response_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $rawResponseCode = null;

    /**
     *  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     *
     * @var ?string $rawResponseDescription
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('raw_response_description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $rawResponseDescription = null;

    /**
     * The shipping details associated with the transaction.
     *
     * @var ?ShippingDetails $shippingDetails
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('shipping_details')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\ShippingDetails|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?ShippingDetails $shippingDetails = null;

    /**
     * The identifier for the checkout session this transaction is associated with.
     *
     * @var ?string $checkoutSessionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('checkout_session_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $checkoutSessionId = null;

    /**
     * The gift card service used for this transaction.
     *
     * @var ?GiftCardService $giftCardService
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('gift_card_service')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\GiftCardService|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?GiftCardService $giftCardService = null;

    /**
     * Contains information about an airline travel, if applicable.
     *
     * @var ?Airline $airline
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('airline')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Airline|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Airline $airline = null;

    /**
     * This is the response description received from the processor.
     *
     * @var ?string $authResponseCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('auth_response_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $authResponseCode = null;

    /**
     * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
     *
     * @var ?AVSResponseCode $avsResponseCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('avs_response_code')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\AVSResponseCode|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AVSResponseCode $avsResponseCode = null;

    /**
     * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
     *
     * @var ?CVVResponseCode $cvvResponseCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cvv_response_code')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\CVVResponseCode|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CVVResponseCode $cvvResponseCode = null;

    /**
     * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
     *
     * @var ?AntiFraudDecision $antiFraudDecision
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('anti_fraud_decision')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\AntiFraudDecision|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AntiFraudDecision $antiFraudDecision = null;

    /**
     * An array of cart items that represents the line items of a transaction.
     *
     * @var ?array<CartItem> $cartItems
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cart_items')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\CartItem>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $cartItems = null;

    /**
     * The statement descriptor is the text to be shown on the buyer's statements.
     *
     * @var ?StatementDescriptor $statementDescriptor
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('statement_descriptor')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\StatementDescriptor|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?StatementDescriptor $statementDescriptor = null;

    /**
     * An identifier for the transaction used by the scheme itself, when available.
     *
     * @var ?string $schemeTransactionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scheme_transaction_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $schemeTransactionId = null;

    /**
     * The 3-D Secure data that was sent to the payment service for the transaction.
     *
     * @var ?TransactionThreeDSecureSummary $threeDSecure
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('three_d_secure')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionThreeDSecureSummary|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionThreeDSecureSummary $threeDSecure = null;

    /**
     * The payment service's unique ID for the transaction.
     *
     * @var ?string $paymentServiceTransactionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service_transaction_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $paymentServiceTransactionId = null;

    /**
     * Additional information about the transaction stored as key-value pairs.
     *
     * @var ?array<string, string> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * The date this transaction was authorized at.
     *
     * @var ?\DateTime $authorizedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('authorized_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $authorizedAt = null;

    /**
     * The date this transaction was captured at.
     *
     * @var ?\DateTime $capturedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('captured_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $capturedAt = null;

    /**
     * The date this transaction was voided at.
     *
     * @var ?\DateTime $voidedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('voided_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $voidedAt = null;

    /**
     * The date this transaction's approval URL will expire at.
     *
     * @var ?\DateTime $approvalExpiresAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('approval_expires_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $approvalExpiresAt = null;

    /**
     * The date this transaction's approval timed out at.
     *
     * @var ?\DateTime $buyerApprovalTimedoutAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('buyer_approval_timedout_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $buyerApprovalTimedoutAt = null;

    /**
     * The recipient of any account to account funding. For use with AFTs.
     *
     * @var ?Recipient $recipient
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('recipient')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Recipient|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Recipient $recipient = null;

    /**
     * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
     *
     * @var ?string $merchantAdviceCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_advice_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $merchantAdviceCode = null;

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     *
     * @var ?bool $pendingReview
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('pending_review')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $pendingReview = null;

    /**
     * Always `transaction`.
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  string  $id
     * @param  string  $reconciliationId
     * @param  string  $merchantAccountId
     * @param  string  $currency
     * @param  int  $amount
     * @param  TransactionStatus  $status
     * @param  int  $authorizedAmount
     * @param  int  $capturedAmount
     * @param  int  $refundedAmount
     * @param  int  $settledAmount
     * @param  bool  $settled
     * @param  TransactionIntent  $intent
     * @param  array<GiftCardRedemption>  $giftCardRedemptions
     * @param  \DateTime  $createdAt
     * @param  \DateTime  $updatedAt
     * @param  TransactionPaymentSource  $paymentSource
     * @param  bool  $merchantInitiated
     * @param  bool  $isSubsequentPayment
     * @param  TransactionIntentOutcome  $intentOutcome
     * @param  bool  $multiTender
     * @param  bool  $accountFundingTransaction
     * @param  ?string  $type
     * @param  ?bool  $pendingReview
     * @param  ?array<string, ?string>  $additionalIdentifiers
     * @param  ?string  $settledCurrency
     * @param  ?string  $country
     * @param  ?string  $externalIdentifier
     * @param  ?TransactionPaymentMethod  $paymentMethod
     * @param  ?Method  $method
     * @param  ?InstrumentType  $instrumentType
     * @param  ?string  $errorCode
     * @param  ?TransactionPaymentService  $paymentService
     * @param  ?TransactionBuyer  $buyer
     * @param  ?string  $rawResponseCode
     * @param  ?string  $rawResponseDescription
     * @param  ?ShippingDetails  $shippingDetails
     * @param  ?string  $checkoutSessionId
     * @param  ?GiftCardService  $giftCardService
     * @param  ?Airline  $airline
     * @param  ?string  $authResponseCode
     * @param  ?AVSResponseCode  $avsResponseCode
     * @param  ?CVVResponseCode  $cvvResponseCode
     * @param  ?AntiFraudDecision  $antiFraudDecision
     * @param  ?array<CartItem>  $cartItems
     * @param  ?StatementDescriptor  $statementDescriptor
     * @param  ?string  $schemeTransactionId
     * @param  ?TransactionThreeDSecureSummary  $threeDSecure
     * @param  ?string  $paymentServiceTransactionId
     * @param  ?array<string, string>  $metadata
     * @param  ?\DateTime  $authorizedAt
     * @param  ?\DateTime  $capturedAt
     * @param  ?\DateTime  $voidedAt
     * @param  ?\DateTime  $approvalExpiresAt
     * @param  ?\DateTime  $buyerApprovalTimedoutAt
     * @param  ?Recipient  $recipient
     * @param  ?string  $merchantAdviceCode
     * @phpstan-pure
     */
    public function __construct(string $id, string $reconciliationId, string $merchantAccountId, string $currency, int $amount, TransactionStatus $status, int $authorizedAmount, int $capturedAmount, int $refundedAmount, int $settledAmount, bool $settled, TransactionIntent $intent, array $giftCardRedemptions, \DateTime $createdAt, \DateTime $updatedAt, TransactionPaymentSource $paymentSource, bool $merchantInitiated, bool $isSubsequentPayment, TransactionIntentOutcome $intentOutcome, bool $multiTender, bool $accountFundingTransaction, ?array $additionalIdentifiers = null, ?string $settledCurrency = null, ?string $country = null, ?string $externalIdentifier = null, ?TransactionPaymentMethod $paymentMethod = null, ?Method $method = null, ?InstrumentType $instrumentType = null, ?string $errorCode = null, ?TransactionPaymentService $paymentService = null, ?TransactionBuyer $buyer = null, ?string $rawResponseCode = null, ?string $rawResponseDescription = null, ?ShippingDetails $shippingDetails = null, ?string $checkoutSessionId = null, ?GiftCardService $giftCardService = null, ?Airline $airline = null, ?string $authResponseCode = null, ?AVSResponseCode $avsResponseCode = null, ?CVVResponseCode $cvvResponseCode = null, ?AntiFraudDecision $antiFraudDecision = null, ?array $cartItems = null, ?StatementDescriptor $statementDescriptor = null, ?string $schemeTransactionId = null, ?TransactionThreeDSecureSummary $threeDSecure = null, ?string $paymentServiceTransactionId = null, ?array $metadata = null, ?\DateTime $authorizedAt = null, ?\DateTime $capturedAt = null, ?\DateTime $voidedAt = null, ?\DateTime $approvalExpiresAt = null, ?\DateTime $buyerApprovalTimedoutAt = null, ?Recipient $recipient = null, ?string $merchantAdviceCode = null, ?bool $pendingReview = false, ?string $type = 'transaction')
    {
        $this->id = $id;
        $this->reconciliationId = $reconciliationId;
        $this->merchantAccountId = $merchantAccountId;
        $this->currency = $currency;
        $this->amount = $amount;
        $this->status = $status;
        $this->authorizedAmount = $authorizedAmount;
        $this->capturedAmount = $capturedAmount;
        $this->refundedAmount = $refundedAmount;
        $this->settledAmount = $settledAmount;
        $this->settled = $settled;
        $this->intent = $intent;
        $this->giftCardRedemptions = $giftCardRedemptions;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->paymentSource = $paymentSource;
        $this->merchantInitiated = $merchantInitiated;
        $this->isSubsequentPayment = $isSubsequentPayment;
        $this->intentOutcome = $intentOutcome;
        $this->multiTender = $multiTender;
        $this->accountFundingTransaction = $accountFundingTransaction;
        $this->additionalIdentifiers = $additionalIdentifiers;
        $this->settledCurrency = $settledCurrency;
        $this->country = $country;
        $this->externalIdentifier = $externalIdentifier;
        $this->paymentMethod = $paymentMethod;
        $this->method = $method;
        $this->instrumentType = $instrumentType;
        $this->errorCode = $errorCode;
        $this->paymentService = $paymentService;
        $this->buyer = $buyer;
        $this->rawResponseCode = $rawResponseCode;
        $this->rawResponseDescription = $rawResponseDescription;
        $this->shippingDetails = $shippingDetails;
        $this->checkoutSessionId = $checkoutSessionId;
        $this->giftCardService = $giftCardService;
        $this->airline = $airline;
        $this->authResponseCode = $authResponseCode;
        $this->avsResponseCode = $avsResponseCode;
        $this->cvvResponseCode = $cvvResponseCode;
        $this->antiFraudDecision = $antiFraudDecision;
        $this->cartItems = $cartItems;
        $this->statementDescriptor = $statementDescriptor;
        $this->schemeTransactionId = $schemeTransactionId;
        $this->threeDSecure = $threeDSecure;
        $this->paymentServiceTransactionId = $paymentServiceTransactionId;
        $this->metadata = $metadata;
        $this->authorizedAt = $authorizedAt;
        $this->capturedAt = $capturedAt;
        $this->voidedAt = $voidedAt;
        $this->approvalExpiresAt = $approvalExpiresAt;
        $this->buyerApprovalTimedoutAt = $buyerApprovalTimedoutAt;
        $this->recipient = $recipient;
        $this->merchantAdviceCode = $merchantAdviceCode;
        $this->pendingReview = $pendingReview;
        $this->type = $type;
    }
}