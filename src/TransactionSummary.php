<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy;


/** TransactionSummary - A transaction, summarised */
class TransactionSummary
{
    /**
     * The ID for the transaction.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
     *
     * @var string $reconciliationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('reconciliation_id')]
    public string $reconciliationId;

    /**
     * The ID of the merchant account this transaction belongs to.
     *
     * @var string $merchantAccountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('merchant_account_id')]
    public string $merchantAccountId;

    /**
     * The currency code for this transaction.
     *
     * @var string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    public string $currency;

    /**
     * The total amount for this transaction across all funding sources including gift cards.
     *
     * @var int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    public int $amount;

    /**
     *
     * @var TransactionStatus $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionStatus')]
    public TransactionStatus $status;

    /**
     * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
     *
     * @var int $authorizedAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('authorized_amount')]
    public int $authorizedAmount;

    /**
     * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
     *
     * @var int $capturedAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('captured_amount')]
    public int $capturedAmount;

    /**
     * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
     *
     * @var int $refundedAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('refunded_amount')]
    public int $refundedAmount;

    /**
     * The net amount settled for this transaction.
     *
     * @var int $settledAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settled_amount')]
    public int $settledAmount;

    /**
     * Indicates whether this transaction has been settled.
     *
     * @var bool $settled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settled')]
    public bool $settled;

    /**
     *
     * @var TransactionIntent $intent
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('intent')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionIntent')]
    public TransactionIntent $intent;

    /**
     * The gift cards redeemed for this transaction.
     *
     * @var array<GiftCardRedemption> $giftCardRedemptions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('gift_card_redemptions')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\GiftCardRedemption>')]
    public array $giftCardRedemptions;

    /**
     * The date this buyer was created at.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * The date this buyer was last updated at.
     *
     * @var \DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    public \DateTime $updatedAt;

    /**
     * The currency of this transaction's settlement in ISO 4217 three-letter code format.
     *
     * @var ?string $settledCurrency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('settled_currency')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $settledCurrency = null;

    /**
     * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
     *
     * @var ?string $country
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('country')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $country = null;

    /**
     * An external identifier that can be used to match the transaction against your own records.
     *
     * @var ?string $externalIdentifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_identifier')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalIdentifier = null;

    /**
     * The payment method used for this transaction.
     *
     * @var ?TransactionPaymentMethod $paymentMethod
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionPaymentMethod|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionPaymentMethod $paymentMethod = null;

    /**
     * The method used for the transaction.
     *
     * @var ?Method $method
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('method')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\Method|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Method $method = null;

    /**
     * The name of the instrument used to process the transaction.
     *
     * @var ?InstrumentType $instrumentType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('instrument_type')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\InstrumentType|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?InstrumentType $instrumentType = null;

    /**
     * The standardized error code set by Gr4vy.
     *
     * @var ?string $errorCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('error_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $errorCode = null;

    /**
     * The payment service used for this transaction.
     *
     * @var ?TransactionPaymentService $paymentService
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('payment_service')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionPaymentService|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionPaymentService $paymentService = null;

    /**
     * The buyer used for this transaction.
     *
     * @var ?TransactionBuyer $buyer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('buyer')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\TransactionBuyer|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionBuyer $buyer = null;

    /**
     * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
     *
     * @var ?string $rawResponseCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('raw_response_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $rawResponseCode = null;

    /**
     *  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
     *
     * @var ?string $rawResponseDescription
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('raw_response_description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $rawResponseDescription = null;

    /**
     * The shipping details associated with the transaction.
     *
     * @var ?ShippingDetails $shippingDetails
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('shipping_details')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\ShippingDetails|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?ShippingDetails $shippingDetails = null;

    /**
     * The identifier for the checkout session this transaction is associated with.
     *
     * @var ?string $checkoutSessionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('checkout_session_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $checkoutSessionId = null;

    /**
     * The gift card service used for this transaction.
     *
     * @var ?GiftCardService $giftCardService
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('gift_card_service')]
    #[\Speakeasy\Serializer\Annotation\Type('\Gr4vy\GiftCardService|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?GiftCardService $giftCardService = null;

    /**
     * Whether a manual anti fraud review is pending with an anti fraud service.
     *
     * @var ?bool $pendingReview
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('pending_review')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $pendingReview = null;

    /**
     * Always `transaction`.
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  string  $id
     * @param  string  $reconciliationId
     * @param  string  $merchantAccountId
     * @param  string  $currency
     * @param  int  $amount
     * @param  TransactionStatus  $status
     * @param  int  $authorizedAmount
     * @param  int  $capturedAmount
     * @param  int  $refundedAmount
     * @param  int  $settledAmount
     * @param  bool  $settled
     * @param  TransactionIntent  $intent
     * @param  array<GiftCardRedemption>  $giftCardRedemptions
     * @param  \DateTime  $createdAt
     * @param  \DateTime  $updatedAt
     * @param  ?string  $type
     * @param  ?bool  $pendingReview
     * @param  ?string  $settledCurrency
     * @param  ?string  $country
     * @param  ?string  $externalIdentifier
     * @param  ?TransactionPaymentMethod  $paymentMethod
     * @param  ?Method  $method
     * @param  ?InstrumentType  $instrumentType
     * @param  ?string  $errorCode
     * @param  ?TransactionPaymentService  $paymentService
     * @param  ?TransactionBuyer  $buyer
     * @param  ?string  $rawResponseCode
     * @param  ?string  $rawResponseDescription
     * @param  ?ShippingDetails  $shippingDetails
     * @param  ?string  $checkoutSessionId
     * @param  ?GiftCardService  $giftCardService
     * @phpstan-pure
     */
    public function __construct(string $id, string $reconciliationId, string $merchantAccountId, string $currency, int $amount, TransactionStatus $status, int $authorizedAmount, int $capturedAmount, int $refundedAmount, int $settledAmount, bool $settled, TransactionIntent $intent, array $giftCardRedemptions, \DateTime $createdAt, \DateTime $updatedAt, ?string $settledCurrency = null, ?string $country = null, ?string $externalIdentifier = null, ?TransactionPaymentMethod $paymentMethod = null, ?Method $method = null, ?InstrumentType $instrumentType = null, ?string $errorCode = null, ?TransactionPaymentService $paymentService = null, ?TransactionBuyer $buyer = null, ?string $rawResponseCode = null, ?string $rawResponseDescription = null, ?ShippingDetails $shippingDetails = null, ?string $checkoutSessionId = null, ?GiftCardService $giftCardService = null, ?bool $pendingReview = false, ?string $type = 'transaction')
    {
        $this->id = $id;
        $this->reconciliationId = $reconciliationId;
        $this->merchantAccountId = $merchantAccountId;
        $this->currency = $currency;
        $this->amount = $amount;
        $this->status = $status;
        $this->authorizedAmount = $authorizedAmount;
        $this->capturedAmount = $capturedAmount;
        $this->refundedAmount = $refundedAmount;
        $this->settledAmount = $settledAmount;
        $this->settled = $settled;
        $this->intent = $intent;
        $this->giftCardRedemptions = $giftCardRedemptions;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->settledCurrency = $settledCurrency;
        $this->country = $country;
        $this->externalIdentifier = $externalIdentifier;
        $this->paymentMethod = $paymentMethod;
        $this->method = $method;
        $this->instrumentType = $instrumentType;
        $this->errorCode = $errorCode;
        $this->paymentService = $paymentService;
        $this->buyer = $buyer;
        $this->rawResponseCode = $rawResponseCode;
        $this->rawResponseDescription = $rawResponseDescription;
        $this->shippingDetails = $shippingDetails;
        $this->checkoutSessionId = $checkoutSessionId;
        $this->giftCardService = $giftCardService;
        $this->pendingReview = $pendingReview;
        $this->type = $type;
    }
}