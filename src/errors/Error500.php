<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Gr4vy\errors;

use Gr4vy;
use Gr4vy\Utils;
class Error500
{
    /**
     * Always `error`.
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * Always `server_error`
     *
     * @var ?string $code
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $code = null;

    /**
     * Always `500`.
     *
     * @var ?int $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $status = null;

    /**
     * A human readable message that provides more context to the error.
     *
     * @var ?string $message
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('message')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $message = null;

    /**
     * A list of details that further ellaborate on the error.
     *
     * @var ?array<Gr4vy\ErrorDetail> $details
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('details')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Gr4vy\ErrorDetail>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $details = null;

    /**
     * @param  ?string  $type
     * @param  ?string  $code
     * @param  ?int  $status
     * @param  ?string  $message
     * @param  ?array<Gr4vy\ErrorDetail>  $details
     * @phpstan-pure
     */
    public function __construct(?array $details = null, ?string $code = 'server_error', ?int $status = 500, ?string $message = 'Request could not be processed', ?string $type = 'error')
    {
        $this->type = $type;
        $this->code = $code;
        $this->status = $status;
        $this->message = $message;
        $this->details = $details;
    }

    public function toException(): Error500Throwable
    {
        $serializer = Utils\JSON::createSerializer();
        $message = $serializer->serialize($this, 'json');
        if ($this->code !== null) {
            $code = $this->code;
        } else {
            $code = -1;
        }

        return new Error500Throwable($message, (int) $code, $this);
    }
}